<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云澈の博客</title>
  
  <subtitle>不经历风雨，怎能见彩虹！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liudufu.github.io/"/>
  <updated>2023-08-26T09:59:46.250Z</updated>
  <id>https://liudufu.github.io/</id>
  
  <author>
    <name>云澈</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>request爬虫入门</title>
    <link href="https://liudufu.github.io/Getting_Started_with_Request_Crawler/"/>
    <id>https://liudufu.github.io/Getting_Started_with_Request_Crawler/</id>
    <published>2023-08-26T09:58:02.000Z</published>
    <updated>2023-08-26T09:59:46.250Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从网页的基本结构开始讲述, 慢慢使用一些简单的工具, 做一些简单的爬虫. 还会有一些小练习, 让你爬爬真正的互联网. 下载美图, 逛逛百度百科, 全网爬取等等. 当你懂得了爬虫的概念, 我们在深入一些, 谈谈如何加速你那和蠕虫(爬的慢)一样的爬虫, 把它升级为一只小飞虫(多进程,异步爬取). 当然这些内容都不会特别深入, 重点是把你带入门</p></blockquote><a id="more"></a><h2 id="🌸request爬虫入门"><a href="#🌸request爬虫入门" class="headerlink" title="🌸request爬虫入门"></a>🌸request爬虫入门</h2><blockquote><p>从网页的基本结构开始讲述, 慢慢使用一些简单的工具, 做一些简单的爬虫. 还会有一些小练习, 让你爬爬真正的互联网. 下载美图, 逛逛百度百科, 全网爬取等等. 当你懂得了爬虫的概念, 我们在深入一些, 谈谈如何加速你那和蠕虫(爬的慢)一样的爬虫, 把它升级为一只小飞虫(多进程,异步爬取). 当然这些内容都不会特别深入, 重点是把你带入门</p></blockquote><h3 id="简单的网页结构"><a href="#简单的网页结构" class="headerlink" title="简单的网页结构"></a>简单的网页结构</h3><p>在 HTML 中, 基本上所有的实体内容, 都会有个 tag 来框住它. 而这个被 tag 住的内容, 就可以被展示成不同的形式, 或有不同的功能. 主体的 tag 分成两部分, <code>header</code> 和 <code>body</code>. 在 <code>header</code> 中, 存放这一些网页的网页的元信息, 比如说 <code>title</code>, 这些信息是不会被显示到你看到的网页中的. 这些信息大多数时候是给浏览器看, 或者是给搜索引擎的爬虫看</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;云澈の博客&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"icon"</span> href=<span class="string">"https://liudufu.github.io/"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></tbody></table></figure><p>HTML 的第二大块是 <code>body</code>, 这个部分才是你看到的网页信息. 网页中的 <code>heading</code>, 视频, 图片和文字等都存放在这里. 这里的 <code>&lt;h1&gt;&lt;/h1&gt;</code> tag 就是主标题, 我们看到呈现出来的效果就是大一号的文字. <code>&lt;p&gt;&lt;/p&gt;</code> 里面的文字就是一个段落. <code>&lt;a&gt;&lt;/a&gt;</code>里面都是一些链接. 所以很多情况, 东西都是放在这些 tag 中的.</p><h3 id="用-Python-登录网页"><a href="#用-Python-登录网页" class="headerlink" title="用 Python 登录网页"></a>用 Python 登录网页</h3><p>好了, 对网页结构和 HTML 有了一些基本认识以后, 我们就能用 Python 来爬取这个<a href="https://mofanpy.com/static/scraping/basic-structure.html" target="_blank" rel="noopener">网页</a>的一些基本信息. 首先要做的, 是使用 Python 来登录这个网页, 并打印出这个网页 HTML 的 source code. 注意, 因为网页中存在中文, 为了正常显示中文, <code>read()</code> 完以后, 我们要对读出来的文字进行转换, <code>decode()</code> 成可以正常显示中文的形式.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="comment"># if has Chinese, apply decode()</span></span><br><span class="line">html = urlopen(</span><br><span class="line">    <span class="string">"https://liudufu.github.io/"</span></span><br><span class="line">).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(html)</span><br></pre></td></tr></tbody></table></figure><p>我们能够成功读取这个网页的所有信息了. 但我们还没有对网页的信息进行汇总和利用. 我们发现, 想要提取一些形式的信息, 合理的利用 tag 的名字十分重要.</p><h3 id="匹配网页内容"><a href="#匹配网页内容" class="headerlink" title="匹配网页内容"></a>匹配网页内容</h3><p>这里我们使用 Python 的正则表达式 RegEx 进行匹配文字, 筛选信息的工作. 如果是初级的网页匹配, 我们使用正则完全就可以了, 高级一点或者比较繁琐的匹配, 我还是推荐使用 <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="noopener">BeautifulSoup</a>. 不急不急, 我知道你想偷懒, 我之后马上就会教 beautiful soup 了. 但是现在我们还是使用正则来做几个简单的例子, 让你熟悉一下套路.</p><p>如果我们想用代码找到这个网页的 title, 我们就能这样写. 选好要使用的 tag 名称 <code>&lt;title&gt;</code>. 使用正则匹配.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">res = re.findall(<span class="string">r"&lt;title&gt;(.+?)&lt;/title&gt;"</span>, html)</span><br><span class="line">print(<span class="string">"\nPage title is: "</span>, res[<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><p>如果想要找到中间的那个段落 <code>&lt;p&gt;</code>, 我们使用下面方法, 因为这个段落在 HTML 中还夹杂着 tab, new line, 所以我们给一个 <code>flags=re.DOTALL</code> 来对这些 tab, new line 不敏感.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = re.findall(<span class="string">r"&lt;p&gt;(.*?)&lt;/p&gt;"</span>, html, flags=re.DOTALL)    <span class="comment"># re.DOTALL if multi line</span></span><br><span class="line">print(<span class="string">"\nPage paragraph is: "</span>, res[<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><p>最后一个练习是找一找所有的链接, 这个比较有用, 有时候你想找到网页里的链接, 然后下载一些内容到电脑里, 就靠这样的途径</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = re.findall(<span class="string">r'href="(.*?)"'</span>, html)</span><br><span class="line">print(<span class="string">"\nAll links: "</span>, res)</span><br></pre></td></tr></tbody></table></figure><h3 id="BeautifulSoup基础"><a href="#BeautifulSoup基础" class="headerlink" title="BeautifulSoup基础"></a>BeautifulSoup基础</h3><p>我们总结一下爬网页的流程, 让你对 BeautifulSoup 有一个更好的定位.</p><ol><li>选着要爬的网址 (url)</li><li>使用 python 登录上这个网址 (urlopen等)</li><li>读取网页信息 (read() 出来)</li><li><strong>将读取的信息放入 BeautifulSoup</strong></li><li><strong>使用 BeautifulSoup 选取 tag 信息等 (代替正则表达式)</strong></li></ol><p>初学的时候总是搞不懂这些包是干什么的, 现在你就能理解这个 BeautifulSoup 到底是干什么的了.</p><p>BeautifulSoup 使用起来非常简单, 我们先按常规读取网页</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="comment"># if has Chinese, apply decode()</span></span><br><span class="line">html = urlopen(<span class="string">"url"</span>).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(html)</span><br></pre></td></tr></tbody></table></figure><p>每张网页中, 都有两大块, 一个是 <code>&lt;head&gt;</code>, 一个是 <code>&lt;body&gt;</code>, 我们等会用 <code>BeautifulSoup</code> 来找到 body 中的段落 <code>&lt;p&gt;</code> 和所有链接 <code>&lt;a&gt;</code>.</p><p>读取这个网页信息, 我们将要加载进 <code>BeautifulSoup</code>, 以 <code>lxml</code> 的这种形式加载. 除了 <code>lxml</code>, 其实还有<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/#id9" target="_blank" rel="noopener">很多形式的解析器</a>, 不过大家都推荐使用 <code>lxml</code> 的形式. 然后 <code>soup</code> 里面就有着这个 HTML 的所有信息. 如果你要输出 <code>&lt;h1&gt;</code> 标题, 可以就直接 <code>soup.h1</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html, features=<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.h1)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n'</span>, soup.p)</span><br></pre></td></tr></tbody></table></figure><p>如果网页中有多个同样的 tag, 比如链接 <code>&lt;a&gt;</code>, 我们可以使用 <code>find_all()</code> 来找到所有的选项. 因为我们真正的 link 不是在 <code>&lt;a&gt;</code> 中间 <code>&lt;/a&gt;</code>, 而是在 <code>&lt;a href="link"&gt;</code> 里面, 也可以看做是 <code>&lt;a&gt;</code> 的一个属性. 我们能用像 Python 字典的形式, 用 key 来读取 <code>l["href"]</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all_href = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">all_href = [l[<span class="string">'href'</span>] <span class="keyword">for</span> l <span class="keyword">in</span> all_href]</span><br><span class="line">print(<span class="string">'\n'</span>, all_href)</span><br></pre></td></tr></tbody></table></figure><p>懂得这些还是远远不够的, 真实情况往往比这些复杂. <code>BeautifulSoup</code> 还有很多其他的选择增强器. 接下来, 我们来了解一些 CSS 的概念, 用 <code>BeautifulSoup</code> 加上 CSS 来选择内容.</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>CSS 主要用途就是装饰你 骨感 HTML 页面. 如果将 HTML 比喻成没穿衣服的人, 那 CSS 就是五颜六色的衣服. 穿在人身上让人有了气质. CSS 的规则很多, 好在如果你只是需要爬网页, 你并不需要学习 CSS 的这些用法或规则, (如果你想, 你可以看到<a href="https://www.w3schools.com/css/" target="_blank" rel="noopener">这里</a>), 你只需要注意 CSS 的一条规则就能玩转爬虫了.</p><h4 id="CSS-的-Class"><a href="#CSS-的-Class" class="headerlink" title="CSS 的 Class"></a>CSS 的 Class</h4><p>这条规则就是 CSS 的 Class, CSS 在装饰每一个网页部件的时候, 都会给它一个名字. 而且一个类型的部件, 名字都可以一样. 比如每个网页 里面的字体/背景颜色, 字体大小, 都是由 CSS 来掌控的.</p><p>而 CSS 的代码, 可能就会放在这个网页的 <code>&lt;head&gt;</code> 中. 我们先使用 Python 读取这个页面.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="comment"># if has Chinese, apply decode()</span></span><br><span class="line">html = urlopen(<span class="string">"URL"</span>).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(html)</span><br></pre></td></tr></tbody></table></figure><p>在 <code>&lt;head&gt;</code> 中, 你会发现有这样一些东西被放在 <code>&lt;style&gt;</code> 里面, 这些东西都是某些 class 的 CSS 代码. 比如 <code>jan</code> 就是一个 class. <code>jan</code> 这个类掌控了这个类型的背景颜色. 所以在 <code>&lt;ul class="jan"&gt;</code> 这里, 这个 ul 的背景颜色就是黄色的. 而如果是 <code>month</code> 这个类, 它们的字体颜色就是红色.</p><h4 id="按-Class-匹配"><a href="#按-Class-匹配" class="headerlink" title="按 Class 匹配"></a>按 Class 匹配</h4><p> Class 匹配很简单. 比如我要找所有 class=month 的信息. 并打印出它们的 tag 内文字.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html, features=<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use class to narrow search</span></span><br><span class="line">month = soup.find_all(<span class="string">'li'</span>, {<span class="string">"class"</span>: <span class="string">"month"</span>})</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> month:</span><br><span class="line">    print(m.get_text())</span><br></pre></td></tr></tbody></table></figure><p>或者找到 class=jan 的信息. 然后在 <code>&lt;ul&gt;</code> 下面继续找 <code>&lt;ul&gt;</code> 内部的 <code>&lt;li&gt;</code> 信息. 这样一层层嵌套的信息, 非常容易找到.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jan = soup.find(<span class="string">'ul'</span>, {<span class="string">"class"</span>: <span class="string">'jan'</span>})</span><br><span class="line">d_jan = jan.find_all(<span class="string">'li'</span>)              <span class="comment"># use jan as a parent</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> d_jan:</span><br><span class="line">    print(d.get_text())</span><br></pre></td></tr></tbody></table></figure><p>如果想要找到一些有着一定格式的信息, 比如使用正则表达来寻找相类似的信息, 我们在 BeautifulSoup 中也能嵌入正则表达式</p><h3 id="嵌入正则"><a href="#嵌入正则" class="headerlink" title="嵌入正则"></a>嵌入正则</h3><p>比如你想下载页面的图片, 我们就可以将图片形式的 url 个匹配出来. 之后再下载就简单多了</p><h4 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h4><p>我们先读取这个网页. 导入正则模块 <code>re</code>.</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># if has Chinese, apply decode()</span></span><br><span class="line">html = urlopen(<span class="string">"URL"</span>).read().decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></tbody></table></figure><p>如果是图片, 它们都藏在这样一个 tag 中:</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;</span><br><span class="line">    &lt;img src=<span class="string">"tf.jpg"</span>&gt;</span><br><span class="line">&lt;/td&gt;</span><br></pre></td></tr></tbody></table></figure><p>所以, 我们可以用 <code>soup</code> 将这些 <code>&lt;img&gt;</code> tag 全部找出来, 但是每一个 img 的链接(src)都可能不同. 或者每一个图片有的可能是 jpg 有的是 png, 如果我们只想挑选 jpg 形式的图片, 我们就可以用这样一个正则 <code>r'.*?\.jpg'</code> 来选取. 把正则的 compile 形式放到 <code>BeautifulSoup</code> 的功能中, 就能选到符合要求的图片链接了.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html, features=<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">img_links = soup.find_all(<span class="string">"img"</span>, {<span class="string">"src"</span>: re.compile(<span class="string">'.*?\.jpg'</span>)})</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> img_links:</span><br><span class="line">    print(link[<span class="string">'src'</span>])</span><br></pre></td></tr></tbody></table></figure><p>又或者我们发现, 我想选一些课程的链接, 而这些链接都有统一的形式, 就是开头都会有 <code>https://.</code>, 那我就将这个定为一个正则的规则, 让 BeautifulSoup 帮我找到符合这个规则的链接.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">course_links = soup.find_all(<span class="string">'a'</span>, {<span class="string">'href'</span>: re.compile(<span class="string">'/tutorials/.*'</span>)})</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> course_links:</span><br><span class="line">    print(link[<span class="string">'href'</span>])</span><br></pre></td></tr></tbody></table></figure><p>我们接下来就来做一个小实战, 让我们的爬虫在百度百科上自由爬行, 在各个百科网页上跳来跳去</p><h3 id="爬百度百科"><a href="#爬百度百科" class="headerlink" title="爬百度百科"></a>爬百度百科</h3><blockquote><p>爬一爬百度百科, 让我们的爬虫从 网络爬虫 这一页开始爬, 然后在页面中寻找其他页面的信息, 然后爬去其他页面, 然后循环这么做, 看看最后我们的爬虫到底爬去了哪</p></blockquote><h4 id="百度百科"><a href="#百度百科" class="headerlink" title="百度百科"></a>百度百科</h4><p>百度百科中有很多名词的解释信息, 我们今天从 网页爬虫 的词条开始爬, 然后在页面中任意寻找下一个词条, 爬过去, 再寻找词条, 继续爬. 看看最后我们爬到的词条和 网页爬虫 差别有多大.</p><h4 id="观看规律"><a href="#观看规律" class="headerlink" title="观看规律"></a>观看规律</h4><p>20+行代码. 但是却能让它游走在百度百科的知识的海洋中. 首先我们需要定义一个起始网页, 我选择了 <a href="https://baike.baidu.com/item/网络爬虫/5162711" target="_blank" rel="noopener">网页爬虫</a>. 我们发现, 页面中有一些链接, 指向百度百科中的另外一些词条, 比如说下面这样.</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a target="_blank" href="/item/%E8%9C%98%E8%9B%9B/8135707" data-lemmaid="8135707"&gt;蜘蛛&lt;/a&gt;</span><br><span class="line">&lt;a target="_blank" href="/item/%E8%A0%95%E8%99%AB"&gt;蠕虫&lt;/a&gt;</span><br><span class="line">&lt;a target="_blank" href="/item/%E9%80%9A%E7%94%A8%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E"&gt;通用搜索引擎&lt;/a&gt;</span><br></pre></td></tr></tbody></table></figure><p>通过观察, 我们发现, 链接有些共通之处. 它们都是 <code>/item/</code> 开头, 夹杂着一些 <code>%E9</code> 这样的东西. 但是仔细搜索一下, 发现还有一些以 <code>/item/</code> 开头的, 却不是词条. 比如</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="/item/史记·2016?fr=navbar" target="_blank"&gt;史记·2016&lt;/a&gt;</span><br></pre></td></tr></tbody></table></figure><p> 我们需要对这些链接做一些筛选, 之前提到 的用 <code>BeautifulSoup</code> 和 正则表达式来筛选应该用得上. 有了些思路, 我们开始写代码吧.</p><h4 id="制作爬虫"><a href="#制作爬虫" class="headerlink" title="制作爬虫"></a>制作爬虫</h4><p>导入一些模块, 设置起始页. 并将 <code>/item/...</code> 的网页都放在 <code>his</code> 中, 做一个备案, 记录我们浏览过的网页.</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base_url = <span class="string">"https://baike.baidu.com"</span></span><br><span class="line">his = [<span class="string">"/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711"</span>]</span><br></pre></td></tr></tbody></table></figure><p>接着我们先不用循环, 对一个网页进行处理, 走一遍流程, 然后加上循环, 让我们的爬虫能在很多网页中爬取. 下面做的事情, 是为了在屏幕上打印出来我们现在正在哪张网页上, 网页的名字叫什么.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = base_url + his[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">html = urlopen(url).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">soup = BeautifulSoup(html, features=<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find(<span class="string">'h1'</span>).get_text(), <span class="string">'    url: '</span>, his[<span class="number">-1</span>])</span><br></pre></td></tr></tbody></table></figure><p>接下来我们开始在这个网页上找所有符合要求的 <code>/item/</code> 网址. 使用一个正则表达式(<a href="https://mofanpy.com/tutorials/python-basic/basic/regular-expression" target="_blank" rel="noopener">正则教程</a>) 过滤掉不想要的网址形式. 这样我们找到的网址都是 <code>/item/%xx%xx%xx...</code> 这样的格式了. 之后我们在这些过滤后的网页中随机选一个, 当做下一个要爬的网页. 不过有时候很不幸, 在 <code>sub_urls</code> 中并不能找到合适的网页, 我们就往回跳一个网页, 回到之前的网页中再随机抽一个网页做同样的事.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># find valid urls</span></span><br><span class="line">sub_urls = soup.find_all(<span class="string">"a"</span>, {<span class="string">"target"</span>: <span class="string">"_blank"</span>, <span class="string">"href"</span>: re.compile(<span class="string">"/item/(%.{2})+$"</span>)})</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sub_urls) != <span class="number">0</span>:</span><br><span class="line">    his.append(random.sample(sub_urls, <span class="number">1</span>)[<span class="number">0</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># no valid sub link found</span></span><br><span class="line">    his.pop()</span><br><span class="line">print(his)</span><br></pre></td></tr></tbody></table></figure><p>有了这套体系, 我们就能把它放在一个 for loop 中, 让它在各种不同的网页中跳来跳去</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">his = [<span class="string">"/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    url = base_url + his[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    html = urlopen(url).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = BeautifulSoup(html, features=<span class="string">'lxml'</span>)</span><br><span class="line">    print(i, soup.find(<span class="string">'h1'</span>).get_text(), <span class="string">'    url: '</span>, his[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># find valid urls</span></span><br><span class="line">    sub_urls = soup.find_all(<span class="string">"a"</span>, {<span class="string">"target"</span>: <span class="string">"_blank"</span>, <span class="string">"href"</span>: re.compile(<span class="string">"/item/(%.{2})+$"</span>)})</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sub_urls) != <span class="number">0</span>:</span><br><span class="line">        his.append(random.sample(sub_urls, <span class="number">1</span>)[<span class="number">0</span>][<span class="string">'href'</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># no valid sub link found</span></span><br><span class="line">        his.pop()</span><br></pre></td></tr></tbody></table></figure><h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><h4 id="获取网页的方式"><a href="#获取网页的方式" class="headerlink" title="获取网页的方式"></a>获取网页的方式</h4><p>其实在加载网页的时候, 有几种类型, 而这几种类型就是你打开网页的关键. 最重要的类型 (method) 就是 <code>get</code> 和 <code>post</code> (当然还有<a href="https://www.w3schools.com/tags/ref_httpmethods.asp" target="_blank" rel="noopener">其他的</a>, 比如 <code>head</code>, <code>delete</code>). 刚接触网页构架的朋友可能又会觉得有点懵逼了. 这些请求的方式到底有什么不同? 他们又有什么作用?</p><p>我们就来说两个重要的, <code>get</code>, <code>post</code>, 95% 的时间, 你都是在使用这两个来请求一个网页.</p><ul><li>post<ul><li>账号登录</li><li>搜索内容</li><li>上传图片</li><li>上传文件</li><li>往服务器传数据 等</li></ul></li><li>get<ul><li>正常打开网页</li><li><strong>不</strong>往服务器传数据</li></ul></li></ul><p>这样看来, 很多网页使用 <code>get</code> 就可以了, 比如 百度百科 里的所有页面, 都是只是 <code>get</code> 发送请求. 而 <code>post</code>, 我们则是给服务器发送个性化请求, 比如将你的账号密码传给服务器, 让它给你返回一个含有你个人信息的 HTML.</p><p>从主动和被动的角度来说, <code>post</code> 中文是<em>发送</em>, 比较主动, 你<strong>控制</strong>了服务器返回的内容. 而 <code>get</code> 中文是<em>取得</em>, 是被动的, 你<strong>没有</strong>发送给服务器个性化的信息, 它<strong>不会</strong>根据你个性化的信息返回<strong>不一样</strong>的 HTML.</p><h4 id="requests-get-请求"><a href="#requests-get-请求" class="headerlink" title="requests get 请求"></a>requests get 请求</h4><p>有了 requests, 我们可以发送个中 method 的请求. 比如 <code>get</code>. 我们想模拟一下百度的搜索. 首先我们需要观看一下百度搜索的规律. 在百度搜索框中写上CSDN 我们发现它弹出了一串很长长的网址.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?word=CSDN&amp;tn=25017023_2_dg&amp;ch=5&amp;ie=utf-8</span><br></pre></td></tr></tbody></table></figure><p>但是仔细一看, 和 CSDN 有关的信息, 只有前面一小段 (&amp;word=CSDN), 其他的对我们来说都是无用的信息. 所以我们现在来尝试一下如果的无用 url 都去掉会怎样? Duang! 我们还是能搜到 CSDN.</p><p>所以<code>&amp;word=CSDN</code> 这就是我们搜索需要的关键信息. 我们就能用 <code>get</code> 来搭配一些自定义的搜索关键词来用 python 个性化搜索. 首先, 我们固定不动的网址部分是 <a href="http://www.baidu.com/s" target="_blank" rel="noopener">http://www.baidu.com/s</a>, <code>?</code> 后面的东西都是一些参数 (parameters), 所以我们将这些 parameters 用 python 的字典代替, 然后传入 requests.get() 功能. 然后我们还能用 python (webbrowser模块) 打开一个你的默认浏览器, 观看你是否在百度的搜索页面.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line">param = {<span class="string">"wd"</span>: <span class="string">"CSDN"</span>}  <span class="comment"># 搜索的信息</span></span><br><span class="line">r = requests.get(<span class="string">'http://www.baidu.com/s'</span>, params=param)</span><br><span class="line">print(r.url)</span><br><span class="line">webbrowser.open(r.url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://www.baidu.com/s?wd=%E8%8E%AB%E7%83%A6Python</span></span><br></pre></td></tr></tbody></table></figure><h4 id="requests-post-请求"><a href="#requests-post-请求" class="headerlink" title="requests post 请求"></a>requests post 请求</h4><p><code>post</code> 又怎么用呢? 我们举个小例子, 假设 我们有一个提交信息的窗口, 如果我提交上去这个信息, 那边的服务器会更加这个提交的信息返回出另一个网页. 这就是网页怎么样使用你 <code>post</code> 过去的信息了.</p><p>比如我在一个表单填上自己的姓名, 当我点 submit 的时候, 这个姓名 就会被提交给服务器, 然后它会根据提交的姓名返回这个网页.</p><p>这样咋看起来好像和上面讲的 <code>get</code> 百度搜索没区别呀? 都是提交一些信息, 返回一个界面. 但是, <strong>重点来了</strong>. 你看看网址栏. 你 <code>post</code> 上去的个人信息, 有没有显示在 url 里? 你愿意将你的私密信息显示在 url 里吗? 你 <code>post</code> 过去的信息是交给服务器内部处理的. 不是用来显示在网址上的.</p><p>懂了这些, 我们就来看使用 python 和 requests 怎么做 <code>post</code> 这个操作吧.</p><p>首先我们调出浏览器的 <code>inspect</code> 然后发现我们填入姓名的地方原来是在一个 <code>&lt;form&gt;</code> 里面.</p><p>这个 <code>&lt;form&gt;</code> 里面有一些 <code>&lt;input&gt;</code> 个 tag, 我们仔细看到 <code>&lt;input&gt;</code> 里面的这个值 <code>name="firstname"</code> 和 <code>name="lastname"</code>, 这两个就是我们要 <code>post</code> 提交上去的关键信息了. 我们填好姓名, 为了记录点击 submit 后, 浏览器究竟发生了什么翻天覆地的变化, 我们在 <code>inspect</code> 窗口, 选择 <code>Network</code>, 勾选 <code>Preserve log</code>, 再点击 submit, 你就能看到服务器返回给你定制化后的页面时, 你使用的方法和数据.</p><p>这些数据包括了:</p><ul><li>Request URL (post 要用的 URL)</li><li>Request Method (post)</li><li>Form Data (post 去的信息)</li></ul><p>有了这些记录, 我们就能开始写 Python 来模拟这一次提交 post 了. </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = {<span class="string">'firstname'</span>: <span class="string">'xx'</span>, <span class="string">'lastname'</span>: <span class="string">'xx'</span>}</span><br><span class="line">r = requests.post(<span class="string">'url'</span>, data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></tbody></table></figure><h4 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h4><p>传照片也是 <code>post</code> 的一种, 我们得将本地的照片文件传送到服务器. 我们使用这个<a href="http://pythonscraping.com/files/form2.html" target="_blank" rel="noopener">网页</a>来模拟一次传照片的过程</p><p>如果你留意观察 url, 你会发现, 传送完照片以后的 url 有变动. 我们使用同样的步骤再次检查, 发现, choose file 按键链接的 <code>&lt;input&gt;</code> 是一个叫 <code>uploadFile</code> 的名字. 我们将这个名字记下, 放入 python 的字典当一个 key.</p><p>接着在字典中, 使用 open 打开一个图片文件, 当做要上传的文件. 把这个字典放入你的 <code>post</code> 里面的 <code>files</code> 参数. 就能上传你的图片了, 网页会返回一个页面, 将你的图片名显示在上面.</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file = {<span class="string">'uploadFile'</span>: open(<span class="string">'./image.png'</span>, <span class="string">'rb'</span>)}</span><br><span class="line">r = requests.post(<span class="string">'url'</span>, files=file)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></tbody></table></figure><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>用 <code>post</code> 还有一个重要的, 就是模拟登录. 再登录的时候发生了什么事情呢? </p><p>我们总结一下, 登录账号, 我们的浏览器做了什么.</p><ol><li>使用 post 方法登录了第一个红框的 url</li><li>post 的时候, 使用了 Form data 中的用户名和密码</li><li><strong>生成了一些 cookies</strong></li></ol><p>第三点我们是从来没有提到过的. cookie, 听起来很熟呀! 每当游览器出现问题的时候, 网上的解决方法是不是都有什么清除 cookie 之类的, 那 cookie 实际上是什么呢? <a href="https://baike.baidu.com/item/cookie/1119?fr=aladdin" target="_blank" rel="noopener">这里</a>给出了和全面的介绍.</p><p>简单来说, 因为打开网页时, 每一个页面都是不连续的, 没有关联的, cookies 就是用来衔接一个页面和另一个页面的关系. 比如说当我登录以后, 浏览器为了保存我的登录信息, 将这些信息存放在了 cookie 中. 然后我访问第二个页面的时候, 保存的 cookie 被调用, 服务器知道我之前做了什么, 浏览了些什么. 像你在网上看到的广告, 为什么都可能是你感兴趣的商品? 你登录淘宝, 给你推荐的为什么都和你买过的类似? 都是 cookies 的功劳, 让服务器知道你的个性化需求.</p><p>所以大部分时候, 每次你登录, 你就会有一个 cookies, 里面会提到你已经是登录状态了. 所以 cookie 在这时候很重要. cookies 的传递也特别重要, 比如我用 <code>requests.post</code> + <code>payload</code> 的用户信息发给网页, 返回的 <code>r</code> 里面会有生成的 cookies 信息. 接着我请求去登录后的页面时, 使用 <code>request.get</code>, 并将之前的 cookies 传入到 get 请求. 这样就能已登录的名义访问 get 的页面了.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">payload = {<span class="string">'username'</span>: <span class="string">'Morvan'</span>, <span class="string">'password'</span>: <span class="string">'password'</span>}</span><br><span class="line">r = requests.post(<span class="string">'/pages/cookies/welcome.php'</span>, data=payload)</span><br><span class="line">print(r.cookies.get_dict())</span><br><span class="line"></span><br><span class="line"><span class="comment"># {'username': 'Morvan', 'loggedin': '1'}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'/pages/cookies/profile.php'</span>, cookies=r.cookies)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hey Morvan! Looks like you're still logged into the site!</span></span><br></pre></td></tr></tbody></table></figure><h4 id="使用-Session-登录"><a href="#使用-Session-登录" class="headerlink" title="使用 Session 登录"></a>使用 Session 登录</h4><p>不过每次都要传递 cookies 是很麻烦的, 好在 requests 有个很 handy 的功能, 那就是 Session. 在一次会话中, 我们的 cookies 信息都是相连通的, 它自动帮我们传递这些 cookies 信息.</p><p>同样是执行上面的登录操作, 下面就是使用 session 的版本. 创建完一个 session 过后, 我们直接只用 session 来 <code>post</code> 和 <code>get</code>. 而且这次 <code>get</code> 的时候, 我们并没有传入 cookies. 但是实际上 session 内部就已经有了之前的 cookies 了.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">session = requests.Session()</span><br><span class="line">payload = {<span class="string">'username'</span>: <span class="string">'Morvan'</span>, <span class="string">'password'</span>: <span class="string">'password'</span>}</span><br><span class="line">r = session.post(<span class="string">'/pages/cookies/welcome.php'</span>, data=payload)</span><br><span class="line">print(r.cookies.get_dict())</span><br><span class="line"></span><br><span class="line"><span class="comment"># {'username': 'Morvan', 'loggedin': '1'}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = session.get(<span class="string">"http://pythonscraping.com/pages/cookies/profile.php"</span>)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hey Morvan! Looks like you're still logged into the site!</span></span><br></pre></td></tr></tbody></table></figure><p>这就是我们这次的教学, 想了解更多 requests 使用的朋友看到<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="noopener">这里</a>.</p><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在下载之前, 我们的弄清楚怎么样下载. 想下一张图, 我们首先要到这张图所在的网页. 在这个网页中找到这张图的位置, 并右键 <code>inspect</code>, 找到它在 HTML 中的信息.</p><p>发现原图被存放在这个网页, 注意这个地址开头是 <code>/</code>, 并不是完整的网址, 这种形式代表着, 它是在主域名下面的网址. 所以我们还要将其补全, 才能在网址栏中找到这个图片地址.</p><p>找到了这个网址, 我们就能开始下载了. 为了下载到一个特定的文件夹, 我们先建立一个文件夹吧. 并且规定这个图片下载地址.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.makedirs(<span class="string">'./img/'</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">IMAGE_URL = <span class="string">"url"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="使用-urlretrieve"><a href="#使用-urlretrieve" class="headerlink" title="使用 urlretrieve"></a>使用 urlretrieve</h4><p>在 urllib 模块中, 提供了我们一个下载功能 urlretrieve. 使用起来很简单. 输入下载地址 <code>IMAGE_URL</code> 和要存放的位置. 图片就会被自动下载过去了.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line">urlretrieve(IMAGE_URL, <span class="string">'./img/image1.png'</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="使用-request"><a href="#使用-request" class="headerlink" title="使用 request"></a>使用 request</h4><p>而在 requests模块, 也能拿来下东西. 下面的代码实现了和上面一样的功能, 但是稍微长了点. 但我们为什么要提到 requests 的下载呢? 因为使用它的另一种方法, 我们可以更加有效率的下载大文件.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(IMAGE_URL)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./img/image2.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></tbody></table></figure><p>所以说, 如果你要下载的是大文件, 比如视频等. requests 能让你下一点, 保存一点, 而不是要全部下载完才能保存去另外的地方. 这就是一个 chunk 一个 chunk 的下载. 使用 <code>r.iter_content(chunk_size)</code> 来控制每个 chunk 的大小, 然后在文件中写入这个 chunk 大小的数据.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(IMAGE_URL, stream=<span class="literal">True</span>)    <span class="comment"># stream loading</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./img/image3.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">32</span>):</span><br><span class="line">        f.write(chunk)</span><br></pre></td></tr></tbody></table></figure><p>有了这些知识的积累, 我们就能开始做一个小的实战练习</p><h3 id="下载美国地图"><a href="#下载美国地图" class="headerlink" title="下载美国地图"></a>下载美国地图</h3><h4 id="找到图片位置"><a href="#找到图片位置" class="headerlink" title="找到图片位置"></a>找到图片位置</h4><p>说白了, 每次的爬虫, 都是先分析一下这个网页要找的东西的位置, 然后怎么索引上这个位置, 最后用 python 找到它. 这次也是这个逻辑. 我们看看今天要爬的这个图片<a href="https://i.natgeofe.com/n/fb700cc3-3cdb-48cc-a2bd-1ba9ed6a2c72/NGM-10439-1080x805.jpg?w=960" target="_blank" rel="noopener">网址</a>. 定位到最新图片的位置,</p><p>找到这张图片的所在位置, 对比这类型的图片, 找到一种手段来筛选这些图片. 而图片地址都是在 <code>&lt;img&gt;</code> 中.现在我们有了思路, 先找带有 <code>Image__Wrapper Image__Wrapper--relative</code> 的这种 <code>&lt;div&gt;</code>, 然后在 <code>&lt;div&gt;</code> 里面找 <code>&lt;img&gt;</code>.</p><h4 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">"https://www.nationalgeographic.com/travel/article/ethical-souvenirs-crafts-shop-australia-india/"</span></span><br></pre></td></tr></tbody></table></figure><p>用 BeautifulSoup 找到带有 <code>Image__Wrapper Image__Wrapper--relative</code> 的这种 <code>&lt;div&gt;</code>,</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html = requests.get(URL).text</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">img_ul = soup.find_all(<span class="string">'div'</span>, {<span class="string">"class"</span>: <span class="string">"Image__Wrapper Image__Wrapper--relative"</span>})</span><br></pre></td></tr></tbody></table></figure><p>从 div中找到所有的 <code>&lt;img&gt;</code>, 然后提取 <code>&lt;img&gt;</code> 的 <code>src</code> 属性, 里面的就是图片的网址啦. 接着, 就用之前在 requests 下载里提到的一段段下载.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> img_ul:</span><br><span class="line">    imgs = ul.find_all(<span class="string">'img'</span>)</span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">        url = img[<span class="string">'src'</span>]</span><br><span class="line">        r = requests.get(url, stream=<span class="literal">True</span>)</span><br><span class="line">        image_name = url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'./img/%s'</span> % image_name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">128</span>):</span><br><span class="line">                f.write(chunk)</span><br><span class="line">        print(<span class="string">'Saved %s'</span> % image_name)</span><br></pre></td></tr></tbody></table></figure><p>如果你只是偶尔爬一爬网页, 学到目前为止, 你已经入门了, 但是如果你想要继续深入, 你开始对爬虫的效率担忧, 觉得自己爬得太慢, 想要大规模爬取网页, 那么接下来的内容就再适合你不过了. 接下来我们就会提到爬虫的提效方法. 而且现在我们爬取的都是静态网页 , 如果你遇到 JavaScript 很多的动态加载网页 (淘宝等), 就需要selenium .</p><h3 id="加速爬虫：多进程分布式"><a href="#加速爬虫：多进程分布式" class="headerlink" title="加速爬虫：多进程分布式"></a>加速爬虫：多进程分布式</h3><h4 id="什么是分布式爬虫"><a href="#什么是分布式爬虫" class="headerlink" title="什么是分布式爬虫"></a>什么是分布式爬虫</h4><p>分布式爬虫主要是为了非常有效率的抓取网页, 我们的程序一般是单线程跑的, 指令也是一条条处理的, 每执行完一条指令才能跳到下一条. 那么在爬虫的世界里, 这里存在着一个问题.</p><p>如果你已经顺利地执行过了前几节的爬虫代码, 你会发现, 有时候代码运行的时间大部分都花在了下载网页上. 有时候不到一秒能下载好一张网页的 HTML, 有时候却要几十秒. 而且非要等到 HTML 下载好了以后, 才能执行网页分析等步骤. 这非常浪费时间.</p><p>如果我们能合理利用计算资源, 在下载一部分网页的时候就已经开始分析另一部分网页了. 这将会大大节省整个程序的运行时间. 又或者, 我们能同时下载多个网页, 同时分析多个网页, 这样就有种事倍功半的效用. 分布式爬虫的体系有很多种, 处理优化的问题也是多样的. 这里有<a href="http://bittiger.blogspot.com.au/2016/02/blog-post_3.html" target="_blank" rel="noopener">一篇博客</a>可以当做扩展阅读, 来了解当今比较流行的分布式爬虫框架.</p><h4 id="我们的分布式爬虫"><a href="#我们的分布式爬虫" class="headerlink" title="我们的分布式爬虫"></a>我们的分布式爬虫</h4><p>而今天我们想搭建的这一个爬虫, 就是同时下载, 同时分析的这一种类型的分布式爬虫. 虽然算不上特别优化的框架, 但是概念理解起来比较容易. 我有尝试过徒手写高级一点的分布式爬虫, 但是写起来非常麻烦. 我琢磨了一下, 打算给大家介绍的这种分布式爬虫代码也较好写, 而且效率比普通爬虫快了3.5倍. </p><p>主要来说, 我们最开始有一个网页, 然后首页中有很多 url, 我们使用多进程 同时开始下载这些 url, 得到这些 url 的 HTML 以后, 同时开始解析 (比如 BeautifulSoup) 网页内容. 在网页中寻找这个网站还没有爬过的链接. 最终爬完整个 网站所有页面.</p><p>有了这种思路, 我们就可以开始写代码了. 你可以在<a href="https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/4-1-distributed-scraping.ipynb" target="_blank" rel="noopener">我的 Github</a> 一次性观看全部代码.</p><p>首先 import 全部要用的模块, 并规定一个主页. </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen, urljoin</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># base_url = "http://127.0.0.1:4000/"</span></span><br><span class="line">base_url = <span class="string">'https://xxx.com/'</span></span><br></pre></td></tr></tbody></table></figure><p>我们定义两个功能, 一个是用来爬取网页的(crawl), 一个是解析网页的(parse). 有了前几节内容的铺垫, 你应该能一言看懂下面的代码. <code>crawl()</code> 用 urlopen 来打开网页, 我用的内网测试, 所以为了体现下载网页的延迟, 添加了一个 <code>time.sleep(0.1)</code> 的下载延迟. 返回原始的 HTML 页面, <code>parse()</code> 就是在这个 HTML 页面中找到需要的信息, 我们用 BeautifulSoup 返回找到的信息.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = urlopen(url)</span><br><span class="line">    <span class="comment"># time.sleep(0.1)             # slightly delay for downloading</span></span><br><span class="line">    <span class="keyword">return</span> response.read().decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">    urls = soup.find_all(<span class="string">'a'</span>, {<span class="string">"href"</span>: re.compile(<span class="string">'^/.+?/$'</span>)})</span><br><span class="line">    title = soup.find(<span class="string">'h1'</span>).get_text().strip()</span><br><span class="line">    page_urls = set([urljoin(base_url, url[<span class="string">'href'</span>]) <span class="keyword">for</span> url <span class="keyword">in</span> urls])   <span class="comment"># 去重</span></span><br><span class="line">    url = soup.find(<span class="string">'meta'</span>, {<span class="string">'property'</span>: <span class="string">"og:url"</span>})[<span class="string">'content'</span>]</span><br><span class="line">    <span class="keyword">return</span> title, page_urls, url</span><br></pre></td></tr></tbody></table></figure><p>网页中爬取中, 肯定会爬到重复的网址, 为了去除掉这些重复, 我们使用 python 的 set 功能. 定义两个 set, 用来搜集爬过的网页和没爬过的.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unseen = set([base_url,])</span><br><span class="line">seen = set()</span><br></pre></td></tr></tbody></table></figure><h4 id="测试普通爬法"><a href="#测试普通爬法" class="headerlink" title="测试普通爬法"></a>测试普通爬法</h4><p>为了对比效果, 我们将在下面对比普通的爬虫和这种分布式的效果. 如果是普通爬虫, 我简化了一下接下来的代码, 将一些不影响的代码去除掉了. 我们用循环一个个 <code>crawl</code> <code>unseen</code> 里面的 url, 爬出来的 HTML 放到 <code>parse</code> 里面去分析得到结果. 接着就是更新 <code>seen</code> 和 <code>unseen</code> 这两个集合了.</p><p><strong>特别注意: 任何网站都是有一个服务器压力的, 如果你爬的过于频繁, 特别是使用多进程爬取或异步爬取, 一次性提交请求给服务器太多次, 这将可能会使得服务器瘫痪, 所以为了安全起见, 我限制了爬取数量(restricted_crawl=True).</strong> 因为我测试使用的是内网 <a href="http://127.0.0.1:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000/</a> 所以不会有这种压力. 你在以后的爬网页中, 会经常遇到这样的爬取次数的限制 (甚至被封号). 我以前爬 github 时就被限制成一小时只能爬60页.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DON'T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN</span></span><br><span class="line"><span class="keyword">if</span> base_url != <span class="string">"http://127.0.0.1:4000/"</span>:</span><br><span class="line">    restricted_crawl = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    restricted_crawl = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(unseen) != <span class="number">0</span>:                 <span class="comment"># still get some url to visit</span></span><br><span class="line">    <span class="keyword">if</span> restricted_crawl <span class="keyword">and</span> len(seen) &gt;= <span class="number">20</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    htmls = [crawl(url) <span class="keyword">for</span> url <span class="keyword">in</span> unseen]</span><br><span class="line">    results = [parse(html) <span class="keyword">for</span> html <span class="keyword">in</span> htmls]</span><br><span class="line"></span><br><span class="line">    seen.update(unseen)         <span class="comment"># seen the crawled</span></span><br><span class="line">    unseen.clear()              <span class="comment"># nothing unseen</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> title, page_urls, url <span class="keyword">in</span> results:</span><br><span class="line">        unseen.update(page_urls - seen)     <span class="comment"># get new url to crawl</span></span><br></pre></td></tr></tbody></table></figure><p>使用这种单线程的方法, 在我的内网上面爬, 爬完整个 网站, 一共消耗 <strong>52.3秒</strong>. 接着我们把它改成多进程分布式.</p><h4 id="测试分布式爬法"><a href="#测试分布式爬法" class="headerlink" title="测试分布式爬法"></a>测试分布式爬法</h4><p>还是上一个 <code>while</code> 循环, 首先我们创建一个进程池(Pool).. 然后我们修改得到 <code>htmls</code> 和 <code>results</code> 的两句代码. 其他都不变, 只将这两个功能给并行了. 我在这里写的都是简化代码, </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pool = mp.Pool(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">while</span> len(unseen) != <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># htmls = [crawl(url) for url in unseen]</span></span><br><span class="line">    <span class="comment"># ---&gt;</span></span><br><span class="line">    crawl_jobs = [pool.apply_async(crawl, args=(url,)) <span class="keyword">for</span> url <span class="keyword">in</span> unseen]</span><br><span class="line">    htmls = [j.get() <span class="keyword">for</span> j <span class="keyword">in</span> crawl_jobs]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># results = [parse(html) for html in htmls]</span></span><br><span class="line">    <span class="comment"># ---&gt;</span></span><br><span class="line">    parse_jobs = [pool.apply_async(parse, args=(html,)) <span class="keyword">for</span> html <span class="keyword">in</span> htmls]</span><br><span class="line">    results = [j.get() <span class="keyword">for</span> j <span class="keyword">in</span> parse_jobs]</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></tbody></table></figure><p>还是在内网测试, 只用了 <strong>16.3秒</strong>!! 这可比上面的单线程爬虫快了3.5倍. 而且我还不是在外网测试的. 如果在外网, 爬取一张网页的时间更长, 使用多进程会更加有效率, 节省的时间更多.</p><p>看到这里, 一定觉得多线程是爬虫的救星. 其实不然</p><p><strong>代码全</strong>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="加速爬虫：异步加载"><a href="#加速爬虫：异步加载" class="headerlink" title="加速爬虫：异步加载"></a>加速爬虫：异步加载</h3><p>Python 还提供了一个有力的工具, 叫做 <a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="noopener">asyncio</a>. 这是一个仅仅使用单线程, 就能达到多线程/进程的效果的工具. 它的原理, 简单说就是: <strong>在单线程里使用异步计算, 下载网页的时候和处理网页的时候是不连续的, 更有效利用了等待下载的这段时间.</strong></p><p>传统的单线程下载处理网页可能就像此图(<a href="https://www.nginx.com/blog/thread-pools-boost-performance-9x/" target="_blank" rel="noopener">来源</a>)左边蓝色那样, 计算机执行一些代码, 然后等待下载网页, 下好以后, 再执行一些代码… 或者在等待的时候, 用另外一个线程执行其他的代码, 这是多线程的手段. 那么 asyncio 就像右边, 只使用一个线程, 但是将这些等待时间统统掐掉, 下载应该都调到了后台, 这个时间里, 执行其他异步的功能, 下载好了之后, 再调回来接着往下执行.</p><p>今天就来尝试使用 asyncio 来替换掉 multiprocessing 或者 threading, 看看效果如何.</p><h4 id="Asyncio-库"><a href="#Asyncio-库" class="headerlink" title="Asyncio 库"></a>Asyncio 库</h4><p><a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="noopener">Asyncio</a> 库是 Python 的原装库, 但是是在 Python 3 的时候提出来的, Python 2 和 Python 3.3- 是没有的. 而且 Python 3.5 之后, 和 Python 3.4 前在语法上还是有些不同, 比如 await 和 yield 的使用, 下面的教程都是基于 Python 3.5+, 使用 Python3.4 的可能会执行有点问题. 调整一下就好.</p><p>在 3.5+ 版本中, asyncio 有两样语法非常重要, <code>async</code>, <code>await</code>. 弄懂了它们是如何协同工作的, 我们就完全能发挥出这个库的功能了. 剧透一下, 等会使用单线程爬网页的 asyncio 和之前多进程写的爬网页效果差不多, 而且当并行的进程数少的时候, asyncio 效果还会比多进程快.</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>接着我们来举例介绍 asyncio, 像之前画的图那样, 我们要时刻记住, asyncio 不是多进程, 也不是多线程, 单单是一个线程, 但是是在 Python 的功能间切换着执行. 切换的点用 <code>await</code> 来标记, 能够异步的功能用 <code>async</code> 标记, 比如 <code>async def function():</code>. 首先我们看一下, 不使用 <code>async</code> 完成的一份代码, 然后我们将这份代码改成 <code>async</code> 版的. </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不是异步的</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(t)</span>:</span></span><br><span class="line">    print(<span class="string">'Start job '</span>, t)</span><br><span class="line">    time.sleep(t)               <span class="comment"># wait for "t" seconds</span></span><br><span class="line">    print(<span class="string">'Job '</span>, t, <span class="string">' takes '</span>, t, <span class="string">' s'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    [job(t) <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = time.time()</span><br><span class="line">main()</span><br><span class="line">print(<span class="string">"NO async total time : "</span>, time.time() - t1)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Start job  1</span></span><br><span class="line"><span class="string">Job  1  takes  1  s</span></span><br><span class="line"><span class="string">Start job  2</span></span><br><span class="line"><span class="string">Job  2  takes  2  s</span></span><br><span class="line"><span class="string">NO async total time :  3.008603096008301</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><p>从上面可以看出, 我们的 job 是按顺序执行的, 必须执行完 <code>job 1</code> 才能开始执行 <code>job 2</code>, 而且 <code>job 1</code> 需要1秒的执行时间, 而 <code>job 2</code> 需要2秒. 所以总时间是 <strong>3 秒多</strong>. 而如果我们使用 asyncio 的形式, <code>job 1</code> 在等待 <code>time.sleep(t)</code> 结束的时候, 比如是等待一个网页的下载成功, 在这个地方是可以切换给 <code>job 2</code>, 让它开始执行.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(t)</span>:</span>                   <span class="comment"># async 形式的功能</span></span><br><span class="line">    print(<span class="string">'Start job '</span>, t)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(t)          <span class="comment"># 等待 "t" 秒, 期间切换其他任务</span></span><br><span class="line">    print(<span class="string">'Job '</span>, t, <span class="string">' takes '</span>, t, <span class="string">' s'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span>                       <span class="comment"># async 形式的功能</span></span><br><span class="line">    tasks = [</span><br><span class="line">    loop.create_task(job(t)) <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    ]                                       <span class="comment"># 创建任务, 但是不执行</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)               <span class="comment"># 执行并等待所有任务完成</span></span><br><span class="line"></span><br><span class="line">t1 = time.time()</span><br><span class="line">loop = asyncio.get_event_loop()             <span class="comment"># 建立 loop</span></span><br><span class="line">loop.run_until_complete(main(loop))         <span class="comment"># 执行 loop</span></span><br><span class="line">loop.close()                                <span class="comment"># 关闭 loop</span></span><br><span class="line">print(<span class="string">"Async total time : "</span>, time.time() - t1)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Start job  1</span></span><br><span class="line"><span class="string">Start job  2</span></span><br><span class="line"><span class="string">Job  1  takes  1  s</span></span><br><span class="line"><span class="string">Job  2  takes  2  s</span></span><br><span class="line"><span class="string">Async total time :  2.001495838165283</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><p>从结果可以看出, 我们没有等待 <code>job 1</code> 的结束才开始 <code>job 2</code>, 而是 <code>job 1</code> 触发了 <code>await</code> 的时候就切换到了 <code>job 2</code> 了. 这时, <code>job 1</code> 和 <code>job 2</code> 同时在等待 <code>await asyncio.sleep(t)</code>, 所以最终的程序完成时间, 取决于等待最长的 <code>t</code>, 也就是 <strong>2秒</strong>. 这和上面用普通形式的代码相比(3秒), 的确快了很多.</p><h4 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h4><p>有了对 asyncio 的基本了解, 我们就来看怎么把它用在爬虫. 这个功能对于爬虫非常的理想, 原因很简单, 我们在等待一个网页下载的时候, 完全可以切换到其它代码, 事半功倍. 但是 asycio 自己还是没办法完成这项任务的, 我们还需要安装另一个牛逼的模块将 <code>requests</code> 模块代替成一个异步的 <code>requests</code>, 这个牛逼的模块叫作 <code>aiohttp</code> (<a href="https://aiohttp.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">官网在这</a>). 下载安装特别简单. 直接在你的 terminal 或者 cmd 里面输入 pip3 install aiohttp.</p><p>接着我们来看看我们怎么用最一般的 requests 模块爬网页, 和我们怎么将 requests 替换成 aiohttp.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">'https://xxx.com/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normal</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        r = requests.get(URL)</span><br><span class="line">        url = r.url</span><br><span class="line">        print(url)</span><br><span class="line"></span><br><span class="line">t1 = time.time()</span><br><span class="line">normal()</span><br><span class="line">print(<span class="string">"Normal total time:"</span>, time.time()-t1)</span><br></pre></td></tr></tbody></table></figure><p>然后我们在用 <a href="https://aiohttp.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">aiohttp</a> 来实现一样的功能</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(session)</span>:</span></span><br><span class="line">    response = <span class="keyword">await</span> session.get(URL)       <span class="comment"># 等待并切换</span></span><br><span class="line">    <span class="keyword">return</span> str(response.url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:      <span class="comment"># 官网推荐建立 Session 的形式</span></span><br><span class="line">        tasks = [loop.create_task(job(session)) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span>)]</span><br><span class="line">        finished, unfinished = <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line">        all_results = [r.result() <span class="keyword">for</span> r <span class="keyword">in</span> finished]    <span class="comment"># 获取所有结果</span></span><br><span class="line">        print(all_results)</span><br><span class="line"></span><br><span class="line">t1 = time.time()</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main(loop))</span><br><span class="line">loop.close()</span><br><span class="line">print(<span class="string">"Async total time:"</span>, time.time() - t1)</span><br></pre></td></tr></tbody></table></figure><p>我们刚刚创建了一个 Session, 这是官网推荐的方式, 但是我觉得也可以直接用 request 形式, 细节请参考<a href="https://aiohttp.readthedocs.io/en/stable/client.html#make-a-request" target="_blank" rel="noopener">官方说明</a>. 如果要获取网页返回的结果, 我们可以在 <code>job()</code> 中 return 个结果出来, 然后再在 <code>finished, unfinished = await asyncio.wait(tasks)</code> 收集完成的结果, 这里它会返回完成的和没完成的, 我们关心的都是完成的, 而且 <code>await</code> 也确实是等待都完成了才返回. 真正的结果被存放在了 <code>result()</code> 里面.</p><h4 id="和多进程分布式爬虫对比"><a href="#和多进程分布式爬虫对比" class="headerlink" title="和多进程分布式爬虫对比"></a>和多进程分布式爬虫对比</h4><p>有了这些基础, 我们就可以来玩点高级的了, 之前我们用 multiprocessing 写过了一个简单的分布式爬虫, 现在我们就来拿过来 PK 一下 asyncio 的方法. 首先我们对比一下这次写的结构和上次写的简单分布式爬虫的区别. 分布式我们完全依赖的是 multiprocessing 这个模块. 使用 python 强大的并行处理运算来下载我们要处理的 urls, 然后解析网页也是一件耗时的事, 特别是网页量多的时候. 所以我们也将网页解析给并行了. 这样大大节省了下载和运算时间. 再看右边的这个 asyncio 的例子, 我们解析网页还是用的和 multiprocessing 那边一样的并行处理, 因为 asyncio 好像不支持解析网页的异步, 毕竟是计算密集型工序. 然后不一样的地方是, 我们在下载网页时, 不用 multiprocessing, 改用 asyncio, 用一个单线程的东西挑战多进程.</p><p>我们发现, 如果 <code>Pool(n)</code> 里面的这个 n 越大, 多进程才能越快, 但是 asyncio 却不会特别受进程数的影响. 一个单线程的东西居然战胜了多进程. 可见异步 asyncio 下载网页的重要性.</p><p>上面介绍的还只是 asyncio 的一小部分功能, 如果想了解更多有关于 asyncio 的使用方法, 请看到 Python 的<a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="noopener">官方介绍</a>.</p><h3 id="高级爬虫：让-Selenium-控制你的浏览器帮你爬"><a href="#高级爬虫：让-Selenium-控制你的浏览器帮你爬" class="headerlink" title="高级爬虫：让 Selenium 控制你的浏览器帮你爬"></a>高级爬虫：<strong>让 Selenium 控制你的浏览器帮你爬</strong></h3><blockquote><p>Selenium 是为了测试而出生的. 但是没想到到了爬虫的年代, 它摇身一变, 变成了爬虫的好工具. 让我试着用一句话来概括 Seleninm: <strong>它能控制你的浏览器, 有模有样地学人类看网页</strong>.</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>因为 Selenium 需要操控你的浏览器, 所以安装起来比传统的 Python 模块要多几步. 先在 terminal 或者 cmd 用 pip 安装 selenium.</p><p>要操控浏览器, 你就要有浏览器的 driver. Selenium 针对几个主流的浏览器都有 driver. <strong>针对 Linux 和 MacOS</strong>.</p><ul><li>Chrome <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="noopener">driver</a>, 如果前面链接无法打开, 请尝试<a href="https://npm.taobao.org/mirrors/chromedriver" target="_blank" rel="noopener">这个</a>, 并下载对应版本的 driver</li><li>Edge <a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/" target="_blank" rel="noopener">driver</a></li><li>Firefox <a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="noopener">driver</a></li><li>Safari <a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/" target="_blank" rel="noopener">driver</a></li></ul><p>Linux 和 MacOS 用户下载好之后, 请将下载好的geckodriver文件放在你的计算机的 /usr/bin 或 /usr/local/bin 目录. 并赋予执行权限, 不会放的, 请使用这条语句.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp 你的geckodriver位置 /usr/local/bin</span><br><span class="line">sudo chmod +x /usr/local/bin/geckodriver</span><br></pre></td></tr></tbody></table></figure><p>对于 Windows 用户, 官网上的<a href="http://selenium-python.readthedocs.io/installation.html#detailed-instructions-for-windows-users" target="_blank" rel="noopener">说法</a>, 好像没有提到要具体怎么操作, 我想, 应该是把 geckodriver 这个文件的位置加在 Windows 的环境变量中(PATH).</p><p>如果你安装有任何的问题, 请在它们的<a href="http://selenium-python.readthedocs.io/installation.html" target="_blank" rel="noopener">官网</a>上查询解决方案.</p><h4 id="偷懒的火狐浏览器插件"><a href="#偷懒的火狐浏览器插件" class="headerlink" title="偷懒的火狐浏览器插件"></a>偷懒的火狐浏览器插件</h4><p>在这教你用<a href="https://www.mozilla.org/en-US/firefox/new/" target="_blank" rel="noopener">火狐浏览器</a>偷懒的一招, 因为暂时只有火狐上有这个插件. 插件 Katalon Recorder 下载的网址<a href="https://addons.mozilla.org/en-US/firefox/addon/katalon-automation-record/" target="_blank" rel="noopener">在这</a></p><p>这个插件能让你记录你使用浏览器的操作. 我以前玩网游, 为了偷懒, 用过一个叫按键精灵的东西, 帮我做了很多重复性的工作, 拯救了我的鼠标和键盘, 当然还有我的手指! 看着别人一直在点鼠标, 我心中暗爽~ 这个 Katalon Recorder 插件 + Selenium 就和按键精灵是一个意思. 记录你的操作, 然后你可以让电脑重复上千遍.</p><p>安装好火狐上的这个插件后, 打开它.</p><p>找到插件上的 record, 点它. 然后用火狐登录上 某个网站, 开始你的各种点击工作,</p><p>每当你点击的时候, 插件就会记录下你这些点击, 形成一些log. 最后神奇的事情将要发生. 你可以点击 Export 按钮, 观看到帮你生成的浏览记录代码!</p><p>虽然这个代码输出只有 Python2 版本的, 不过不影响. 我们直接将这些圈起来的代码复制. 这将会是 python 帮你执行的行为代码.</p><h4 id="Python-控制浏览器"><a href="#Python-控制浏览器" class="headerlink" title="Python 控制浏览器"></a>Python 控制浏览器</h4><p>好了, 有了这些代码, 我们就能回到 Python. 开始写 Python 的代码了. 这里十分简单! 我将 selenium 绑定到 Chrome 上 <code>webdriver.Chrome()</code>. 你可以绑其它的浏览器.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()     <span class="comment"># 打开 Chrome 浏览器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将刚刚复制的帖在这</span></span><br><span class="line">driver.get(<span class="string">"https://xxx.com/"</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">u"//img[@alt='强化学习 (Reinforcement Learning)']"</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">"About"</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">u"赞助"</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">u"教程 ▾"</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">u"数据处理 ▾"</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">u"网页爬虫"</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到网页 html, 还能截图</span></span><br><span class="line">html = driver.page_source       <span class="comment"># get html</span></span><br><span class="line">driver.get_screenshot_as_file(<span class="string">"./img/sreenshot1.png"</span>)</span><br><span class="line">driver.close()</span><br></pre></td></tr></tbody></table></figure><p>我们能得到页面的 html code (<code>driver.page_source</code>), 就能基于这个 code 来爬取数据了. </p><p>不过每次都要看着浏览器执行这些操作, 有时候有点不方便. 我们可以让 selenium 不弹出浏览器窗口, 让它安静地执行操作. 在创建 <code>driver</code> 之前定义几个参数就能摆脱浏览器的身体了.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">"--headless"</span>)       <span class="comment"># define headless</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>Selenium 能做的事还有很多, 比如填 Form 表单, 超控键盘等等. 这个教程不会细说了, 只是个入门, 如果你还想继续深入了解, 欢迎点进去<a href="http://selenium-python.readthedocs.io/" target="_blank" rel="noopener">他们的 Python 教学官网</a>.</p><p>最后, Selenium 的优点我们都看出来了, 可以很方便的帮你模拟你的操作, 添加其它操作也是非常容易的, 但是也是有缺点的, 不是任何时候 selenium 都很好. 因为要打开浏览器, 加载更多东西, 它的执行速度肯定没有其它模块快. 所以如果你需要速度, 能不用 Selenium, 就不用吧.</p><h4 id="高级爬虫-高效无忧的-Scrapy-爬虫库"><a href="#高级爬虫-高效无忧的-Scrapy-爬虫库" class="headerlink" title="高级爬虫: 高效无忧的 Scrapy 爬虫库"></a><strong>高级爬虫: 高效无忧的 Scrapy 爬虫库</strong></h4><blockquote><p> 如果你想更高效的开发, 爬取网页, 记录数据库, Scrapy 是值得一推的. 它是一个爬虫的框架, 而不是一个简单的爬虫. 它整合了爬取, 处理数据, 存储数据的一条龙服务. 如果你只需要偶尔的一两次爬爬网页, 前面的教程已经够了, 如果你需要每天靠爬虫吃饭, Scrapy 还是有必要了解的</p><p>这里你写出一个 Scrapy 形式的爬虫, 带你入门 Scrapy, 但是 Scrapy 不仅仅只有爬虫, 你需要学习更多. 那学习 Scrapy 的地方, 当然是他们<a href="https://docs.scrapy.org/en/latest/" target="_blank" rel="noopener">自家网站</a>咯.</p></blockquote><h4 id="Scrapy-的优势"><a href="#Scrapy-的优势" class="headerlink" title="Scrapy 的优势"></a>Scrapy 的优势</h4><p>Scrapy 是一个整合了的爬虫框架, 有着非常健全的管理系统. 而且它也是分布式爬虫, 但是比我们之前写的那个分布式爬虫高级多了. 这里是 Scrapy 的框架示意图(<a href="https://docs.scrapy.org/en/latest/topics/architecture.html#topics-architecture" target="_blank" rel="noopener">图源</a>). 它的管理体系非常复杂. 但是特别高效. 让你又刷网页, 又下载, 同时能处理数据. 简直千手观音呀.</p><p>而且做 Scrapy 的项目, 绝对不是只需要写一个脚本就能解决的. 为了把你带入门, 这次我们只写一个脚本, 只涉及里面的爬虫(spider)部分. 其他的部分你可以在这里深入学习.</p><ul><li>官网教程 <a href="https://docs.scrapy.org/en/latest/" target="_blank" rel="noopener">英文</a>, <a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/" target="_blank" rel="noopener">中文</a></li><li>JasonDing 的<a href="https://www.jianshu.com/p/a8aad3bf4dc4" target="_blank" rel="noopener">学习Scrapy入门</a></li><li>young-hz 的<a href="http://blog.csdn.net/u012150179/article/details/32343635" target="_blank" rel="noopener">Scrapy研究探索系列</a></li></ul><h4 id="Scrapy-爬虫"><a href="#Scrapy-爬虫" class="headerlink" title="Scrapy 爬虫"></a>Scrapy 爬虫</h4><p>首先你得安装 Scrapy. 在 terminal 或者 cmd 使用 pip 安装就好.</p><p>如果安装遇到任何问题, 它们家的<a href="https://docs.scrapy.org/en/latest/intro/install.html" target="_blank" rel="noopener">网站</a>是个好去处.</p><p>我们导入 scrapy 模块, 并创建一个 spider 的 class. 并继承 <code>scrapy.Spider</code>, 一定还要给这个 spider 一个名字, 我就用 <code>mofan</code> 好了, 因为是爬 莫烦Python 的. 给定一些初始爬取的网页, 写在 <code>start_urls</code> 里. 这里特别要提的是: <strong>之前我们用 python 的 set 来去除重复的 url, 在 scrapy 中, 这是不需要的, 因为它自动帮你去重</strong>. </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MofanSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"mofan"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'https://xxx.com/'</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># unseen = set()</span></span><br><span class="line">    <span class="comment"># seen = set()      # 我们不在需要 set 了, 它自动去重</span></span><br></pre></td></tr></tbody></table></figure><p>接着我们还要定义这个 class 中的一个功能就能完事了. 我们使用 python 的 <code>yield</code> 来返回搜集到的数据 (为什么是yield? 因为在 scrapy 中也有异步处理, 加速整体效率). 这些 title 和 url 的数据, 我们都是用 scrapy 中<a href="https://docs.scrapy.org/en/latest/intro/tutorial.html#extracting-data" target="_blank" rel="noopener">抓取信息的方式</a>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MofanSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> {     <span class="comment"># return some results</span></span><br><span class="line">            <span class="string">'title'</span>: response.css(<span class="string">'h1::text'</span>).extract_first(default=<span class="string">'Missing'</span>).strip().replace(<span class="string">'"'</span>, <span class="string">""</span>),</span><br><span class="line">            <span class="string">'url'</span>: response.url,</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        urls = response.css(<span class="string">'a::attr(href)'</span>).re(<span class="string">r'^/.+?/$'</span>)     <span class="comment"># find all sub urls</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="keyword">yield</span> response.follow(url, callback=self.parse)     <span class="comment"># it will filter duplication automatically</span></span><br></pre></td></tr></tbody></table></figure><p>然后在这个response网页中筛选 <code>urls</code>, 这里我们也不需要使用 <code>urljoin()</code> 这种功能给 url 改变形式. 它在 <code>follow()</code> 这一步会自动检测 url 的格式. (真是省心啊<del>), 然后对于每个找到的 url, 然后 yield 重新使用 <code>self.parse()</code> 来爬取, 这里又是自动去重! Scrapy 仿佛知道你最不想做什么, 它自动帮你都做好了. 开心</del></p><p>最后需要运行的时候有点不同, 你需要在 terminal 或 cmd 中运行这个爬虫. 而且还能帮你保存刚刚 yield 的 <code>{title:, url:}</code> 的结果. <code>runspider 5-2-scrapy.py</code> 就是选择你要跑的这个 Python 文件.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy runspider 5-2-scrapy.py -o res.json</span><br></pre></td></tr></tbody></table></figure><p><code>-o res.json</code> 这个 <code>-o</code> 就是输出的指令, 你可以在那个文件夹中找到一个名字叫 <code>res.json</code> 的文件, 里面存有所有找到的 <code>{title:, url:}</code>.</p><p>其实我们只做了 scrapy 中的爬虫, 一个正常的 scrapy 项目还包括有很多其他的内容(见下面). 这个教程就不会细说了, 因为学好 scrapy 还是比较麻烦的. 你可以在上面推荐给你的链接中, 继续深入学习 scrapy.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从网页的基本结构开始讲述, 慢慢使用一些简单的工具, 做一些简单的爬虫. 还会有一些小练习, 让你爬爬真正的互联网. 下载美图, 逛逛百度百科, 全网爬取等等. 当你懂得了爬虫的概念, 我们在深入一些, 谈谈如何加速你那和蠕虫(爬的慢)一样的爬虫, 把它升级为一只小飞虫(多进程,异步爬取). 当然这些内容都不会特别深入, 重点是把你带入门&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据挖掘" scheme="https://liudufu.github.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="https://liudufu.github.io/tags/python/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>re正则入门</title>
    <link href="https://liudufu.github.io/Introduction_to_RE_Regularization/"/>
    <id>https://liudufu.github.io/Introduction_to_RE_Regularization/</id>
    <published>2023-08-26T07:18:22.000Z</published>
    <updated>2023-08-26T07:23:07.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>正则表达式 (Regular Expression) 又称 RegEx, 是用来匹配字符的一种工具. 在一大串字符中寻找你需要的内容. 它常被用在很多方面, 比如网页爬虫, 文稿整理, 数据筛选等等</p></blockquote><a id="more"></a><h2 id="🌸re正则入门"><a href="#🌸re正则入门" class="headerlink" title="🌸re正则入门"></a>🌸re正则入门</h2><blockquote><p>正则表达式 (Regular Expression) 又称 RegEx, 是用来匹配字符的一种工具. 在一大串字符中寻找你需要的内容. 它常被用在很多方面, 比如网页爬虫, 文稿整理, 数据筛选等等</p></blockquote><h3 id="简单的匹配"><a href="#简单的匹配" class="headerlink" title="简单的匹配"></a>简单的匹配</h3><p>正则表达式无非就是在做这么一回事. 在文字中找到特定的内容, 比如下面的内容. 我们在 dog runs to cat 这句话中寻找是否存在 cat 或者 bird.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># matching string</span></span><br><span class="line">pattern1 = <span class="string">"cat"</span></span><br><span class="line">pattern2 = <span class="string">"bird"</span></span><br><span class="line">string = <span class="string">"dog runs to cat"</span></span><br><span class="line">print(pattern1 <span class="keyword">in</span> string)    <span class="comment"># True</span></span><br><span class="line">print(pattern2 <span class="keyword">in</span> string)    <span class="comment"># False</span></span><br></pre></td></tr></tbody></table></figure><p>但是正则表达式绝非不止这样简单的匹配, 它还能做更加高级的内容. 要使用正则表达式, 首先需要调用一个 python 的内置模块 <code>re</code>. 然后我们重复上面的步骤, 不过这次使用正则. 可以看出, 如果 <code>re.search()</code> 找到了结果, 它会返回一个 match 的 object. 如果没有匹配到, 它会返回 None. 这个 <code>re.search()</code> 只是 <code>re</code> 中的一个功能, 之后会介绍其它的功能.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># regular expression</span></span><br><span class="line">pattern1 = <span class="string">"cat"</span></span><br><span class="line">pattern2 = <span class="string">"bird"</span></span><br><span class="line">string = <span class="string">"dog runs to cat"</span></span><br><span class="line">print(re.search(pattern1, string))  <span class="comment"># &lt; match='cat'&gt;</span></span><br><span class="line">print(re.search(pattern2, string))  <span class="comment"># None</span></span><br></pre></td></tr></tbody></table></figure><h3 id="灵活匹配"><a href="#灵活匹配" class="headerlink" title="灵活匹配"></a>灵活匹配</h3><p>除了上面的简单匹配, 下面的内容才是正则的核心内容, 使用特殊的 pattern 来灵活匹配需要找的文字.</p><p>如果需要找到潜在的多个可能性文字, 我们可以使用 <code>[]</code> 将可能的字符囊括进来. 比如 <code>[ab]</code> 就说明我想要找的字符可以是 <code>a</code> 也可以是 <code>b</code>. 这里我们还需要注意的是, 建立一个正则的规则, 我们在 pattern 的 “前面需要加上一个 <code>r</code> 用来表示这是正则表达式, 而不是普通字符串. 通过下面这种形式, 如果字符串中出现run或者是ran”, 它都能找到.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># multiple patterns ("run" or "ran")</span></span><br><span class="line">ptn = <span class="string">r"r[au]n"</span>       <span class="comment"># start with "r" means raw string</span></span><br><span class="line">print(re.search(ptn, <span class="string">"dog runs to cat"</span>))    <span class="comment"># &lt;match='run'&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>同样, 中括号 <code>[]</code> 中还可以是以下这些或者是这些的组合. 比如 <code>[A-Z]</code> 表示的就是所有大写的英文字母. <code>[0-9a-z]</code> 表示可以是数字也可以是任何小写字母.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(re.search(<span class="string">r"r[A-Z]n"</span>, <span class="string">"dog runs to cat"</span>))     <span class="comment"># None</span></span><br><span class="line">print(re.search(<span class="string">r"r[a-z]n"</span>, <span class="string">"dog runs to cat"</span>))     <span class="comment"># &lt;match='run'&gt;</span></span><br><span class="line">print(re.search(<span class="string">r"r[0-9]n"</span>, <span class="string">"dog r2ns to cat"</span>))     <span class="comment"># &lt;match='r2n'&gt;</span></span><br><span class="line">print(re.search(<span class="string">r"r[0-9a-z]n"</span>, <span class="string">"dog runs to cat"</span>))  <span class="comment"># &lt;match='run'&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="按类型匹配"><a href="#按类型匹配" class="headerlink" title="按类型匹配"></a>按类型匹配</h3><p>除了自己定义规则, 还有很多匹配的规则时提前就给你定义好了的. 下面有一些特殊的匹配类型给大家先总结一下, 然后再上一些例子.</p><ul><li>\d : 任何数字</li><li>\D : 不是数字</li><li>\s : 任何 white space, 如 [\t\n\r\f\v]</li><li>\S : 不是 white space</li><li>\w : 任何大小写字母, 数字和 _ [a-zA-Z0-9_]</li><li>\W : 不是 \w</li><li>\b : 空白字符 (<strong>只</strong>在某个字的开头或结尾)</li><li>\B : 空白字符 (<strong>不</strong>在某个字的开头或结尾)</li><li>\ : 匹配 \</li><li>. : 匹配任何字符 (除了 \n)</li><li>^ : 匹配开头</li><li>$ : 匹配结尾</li><li>? : 前面的字符可有可无</li></ul><p>下面就是具体的举例说明.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \d : decimal digit</span></span><br><span class="line">print(re.search(<span class="string">r"r\dn"</span>, <span class="string">"run r4n"</span>))           <span class="comment"># &lt;match='r4n'&gt;</span></span><br><span class="line"><span class="comment"># \D : any non-decimal digit</span></span><br><span class="line">print(re.search(<span class="string">r"r\Dn"</span>, <span class="string">"run r4n"</span>))           <span class="comment"># &lt;match='run'&gt;</span></span><br><span class="line"><span class="comment"># \s : any white space [\t\n\r\f\v]</span></span><br><span class="line">print(re.search(<span class="string">r"r\sn"</span>, <span class="string">"r\nn r4n"</span>))          <span class="comment"># &lt;match='r\nn'&gt;</span></span><br><span class="line"><span class="comment"># \S : opposite to \s, any non-white space</span></span><br><span class="line">print(re.search(<span class="string">r"r\Sn"</span>, <span class="string">"r\nn r4n"</span>))          <span class="comment"># &lt; match='r4n'&gt;</span></span><br><span class="line"><span class="comment"># \w : [a-zA-Z0-9_]</span></span><br><span class="line">print(re.search(<span class="string">r"r\wn"</span>, <span class="string">"r\nn r4n"</span>))          <span class="comment"># &lt;match='r4n'&gt;</span></span><br><span class="line"><span class="comment"># \W : opposite to \w</span></span><br><span class="line">print(re.search(<span class="string">r"r\Wn"</span>, <span class="string">"r\nn r4n"</span>))          <span class="comment"># &lt;match='r\nn'&gt;</span></span><br><span class="line"><span class="comment"># \b : empty string (only at the start or end of the word)</span></span><br><span class="line">print(re.search(<span class="string">r"\bruns\b"</span>, <span class="string">"dog runs to cat"</span>))    <span class="comment"># &lt;match='runs'&gt;</span></span><br><span class="line"><span class="comment"># \B : empty string (but not at the start or end of a word)</span></span><br><span class="line">print(re.search(<span class="string">r"\B runs \B"</span>, <span class="string">"dog   runs  to cat"</span>))  <span class="comment"># &lt;match=' runs '&gt;</span></span><br><span class="line"><span class="comment"># \\ : match \</span></span><br><span class="line">print(re.search(<span class="string">r"runs\\"</span>, <span class="string">"runs\ to me"</span>))     <span class="comment"># &lt;match='runs\\'&gt;</span></span><br><span class="line"><span class="comment"># . : match anything (except \n)</span></span><br><span class="line">print(re.search(<span class="string">r"r.n"</span>, <span class="string">"r[ns to me"</span>))         <span class="comment"># &lt;match='r[n'&gt;</span></span><br><span class="line"><span class="comment"># ^ : match line beginning</span></span><br><span class="line">print(re.search(<span class="string">r"^dog"</span>, <span class="string">"dog runs to cat"</span>))   <span class="comment"># &lt;match='dog'&gt;</span></span><br><span class="line"><span class="comment"># $ : match line ending</span></span><br><span class="line">print(re.search(<span class="string">r"cat$"</span>, <span class="string">"dog runs to cat"</span>))   <span class="comment"># &lt;match='cat'&gt;</span></span><br><span class="line"><span class="comment"># ? : may or may not occur</span></span><br><span class="line">print(re.search(<span class="string">r"Mon(day)?"</span>, <span class="string">"Monday"</span>))       <span class="comment"># &lt;match='Monday'&gt;</span></span><br><span class="line">print(re.search(<span class="string">r"Mon(day)?"</span>, <span class="string">"Mon"</span>))          <span class="comment"># &lt;match='Mon'&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果一个字符串有很多行, 我们想使用 <code>^</code> 形式来匹配行开头的字符, 如果用通常的形式是不成功的. 比如下面的 I 出现在第二行开头, 但是使用 <code>r"^I"</code> 却匹配不到第二行, 这时候, 我们要使用 另外一个参数, 让 <code>re.search()</code> 可以对每一行单独处理. 这个参数就是 <code>flags=re.M</code>, 或者这样写也行 <code>flags=re.MULTILINE</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"""</span></span><br><span class="line"><span class="string">dog runs to cat.</span></span><br><span class="line"><span class="string">I run to dog.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(re.search(<span class="string">r"^I"</span>, string))                 <span class="comment"># None</span></span><br><span class="line">print(re.search(<span class="string">r"^I"</span>, string, flags=re.M))     <span class="comment"># &lt;match='I'&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h3><p>如果我们想让某个规律被重复使用, 在正则里面也是可以实现的, 而且实现的方式还有很多. 具体可以分为这三种:</p><ul><li><code>*</code> : 重复零次或多次</li><li><code>+</code> : 重复一次或多次</li><li><code>{n, m}</code> : 重复 n 至 m 次</li><li><code>{n}</code> : 重复 n 次</li></ul><p>举例如下:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># * : occur 0 or more times</span></span><br><span class="line">print(re.search(<span class="string">r"ab*"</span>, <span class="string">"a"</span>))             <span class="comment"># &lt;match='a'&gt;</span></span><br><span class="line">print(re.search(<span class="string">r"ab*"</span>, <span class="string">"abbbbb"</span>))        <span class="comment"># &lt;match='abbbbb'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># + : occur 1 or more times</span></span><br><span class="line">print(re.search(<span class="string">r"ab+"</span>, <span class="string">"a"</span>))             <span class="comment"># None</span></span><br><span class="line">print(re.search(<span class="string">r"ab+"</span>, <span class="string">"abbbbb"</span>))        <span class="comment"># &lt;match='abbbbb'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># {n, m} : occur n to m times</span></span><br><span class="line">print(re.search(<span class="string">r"ab{2,10}"</span>, <span class="string">"a"</span>))        <span class="comment"># None</span></span><br><span class="line">print(re.search(<span class="string">r"ab{2,10}"</span>, <span class="string">"abbbbb"</span>))   <span class="comment"># &lt;match='abbbbb'&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>我们甚至可以为找到的内容分组, 使用 <code>()</code> 能轻松实现这件事. 通过分组, 我们能轻松定位所找到的内容. 比如在这个 <code>(\d+)</code> 组里, 需要找到的是一些数字, 在 <code>(.+)</code> 这个组里, 我们会找到 Date: 后面的所有内容. 当使用 <code>match.group()</code> 时, 他会返回所有组里的内容, 而如果给 <code>.group(2)</code> 里加一个数, 它就能定位你需要返回哪个组里的信息.</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match = re.search(<span class="string">r"(\d+), Date: (.+)"</span>, <span class="string">"ID: 021523, Date: Feb/12/2017"</span>)</span><br><span class="line">print(match.group())                   <span class="comment"># 021523, Date: Feb/12/2017</span></span><br><span class="line">print(match.group(<span class="number">1</span>))                  <span class="comment"># 021523</span></span><br><span class="line">print(match.group(<span class="number">2</span>))                  <span class="comment"># Date: Feb/12/2017</span></span><br></pre></td></tr></tbody></table></figure><p>有时候, 组会很多, 光用数字可能比较难找到自己想要的组, 这时候, 如果有一个名字当做索引, 会是一件很容易的事. 我们字需要在括号的开头写上这样的形式 <code>?P&lt;名字&gt;</code> 就给这个组定义了一个名字. 然后就能用这个名字找到这个组的内容.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match = re.search(<span class="string">r"(?P&lt;id&gt;\d+), Date: (?P&lt;date&gt;.+)"</span>, <span class="string">"ID: 021523, Date: Feb/12/2017"</span>)</span><br><span class="line">print(match.group(<span class="string">'id'</span>))                <span class="comment"># 021523</span></span><br><span class="line">print(match.group(<span class="string">'date'</span>))              <span class="comment"># Date: Feb/12/2017</span></span><br></pre></td></tr></tbody></table></figure><h3 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h3><p>前面我们说的都是只找到了最开始匹配上的一项而已, 如果需要找到全部的匹配项, 我们可以使用 <code>findall</code> 功能. 然后返回一个列表. 注意下面还有一个新的知识点, <code>|</code> 是 or 的意思, 要不是前者要不是后者.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># findall</span></span><br><span class="line">print(re.findall(<span class="string">r"r[ua]n"</span>, <span class="string">"run ran ren"</span>))    <span class="comment"># ['run', 'ran']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># | : or</span></span><br><span class="line">print(re.findall(<span class="string">r"(run|ran)"</span>, <span class="string">"run ran ren"</span>)) <span class="comment"># ['run', 'ran']</span></span><br></pre></td></tr></tbody></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>我们还能通过正则表达式匹配上一些形式的字符串然后再替代掉这些字符串. 使用这种匹配 <code>re.sub()</code>, 将会比 python 自带的 <code>string.replace()</code> 要灵活多变.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(re.sub(<span class="string">r"r[au]ns"</span>, <span class="string">"catches"</span>, <span class="string">"dog runs to cat"</span>))     <span class="comment"># dog catches to cat</span></span><br></pre></td></tr></tbody></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>再来我们 Python 中有个字符串的分割功能, 比如想获取一句话中所有的单词. 比如 <code>"a is b".split(" ")</code>, 这样它就会产生一个列表来保存所有单词. 但是在正则中, 这种普通的分割也可以做的淋漓精致</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(re.split(<span class="string">r"[,;\.]"</span>, <span class="string">"a;b,c.d;e"</span>))             <span class="comment"># ['a', 'b', 'c', 'd', 'e']</span></span><br></pre></td></tr></tbody></table></figure><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>最后, 我们还能使用 compile 过后的正则, 来对这个正则重复使用. 先将正则 compile 进一个变量, 比如 <code>compiled_re</code>, 然后直接使用这个 <code>compiled_re</code> 来搜索.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compiled_re = re.compile(<span class="string">r"r[ua]n"</span>)</span><br><span class="line">print(compiled_re.search(<span class="string">"dog ran to cat"</span>))  <span class="comment"># &lt; match='ran'&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="附：正则学习路径"><a href="#附：正则学习路径" class="headerlink" title="附：正则学习路径"></a>附：<a href="https://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html" target="_blank" rel="noopener">正则学习路径</a></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;正则表达式 (Regular Expression) 又称 RegEx, 是用来匹配字符的一种工具. 在一大串字符中寻找你需要的内容. 它常被用在很多方面, 比如网页爬虫, 文稿整理, 数据筛选等等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据挖掘" scheme="https://liudufu.github.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="https://liudufu.github.io/tags/python/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Easy to mix knowledge points of C language</title>
    <link href="https://liudufu.github.io/knowledge_C_language/"/>
    <id>https://liudufu.github.io/knowledge_C_language/</id>
    <published>2023-08-17T09:13:20.000Z</published>
    <updated>2023-08-17T09:18:25.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 成都信息工程大学807程序设计基础易错知识点汇总</p></blockquote><a id="more"></a><h1 id="🌸易混知识点"><a href="#🌸易混知识点" class="headerlink" title="🌸易混知识点"></a>🌸易混知识点</h1><ol><li><p>关于new delete 与malloc free 的联系与区别描述？》</p><ul><li>用malloc函数需要指定内存分配的字节数并且不能初始化对象，new 会自动调用对象的构造函数</li><li>delete 会调用对象的destructor，而free 不会调用对象的destructor</li><li>都是在堆上取得内存。</li></ul></li><li><pre><code class="c++"><span class="keyword">char</span> *p1 = <span class="string">"123"</span>, *p2 = <span class="string">"ABC"</span>, str［<span class="number">50</span>］= <span class="string">"xyz"</span>;<span class="built_in">strcpy</span>(str + <span class="number">2</span>, <span class="built_in">strcat</span>(p1, p2));<span class="built_in">cout</span> &lt;&lt; str;&lt;!--￼<span class="number">0</span>--&gt; <span class="keyword">char</span> str[<span class="number">20</span>]=<span class="string">"0123456789"</span>; <span class="keyword">int</span> a=<span class="built_in">strlen</span>(str); <span class="comment">//a=10; &gt;&gt;&gt; strlen 计算字符串的长度，以结束符 0x00 为字符串结束。 int b=sizeof(str); //而b=20; &gt;&gt;&gt; sizeof 计算的则是分配的数组 str[20] 所占的内存空间的大小，不受里面存储的内容改变。 上面是对静态数组处理的结果。</span> &lt;!--￼<span class="number">1</span>--&gt;</code></pre></li><li><p><font color="red">return 后面括号的值不一定是函数的值</font>，譬如函数返回值与return 类型不一致需要类型转换，返回值为 int ，retun 3.2 ，那么肯定会进行转换的</p></li><li><p>实型字面值常量有两种表示方式：小数形式和指数形式</p><pre><code>小数形式：由最前面的额正负号，数字0-9和小数点组成，不允许有其他符号；指数形式；包括指数和尾数两个不可缺少的部分，用符号E(e)分割；E(e)左边是尾数，为十进制整数或小数形式的实数，右边为指数，必须为十进制整数，表示乘以10的多少次方</code></pre></li><li><p>BSS（Block Started by Symbol）通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域。特点是:可读写的，在程序执行之前BSS段会自动清0。所以，未初始的全局变量在程序执行之前已经成0了。</p></li><li><p>A.单链表的每个节点都具有唯一的前驱节点和唯一的后继节点，所以当两个单链表存在相交的节点时，这两个链表则同时拥有这个节点，以及这个节点的所有后继节点，当这个公共节点是尾节点时，他们则只含有公共一个节点——-尾节点。</p><p>B.快慢指针是判断单链表是否有环的一种方法：两个指针，每次移动的步长为2叫做快指针，每次移动步长为1的指针叫做慢指针。快慢指针同时从头结点出发，当快指针率先到达NULL的时候，则说明此单链表中不存在环，当快指针追上慢指针的时候，说明此单链表中存在环。</p><p>C.<font color="red">有环的单向链表和无环的单向链表不能相交</font>，因为当相交的时候，无环的单向链表也会被迫存在一个环，只不过这个环的”起点“可能不是原来单向链表的头结点。</p><p>4.两个单向链表之间相交可以存在环。</p></li><li><p>存在这样的线性表：表中各结点都没有直接前趋和直接后继。–空表</p></li><li><p>%%d=%%和d</p><pre><code>%%在屏幕上显示为%d还是d所以是和k没有关系了~</code></pre></li><li><p>队列实现方式有链表存储和顺序表存储两种：链表存储可设计为带有尾指针的单链表，即可高效实现入队出队，无需循环链表；顺序表存储为解决存储空间浪费而设计为循环队列。 因此循环队列仅有顺序表存储结构，与循环链表毫无关系。</p></li><li><p>一个非空的数据结构如果满足以下两个条件：有且只有一个根结点；每一个结点最多有一个前件，也最多有一个后件，则称为线性结构，在数据结构中习惯称为线性表。双向链表结点具有两个指针域，属于线性结构， A 选项错误。循环链表所有结点的指针域都为非空，属于线性结构， B 选项错误。循环链表是链表，循环队列属于队列，队列只能在队尾入队，在排头退队，链表可以在任何位置插入、删除， C 选项错误。双向链表结点具有多个指针域， D 选项正确</p></li><li><p><font color="red">%X.Ys</font>的格式化输出，X是总长度，<font color="blue">Y是从字符串中从左边取Y位</font>，剩下的位数补空格</p></li><li><p>对于数据结构课程而言，简单地说，线性结构是n个数据元素的有序（次序）集合。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1．集合中必存在唯一的一个"第一个元素"；</span><br><span class="line"></span><br><span class="line">2．集合中必存在唯一的一个"最后的元素"；</span><br><span class="line"></span><br><span class="line">3．除最后元素之外，其它数据元素均有唯一的"后继"；</span><br><span class="line"></span><br><span class="line">4．除第一元素之外，其它数据元素均有唯一的"前驱"。</span><br><span class="line"></span><br><span class="line">数据结构中线性结构指的是数据元素之间存在着“一对一”的线性关系的数据结构。</span><br><span class="line"></span><br><span class="line">非线性结构：数学用语，其逻辑特征是一个结点元素可能有多个直接前趋和多个直接后继。</span><br><span class="line"></span><br><span class="line">A选项：在链表中，如果每个结点有两个指针域，则该链表一定是非线性结构，错，类似于传统的双链表，一个指向前一个结点，一个指向后一个结点，这种双链表还是一个线性结构。</span><br><span class="line"></span><br><span class="line">B选项：在链表中，如果有两个结点的同一个指针域的值相等，则该链表一定是非线性结构。对，如果有两个结点的同一个指针域的值，那么被指向的这个点，有两个前驱，违背了唯一的特点，所以必须是非线性结构。</span><br><span class="line"></span><br><span class="line">C选项：在链表中，如果每个结点有两个指针域，则该链表一定是线性结构，错。例如变种的双链表，一个指向后继结点，一个指向链表中的任意结点。如果指向同一结点的话，就类似B选项，所以这个选项是错的。</span><br><span class="line"></span><br><span class="line">D选项：在链表中，如果有两个结点的同一个指针域的值相等，则该链表一定是线性结构，错。一个普通的链表中，不同的结点值可以相等，但是这种链表是线性结果。所以这个选项是错的</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>广义表的长度： 若广义表不空，则广义表所包含的元素的个数，叫广义表的长度，数第一层括号内的逗号数目。</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">**广义表的深度： 广义表中括号的最大层数叫广义表的深度。**</span><br><span class="line"></span><br><span class="line">长度：最外层包含元素的个数，即去掉最外层括号后含有的元素个数。</span><br><span class="line"></span><br><span class="line">深度：表中含有括号数最多的括号层数加一。</span><br><span class="line"></span><br><span class="line">head :返回列表的第一个元素，（不带括号）</span><br><span class="line"></span><br><span class="line">tail：返回列表删除第一个元素后剩余的列表（带括号）</span><br></pre></td></tr></tbody></table></figure></li><li><p>线性链表中的各元素在存储空间中的位置不一定是连续的，且各元素的存储顺序也是任意的</p></li><li><p><strong>顺序表中逻辑相邻物理位置必定相邻。单链表中逻辑相邻物理位置不一定相邻。</strong></p></li><li><p>结构体变量不管其包含有多少个成员，都应当看成是一个整体。在程序运行</p><p>   期间，只要在变量的生存期内，所有成员一直驻留在内存中，不可能出现有的成员驻留内 存，有的成员不驻留内存的情况</p></li><li><p>C 语言中用 <font color="orange">“%%” 打印输出字符 “%”</font>, 所以 %%d, 输出为 %d 两个普通字符 , 而不是格式控制符 “%d” 的含义</p></li><li><p>ava中只有byte, boolean是一个字节, char是两个字节, 所以对于java来说127不会发生溢出, 输出328</p><ul><li>但是对于c/c++语言来说, char是一个字节, 会发生溢出, 对127加一发生溢出, <code>0111 1111 --&gt; 1000 0000, 1000 0000</code>为补码-128, 所以结果为<code>200-128=72</code></li></ul></li><li><p>广义表是一个递归的定义，它的元素可以是 (1)单个元素 (2)子表</p><pre><code>一对确定的（表头，表尾）可以唯一确定一个广义表：  1. 表头：广义表的第一个元素(广义) ，可能是一个元素(狭义)，也可能是一个子表(但它作为第一个元素(广义))  2. 表尾：除表头外其余元素组成的子表，一定是一个表！举一些特殊的例子：表A = (e) ，则表头为e，表尾为() 表B = ( ) ，即空表，长度=0表C = (( ))，长度=1，表头为( )，表尾为( )   </code></pre></li><li><p>拆分二维数组</p><pre><code>int a[4][3] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };拆分成：int b[3] = {1, 2, 3 };int c[3] = {4, 5, 6 };int d[3] = {7, 8, 9 };int e[3] = {10, 11, 12 };\2. 为何拆分？以“b[3] = {1, 2, 3 }”为例：b是数组第一个元素的地址，这里b相当于整型指针！上述b，c，d，e都是整型指针。那么就有：a[4] = { b, c, d, e };这是一个一维数组，其中的**元素都是整型指针**。a是什么？是数组a中第一个元素b的地址！根据上述这种理解，发现可以很方便的解出这道题。分析：AC选项先看“int ( * prt)[3]=a”,相当于：int b[3];int *prt = &amp;b;即定义了一个指向“数组第一个元素的地址”的指针prt；而从1,2分析来看，a表示的正是b的地址。所以，这里等价于：prt = a。我们看AC选项，先把ptr都换成a。A：* (( * prt+1)[2])*a 即a[0]，也就是b；( b+1) 表示 元素2的地址，也就是a[0][1]的地址；(b+1)[2] → *( (b+1) + 2 ) = *(b+3) = b[3]，越界了！其实就是c[0]，VS上验证过，输出也是4.而答案提供的相当于*(b[3])，连数组元素都算不上！*注：**下标和指针转化公式：***(a+n) = a[n]*C：( * prt+1)+2( * a+1)+2 等价于(b+1) + 2 = b+3，是4的地址，也就是c[0]的地址；同样错误。不过可以验证*(( * prt+1)+2)，输出为4.5. B选项分析：* ( * (p+5))int *p = a[0]，相当于int *p = b，遇到p直接用b替换就行了！* (p+5)等价于b[5]，也就是c[2]，元素6，前面还多个*，所以这个错的也很明显。6. D选项**下标和指针转化公式：*****(a+n) = a[n]**，这个正反都可以使用，而且很好用。</code></pre></li><li><p>%% 可以输出 %</p></li><li><p>用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或0。</p></li><li><p>不同数据类型之间的差别在于数据的表示范围及精度上，一般情况下，数据的表示范围越大、精度越高，其类型也越“高级”。</p><ul><li><p>赋值运算中<font color="blue">如果左值精度比右值精度低，将会出现截断</font>，会导致精度丢失。</p></li><li><p>当函数调用时，所传实参与形参类型不一致时，也会把<font color="red">实参自动转换为形参类型</font>后再赋值（<font color="red">类型以形参为准</font>）</p></li></ul></li><li><p>C++</p><ol><li><p>char、short、int、long、bool 基本类型都可以用于switch语句。</p></li><li><p>float、double都不能用于switch语句。</p><ol start="3"><li>enum类型，即枚举类型可以用于switch语句。</li><li>所有类型的对象都不能用于switch语句。</li><li>字符串也不能用于switch语句</li></ol></li></ol></li><li><p>C语言中的文件的存储方式有（可以<font color="green">顺序存取，也可随机存取</font>）</p></li><li><p>C语言是一种<font color="cyan">结构化</font>程序设计语言</p></li><li><p>空指针是一<strong>个特殊的指针值。</strong></p><ul><li>空指针是指可以确保没有指向任何一个对象的指针。通常使用宏定义NULL来表示空指针常量值。<font color="blue">NULL就代表系统的0地址单元</font></li><li><font color="blue">空指针确保它和任何非空指针进行比较都不会相等</font>，因此经常作为函数发生异常时的返回值使用。     </li></ul></li><li><p>在printf中的%作为转义符，两个%才相当于1个%</p></li><li><p>free掉一个指针后，指针的值是不会自动置为NULL的，当然其指向的内存已经被释放，可以重新分配给其他进行使用，此时该指针被称为<strong>野指针</strong>。</p><ul><li>对野指针进行操作，可能会破坏内存结构，因为并不知道当前指针指向的内容是什么，所以一般在free操作结束后，由程序猿将指针置为NULL。</li></ul></li><li><p>C语言的指针的数据类型声明的是<font color="red">指针实际指向内容的数据类型</font></p></li><li><p><font color="red">c = c^32</font> 大小写互换</p></li><li><p>当顺利执行了文件关闭操作时，<code>fclose</code>函数的<strong>返回值</strong>是：如果<font color="red">正常</font>关闭了文件，则函数返回值为<font color="red">0</font>；否则，返回值为非0</p></li><li><p>以下函数用法正确的个数是：</p><pre><code><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="built_in">array</span>[MAX_CHAR+<span class="number">1</span>],i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= MAX_CHAR;i++){</span><br><span class="line">        <span class="built_in">array</span>[i] = i;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">char</span>*<span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">char</span> p[] = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">char</span> *p = test2();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">    str++;</span><br><span class="line">    *str = <span class="string">'0'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>&gt; 重点不在于CHAR_MAX的取值是多少，而是在于i的取值范围是多少。&gt;&gt; 一般char的取值范围是-128到127，而u char 则是0~255，所以i的取值范围是0~255.&gt;&gt; 所以当CHAR_MAX常量大于255时，执行i++后，i不能表示256以上的数字，所以导致无限循环。&gt;&gt; 第二个问题：&gt;&gt; 重点在于函数中p的身份，他是一个指针，还是数组名；&gt;&gt; 如果是指针p，则p指向存放字符串常量的地址，返回p则是返回字符串常量地址值，调用函数结束字符串常量不会消失（是常量）。所以返回常量的地址不会出错。&gt;&gt; 如果是数组p，则函数会将字符串常量的字符逐个复制到p数组里面，返回p则是返回数组p，但是调用函数结束后p被销毁，里面的元素不存在了。&gt;&gt; 例子中p是数组名，所以会出错，p所指的地址是随机值。&gt;&gt; 若是把char p[]="hello";改成char *p="hello";就可以了。&gt;&gt; 第三个问题：&gt;&gt; 重点在于str++;这实际的语句就是str=str+1;而str是数组名，数组名是常量，所以不能给常量赋值。（可以执行str+1，但是不能str=.）</code></pre></li><li><p>feesk中seek_end 的<strong>文件末尾指针</strong>在<font color="red">末尾最后一个字符后面</font>，而非最后一个字符</p></li><li><p>使用”w”写文件也可以使用fwrite </p></li><li><p>对于32位系统，定义 <code>int **a[3][4],</code> 则变量a占有的内存空间为</p><ul><li>此处定义的是指向指针的指针数组，对于32位系统，指针占内存空间4字节，因此总空间为3×4×4＝48。</li></ul></li></ol><p>​           用右左法则来看，首先往变量a的右边看，是【3】，再往左看，是<em>，所以它首先是一个指针数组，数组里存放3个指针，然后再往右看是【4】，再往左看，是int *，说明前面3个指针每个指针都指向一个数组，每个数组里存放4个int *类型的指针，所以3</em>4有12个二级指针，每个指针在32位系统占4个字节，所以48个字节<br>​<br>​           可以从简单到难进行理解，<code>int *a[3]</code>是一个指针数组数组中的每个元素就是一个指针，a的大小是<code>3*4 = 12；int *a[3][4]</code>是一个二维的指针数组，数组中的每一个元素是一个指针，a的大小是<code>3*4*4 = 48</code>；<code>int **a[3]</code>也是一个指针数组，只不过该数组的元素是一个二级指针，但是二级指针的本质还是指针，所以a的大小是<code>3*4 = 12</code>；<code>int **a[3][4]</code>是一个二维数组，数组中的每一个元素是一个二级指针，所以a的大小是<code>3*4*4</code> = 48，就这么简单，不需要去分析什么从左到右从右到左看，反而容易搞混;<br>​           因为[]的优先级是大于<em>号的优先级的，所以先从变量名a向右看是<code>a[3][4]</code>是一个二维数组，然后再将该二维数组看作一个整体向左看，int *</em>是一个二级指针，说明该二维数组是一个数据类型为二级指针的指针数组，这种理解方法就跟普通的指针数组理解方式一样，比如：int *a[3]<br>​           我们理解是先向右看是a[3]拥有三个元素的数组，再向左看，int *说明数组的元素类型是整形的指针类型，所以是一个指针数组<br>​          ```</p><ol start="92"><li><p>%3o表示以八进制数形式输出，占3个空格的位置，右对齐，左边多余的位置补</p><p>  空格，但实际数据的宽度为4大于规定的宽度，所以此时按实际宽度输出，故第一个y的  输出为│4630│。%8o与%3o的差别就在于输出占8个空格的位置，所以左边要补4个空格， 故第二个y的输出也为│□□□□4630│.<font color="blue">%#8o与%8o的差别只是输出时必须输出八进制前导0</font>，所以第三个y的输出为│□□□04630│.<font color="blue">%08o</font>与%8o的差别只是输出时<font color="blue">左边多余的位置补0</font>，  所以第四个y的输出为│00004630│</p></li><li><p>2014对应的二进制为：0000 0000 000 0000 0000 0111 1101 1110</p><ul><li>而<code>x|（x+1）</code>的作用是对一个数中<font color="blue">二进制0的个数进行统计</font></li></ul></li><li><p>1、【编译】是把c源程序翻译成汇编代码：<code>.s</code>； </p><p>2、【汇编】是把汇编代码翻译成二进制目标代码：<code>.obj</code></p><p>3、【链接】是把多个二进制目标代码文件链接成一个可执行程序；因为一个工程某个文件调用了其他c文件的函数或变量 一个程序需要上面三个步骤才能由源程序变成可执行程序。</p></li><li><pre><code class="c">      <span class="keyword">union</span> s{          <span class="keyword">int</span> i;          <span class="keyword">char</span> c;          <span class="keyword">float</span> a;      }temp;      temp.i = <span class="number">266</span>;      <span class="built_in">printf</span>(<span class="string">"%d"</span>, temp.c);      <span class="comment">//输出是10</span>      因为<span class="number">266</span>&gt;<span class="number">256.</span>也因为temp一共占有四个字节，i和ch共用内存空间，但是ch 只占据最低的一个字节，即最低的<span class="number">8</span>位，所以输出c的值也是只能输出这一字节内存中的二进制数表示的数，如果赋值的i是<span class="number">100</span>,将会正常输出<span class="number">100</span>&lt;!--￼<span class="number">5</span>--&gt;</code></pre></li><li><pre><code class="c">      <span class="function"><span class="keyword">int</span> <span class="title">fseek</span><span class="params">(FILE *stream, <span class="keyword">long</span> offset, <span class="keyword">int</span> fromwhere)</span></span>;       函数fseek将文件位置指针重定位到fromwhere（SEEK_SET文件头<span class="number">0</span>,SEEK_CUR文件当前位置<span class="number">1</span>,SEEK_END文件末尾<span class="number">2</span>）开始偏移offset个字节的位置；返回成功<span class="number">0</span>，失败<span class="number">-1</span>；      <span class="function"><span class="keyword">long</span> <span class="title">ftell</span><span class="params">(FILE *stream)</span></span>;      返回文件位置指针当前位置相对于文件首的偏移字节数；&lt;!--￼<span class="number">6</span>--&gt;</code></pre></li></ol><p>对指针变量赋0值和不赋值是不同的。 指针变量未赋值时，值是随机的，是垃圾值，不能使用的，否则将造成意外错误。而指针变量赋0值后，则可以使用，只是它不指向具体的变量而已。</p><ol start="102"><li><p>面试问题</p><p>无法高效获取长度，无法根据偏移快速访问元素，是链表的两个劣势。然而面试的时候经常碰见诸如<font color="orange">获取倒数第k个元素</font>，<font color="green">获取中间位置的元素</font>，<font color="cyan">判断链表是否存在环</font>，<font color="blue">判断环的长度</font>等和长度与位置有关的问题。这些问题都可以通过灵活运用双指针来解决。</p><blockquote><p> Tips：双指针并不是固定的公式，而是一种思维方式~</p></blockquote><p>  先来看”<font color="orange">倒数第k个元素的问题</font>“。设有两个指针 p 和 q，初始时均指向头结点。首先，先让 p 沿着 next 移动 k 次。此时，p 指向第 k+1个结点，q 指向头节点，两个指针的距离为 k 。然后，同时移动 p 和 q，直到 p 指向空，此时 q 即指向倒数第 k 个结点。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">        ListNode *p = head, *q = head; <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">while</span>(k--) {   <span class="comment">//将 p指针移动 k 次</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">nullptr</span>) {<span class="comment">//同时移动，直到 p == nullptr</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>  <font color="green">获取中间元素的问题</font>。设有两个指针 fast 和 slow，初始时指向头节点。每次移动时，fast向后走两次，slow向后走一次，直到 fast 无法向后走两次。这使得在每轮移动之后。fast 和 slow 的距离就会增加一。设链表有 n 个元素，那么最多移动 n/2 轮。当 n 为奇数时，slow 恰好指向中间结点，当 n 为 偶数时，slow 恰好指向中间两个结点的靠前一个(可以考虑下如何使其指向后一个结点呢？)。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">下述代码实现了 n 为偶数时慢指针指向靠后结点。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>{</span><br><span class="line">        ListNode *p = head, *q = head;</span><br><span class="line">        <span class="keyword">while</span>(q != <span class="literal">nullptr</span> &amp;&amp; q-&gt;next != <span class="literal">nullptr</span>) {</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            q = q-&gt;next-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    } </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p> <font color="cyan"> 是否存在环的问题</font>。如果将尾结点的 next 指针指向其他任意一个结点，那么链表就存在了一个环。</p><p>  上一部分中，总结快慢指针的特性 —— 每轮移动之后两者的距离会加一。下面会继续用该特性解决环的问题。<br>  当一个链表有环时，快慢指针都会陷入环中进行无限次移动，然后变成了追及问题。想象一下在操场跑步的场景，只要一直跑下去，快的总会追上慢的。当两个指针都进入环后，每轮移动使得慢指针到快指针的距离增加一，同时快指针到慢指针的距离也减少一，只要一直移动下去，快指针总会追上慢指针。</p><p>  据上述表述得出，如果一个链表存在环，那么快慢指针必然会相遇。实现代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>{</span><br><span class="line">        ListNode *slow = head;</span><br><span class="line">        ListNode *fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span>) {</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(fast != <span class="literal">nullptr</span>) {</span><br><span class="line">                fast = fast-&gt;next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(fast == slow) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>  最后一个问题，如果存在环，如何判断环的长度呢？方法是，<font color="blue">快慢指针相遇后继续移动，直到第二次相遇。两次相遇间的移动次数即为环的长度</font>。</p></li><li><p>由于链表中从高位到低位存放了数字的二进制表示，因此我们可以使用二进制转十进制的方法，在遍历一遍链表的同时得到数字的十进制值。</p><p>   以示例 1 中给出的二进制链表为例：</p><p>   <img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221101205758024.png" alt="image-20221101205758024"></p><p>​     表示 n 是二进制整数。<br>   <img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221101205804892.png" alt="image-20221101205804892"></p><p>   链表的第 1 个节点的值是 1，这个 1 是二进制的最高位，在十进制分解中，1 作为系数对应的 2^2^<br>的指数是 2，这是因为链表的长度为 3。我们是不是有必要一定要先知道链表的长度，才可以确定指数 2 呢？答案是不必要的。</p><ul><li><p>每读取链表的一个节点值，可以认为读到的节点值是当前二进制数的最低位；</p></li><li><p>当读到下一个节点值的时候，需要将已经读到的结果乘以 2，再将新读到的节点值当作当前二进制数的最低位；</p></li><li><p>如此进行下去，直到读到了链表的末尾。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDecimalValue</span><span class="params">(ListNode* head)</span> </span>{</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) {</span><br><span class="line">            ans = ans * <span class="number">2</span> + cur-&gt;val;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     <span class="number">5</span>÷<span class="number">2</span>=<span class="number">2</span>余<span class="number">1</span> </span><br><span class="line">     <span class="number">2</span>÷<span class="number">2</span>=<span class="number">1</span>余<span class="number">0</span> </span><br><span class="line">     <span class="number">1</span>÷<span class="number">2</span>=<span class="number">0</span>余<span class="number">1</span>  </span><br><span class="line">      ===&gt; 得出二进制 <span class="number">101</span> .</span><br><span class="line">     反推回去 商 x 除数 + 余数 </span><br><span class="line">     =&gt; <span class="number">0</span> x <span class="number">2</span> + <span class="number">1</span> = <span class="number">1</span> </span><br><span class="line">     -&gt; <span class="number">1</span> x <span class="number">2</span> + <span class="number">0</span> = <span class="number">2</span></span><br><span class="line">     -&gt; <span class="number">2</span> x <span class="number">2</span> +<span class="number">1</span> = <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>C语言语法规定，字母e或E之前必须要有数字，且e或E后面的指数必须为整数。如e3、5e3.6、<font color="red">.e、e等都是非法</font>的指数形式。</p></li><li><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221103211215842.png" alt="image-20221103211215842"></p></li><li><p>在方法体中定义的局部变量在该方法被执行时创建：错</p><ul><li>不是局部变量再该方法被执行/调用时创建，而是<font color="red">应该为在该变量被声明并赋值时创建，可以理解为当代码执行到该 变量被赋值的代码是才被创建</font>。</li></ul></li><li><p>C语言的源程序加工包括三步：<strong>预处理、编译和链接。</strong></p><p>  其中源程序加工的编译阶段又可细分为：预处理，编译，汇编三个阶段。</p><p>  即C语言由源代码生成可执行程序的过程为：<strong>C源程序→编译预处理→编译→汇编程序→链接程序→可执行文件</strong>。</p>  <figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">①预处理：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、头文件的包含，<span class="meta">#<span class="meta-keyword">include</span>预处理指令。</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、define定义符号的替换</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  预处理指令</span></span><br><span class="line"></span><br><span class="line">注释删除</span><br><span class="line"></span><br><span class="line">②编译：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、把C语言代码翻译成汇编代码。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、语法分析</span><br><span class="line">     </span><br><span class="line"><span class="number">3</span>、词法分析</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、语义分析</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、符号汇总</span><br><span class="line"></span><br><span class="line">③汇编</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、把汇编指令翻译成二进制指令</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、形成符号表</span><br><span class="line"></span><br><span class="line">④链接</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、合并段表</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、符号表的合并和符号表的重定位</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>函数fscanf不能从标准输入流读取数据</strong>   –错</p></li><li><p><strong>程序员必须明确地用函数fopen打开标准输入流、标准输出流和标准错误流</strong>   –错</p></li><li><p><strong>程序必须明确地调用函数fclose关闭文件</strong> – 错</p></li><li><pre><code class="c"> <span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[]) {     <span class="keyword">char</span> *p1 = <span class="string">"h</span><span class="string">        ello"</span>;     <span class="keyword">char</span> *p2 = <span class="string">"world"</span>;     <span class="keyword">char</span> *p3 = <span class="string">"a piece of cake"</span>;     <span class="keyword">char</span> *str[] = { p1, p2, p3 };     <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(*str[<span class="number">0</span>]) &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="keyword">typeid</span>(str[<span class="number">0</span>]).name() &lt;&lt; <span class="string">" "</span> &lt;&lt; *(str[<span class="number">0</span>] + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//typeid是类型</span>     <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(*&amp;str[<span class="number">0</span>]) &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="keyword">typeid</span>(&amp;str[<span class="number">0</span>]).name() &lt;&lt; <span class="string">" "</span> &lt;&lt; *(&amp;str[<span class="number">0</span>] + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;     <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(*str) &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="keyword">typeid</span>(str).name() &lt;&lt; <span class="string">" "</span> &lt;&lt; *(str + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;     <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(*&amp;str) &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="keyword">typeid</span>(&amp;str).name() &lt;&lt; <span class="string">" "</span> &lt;&lt; *(&amp;str + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;     <span class="keyword">return</span> <span class="number">0</span>; } 运行结果： <span class="number">1</span> <span class="keyword">char</span> * e <span class="number">4</span> <span class="keyword">char</span> * * world <span class="number">4</span> <span class="keyword">char</span> * [<span class="number">3</span>] world <span class="number">12</span> <span class="keyword">char</span> * (*)[<span class="number">3</span>] <span class="number">00F</span>7F734 能看懂这个你就知道了，这个地方+<span class="number">1</span>的时候都是说步长，步长就是说+<span class="number">1</span>前面的这个对象 所指向的 数据类型的长度，比如 &amp;str[<span class="number">0</span>]类型是<span class="keyword">char</span> * * 所指向的是<span class="keyword">char</span> * 长度是指针的长度（不同机器不同）&lt;!--￼<span class="number">12</span>--&gt;如果要输出剩余字符串，可用</code></pre></li></ol><pre><code><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, ``<span class="string">"%s\n"</span>``, s);</span><br></pre></td></tr></tbody></table></figure></code></pre><ol start="127"><li><p>● itoa()：将整型值转换为<a href="https://so.csdn.net/so/search?q=字符串&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">字符串</a>。<br>● ltoa()：将长整型值转换为字符串。<br>● ultoa()：将无符号长整型值转换为字符串。<br>● gcvt()：将浮点型数转换为字符串，取四舍五入。<br>● ecvt()：将双精度浮点型值转换为字符串，转换结果中不包含十进制小数点。<br>● fcvt()：指定位数为转换精度，其余同ecvt()。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">itoa()函数有<span class="number">3</span>个参数：第一个参数是要转换的数字，第二个参数是要写入转换结果的目标字符串，第三个参数是转移数字时所用 的基数。在上例中，转换基数为<span class="number">10</span>。<span class="number">10</span>：十进制；<span class="number">2</span>：二进制...</span><br><span class="line"></span><br><span class="line">itoa并不是一个标准的C函数，它是Windows特有的，如果要写跨平台的程序，请用<span class="built_in">sprintf</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">25</span>];</span><br><span class="line">itoa(num, str, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The number 'num' is %d and the string 'str' is %s. \n"</span> ,</span><br><span class="line">num, str);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">atoi</span> <span class="params">(<span class="keyword">char</span> s[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i,n,sign;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;<span class="built_in">isspace</span>(s[i]);i++)<span class="comment">//跳过空白符;</span></span><br><span class="line">sign=(s[i]==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">if(s[i]=='+'||s[i]==' -')//跳过符号</span><br><span class="line">  i++;</span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;<span class="built_in">isdigit</span>(s[i]);i++)</span><br><span class="line">       n=<span class="number">10</span>*n+(s[i]-<span class="string">'0'</span>);<span class="comment">//将数字字符转换成整形数字</span></span><br><span class="line"><span class="keyword">return</span> sign *n;</span><br></pre></td></tr></tbody></table></figure><p>● atof()：将字符串转换为双精度浮点型值。<br>● atoi()：将字符串转换为整型值。<br>● atol()：将字符串转换为长整型值。<br>● strtod()：将字符串转换为双精度浮点型值，并报告不能被转换的所有剩余数字。<br>● strtol()：将字符串转换为长整值，并报告不能被转换的所有剩余数字。<br>● strtoul()：将字符串转换为无符号长整型值，并报告不能被转换的所有剩余数字。</p></li><li><p>int f1(float);<br>int f2(char);<br>void f3(float);<br>int (*pf)(float);</p><p>函数指针变量：</p><p>函数指针变量的声明方法为：</p><p><strong>返回值类型 ( * 指针变量名) ([形参列表]);</strong><br>根据定义，</p><p><code>int(*pf)(float);int (*p)(float)=&amp;f1;</code><br>pf,p都是函数指针变量。</p><p>函数地址 ：</p><p>在编译时，每一个函数都有一个入口地址，该入口地址就是函数指针所指向的地址。</p><p>函数地址的获取，可以是函数名，也可以在函数名前加取地址符&amp; 。</p><p>C错误是因为函数形参类型不匹配。</p><p>函数指针所指向的函数，返回值类型，形参列表必须完全匹配，对函数指针赋值可以采用以下方式<font color="red">pf＝&amp;p1或者pf＝p1 </font></p></li><li><p>按位运算是对字节或字中的实际位进行检测、设置或移位, 它<strong>只适用于字符型和整数型变量以及它们的变体, 对其它数据类型不适用</strong>。无论是float  还是double,在内存中的存储分为三部分：<strong>符号位，指数位，尾数位；</strong>位运算符对它们没有意义</p></li><li><p><font color="red">float类型的变量</font>赋值后为什么<font color="red">必须在值后加”f”/“F”</font><br><code>float x = 3.4F;</code><br>这里将“3.4”赋值给float类型的变量x，如果不加F，系统会默认把赋值的数字当作double类型处理 1，然后在把这个double类型的值赋给float类型，这样就会出现精度丢失。<br><code>float y = 3F;</code><br>这里将“3”赋值给float类型的变量y，如果将整数类型的“3”赋值给float，系统会自动将其转化为double类型1，然后再赋值给float类型，这样虽然会编译成功，但会导致精度缺失。<br>常量存储在常量缓冲区中，有且只有一份，常量缓冲区中的值默认空间大小，如果是整数，默认空间大小为32bit—-int，如果是小数，默认空间大小为64bit—-double。 </p></li><li><p>%f用于输入float,%lf用于输入double,%le用于科学计数法输入double型变量</p></li><li><p>形参与实参的之间的传递分类</p></li><li><p>1、<strong>按值传递（实形无联系）</strong></p><p>按值传递就是平常编程中经常用到的，定义一个基本数据类型的变量，在调用某函数时把该变量作为函数的实参传递给函数。这种传递方式采用的是单向值传递，实形无联系，形参改变不影响实参。</p><p>2、<strong>按地址传递（通过操作形参可能会改变实参）</strong></p><p>按地址传递主要出现在函数参数是指针变量、数组等的时候。</p><p>注意：</p><p>实质上用指针做函数参数的情况下，在调用函数时，将实参变量的传递给形参变量，采取的依然是单向值传递。如果<font color="blue">在被调函数中只是单纯改变了形参指针变量的值</font>，在函数调用结束后这些形参被销毁，是<font color="blue">不会影响调用函数时传入实参指针变量值</font>。</p><p><font color="red">只有当你在被调函数中通过操作形参指针变量，去改变了指针指向变量的值时，才可以改变实参指针变量所指向变量的值</font>。也只有这种情况下形参改变才可能影响实参。</p></li><li><p>假设函数原型和变量说明如下： </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void f3(int(*p)[4]);``int a[4]={1，2，3，4}，``int b[3][4]={{1，2，3，4}，{5，6，7，8}，{9，10，11，12}};</span><br></pre></td></tr></tbody></table></figure><p>  下面调用非法的是</p><ul><li><pre><code>f3(&amp;a);<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>f3(b[1]);<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>f3(&amp;b[1]);<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>f3(b);<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">       &gt; 选**B**。根据题目结合选项来看考察的是对函数的传参调用，其中参数涉及到**数组指针** 。 </span><br><span class="line">       &gt;</span><br><span class="line">       &gt; void f3(**int(\*p)[4]**);  其参数是**数组指针** ，指向数组p的指针。</span><br><span class="line">       &gt;</span><br><span class="line">       &gt;</span><br><span class="line">       &gt; - ​    选项A：f3(**&amp;a**); 参数为一个地址，符合指针定义。   </span><br><span class="line">       &gt; - ​    选项B：f3(**b[1]**); 参数为一个数组的具体元素，不符合指针定义。**所以B是非法的调用。**   </span><br><span class="line">       &gt; - ​    选项C：f3(**&amp;b[1]**); 参数为一个数组元素的地址，符合指针定义。   </span><br><span class="line">       &gt; - ​    选项D：f3(**b**); 参数为数组名，表示该数组的首地址，符合指针定义。</span><br><span class="line">       &gt;</span><br><span class="line">       &gt; &lt;font color='red'&gt;`b[1]`和`&amp;b[1]`虽然值相等，但是含义不一样，`&amp;b[1]`是行指针，类型是`int (*)[4]`，和`a`的类型相同；而`b[1]`是个`int *`，和`&amp;b[1][0]`等价。&lt;/font&gt;</span><br><span class="line">       &gt;</span><br><span class="line">       &gt; - b[1]作为第二行数组的数组名，如果单独出现，则表示首元素的地址，即元素b[1][0]的地址，类型是int*；如果加取地址&amp;，变成&amp;b[1]，那么就是整个第二行数组的地址，和函数f(3)要求的形参保持一致，即该指针指向一个整型数组，数组共4个整型元素。并不是所谓的指针的&lt;font color='red'&gt;指针。&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">135. C语言中，&lt;font color='red'&gt;未经赋值&lt;/font&gt;的&lt;font color='red'&gt;全局变量&lt;/font&gt;默认初始化为&lt;font color='red'&gt;0&lt;/font&gt;，**auto类型、register类型不确定**</span><br><span class="line"></span><br><span class="line">136. 所有的&lt;font color='red'&gt;静态局部变量&lt;/font&gt;，即定义在函数内部的`static int name`形式的，默认初始化为&lt;font color='red'&gt;0&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">137. 外部变量可以供其所在的程序文件中的任何函数使用   --- 错误</span><br><span class="line"></span><br><span class="line">     - 全局变量也称为外部变量，它是在函数外部定义的变量，其作用域是从定义该变量的位置开始至源文件结束。全局变量不受作用域的影响（也就是说，全局变量的生命期一直到程序的结束）。 </span><br><span class="line">       -    如果在一个文件中使用extern关键字来声明另一个文件中存在的全局变量，那么这个文件可以使用这个数据。    </span><br><span class="line">       -    在全局变量前加一个static，使该变量只在这个源文件中可用，称之为全局静态变量。</span><br><span class="line"></span><br><span class="line">138. 指针就是地址，因此一个变量的指针就是该变量的地址。请问这句话的说法是正确的吗？   &lt;font color='red'&gt;错误&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">     - &lt;font color='blue'&gt;一个变量的指针指向的内容才是这个变量的地址&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">139. - 若已包含标准库头文件及相关命名空间，用户也可以重新定义标准库函数，但是该函数将失去原有含义  -- &lt;font color='red'&gt;错误&lt;/font&gt;</span><br><span class="line">     - 若已包含标准库头文件及相关命名空间，则系统不允许用户重新定义标准库函数      --&lt;font color='red'&gt;正确&lt;/font&gt;</span><br><span class="line">     - 用户调用标准库函数前，不必使用预编译命令将该函数所在文件包括到用户源文件中     &lt;font color='blue'&gt;错误&lt;/font&gt;</span><br><span class="line">     - 用户调用标准库函数前，必须重新定义    --&lt;font color='blue'&gt;错误&lt;/font&gt;</span><br><span class="line">       - A选项，函数不能重新定义，只能重载，除非换作用域（那也不能叫重新定义）； B选项，&lt;font color='red'&gt;函数可以被重载而不能重新定义&lt;/font&gt;，重载后函数具有不同的形参，原有定义并不失效； C选项，正确； D选项，调用库函数果断需要#include（预处理包含）头文件啊……否则找不到函数定义</span><br><span class="line"></span><br><span class="line">140. 在 while 循环中以 EOF（&lt;font color='red'&gt;-1&lt;/font&gt;） 作为文件结束标志，这种以 EOF 作为文件结束标志的文件，必须是文本文件。在文本文件中，数据都是以字符的 ASCII 代码值的形式存放。我们知道， ASCII 代码值的范围是 0~255 ，不可能出现 -1 ，因此可以用 EOF 作为文件结束标志</span><br><span class="line"></span><br><span class="line">141. A 选项正确，`int a[10]={0, 0, 0, 0, 0}`; 前 5 个元素为 0，后面 5 个元素编译器补为 0</span><br><span class="line">     B 选项正确，&lt;font color='red'&gt;int a[10]={ }&lt;/font&gt;; 编译器&lt;font color='green'&gt;自动将所有元素置零&lt;/font&gt;</span><br><span class="line">     C 选项正确，`int a[] = {0}`; 编译器自动计算元素个数</span><br><span class="line">     D 选项错误，`int a[10] = {10*a}`;a 是整型数组，10*a 操作非法</span><br><span class="line"></span><br><span class="line">142. 排序方法    平均情况    最好情况    最坏情况    辅助空间    稳定性 </span><br><span class="line"></span><br><span class="line">       冒泡排序     O(n^2)      O(n)       O(n^2)        O(1)        稳定 </span><br><span class="line"></span><br><span class="line">       选择排序     O(n^2)     O(n^2)      O(n^2)        O(1)        不稳定 </span><br><span class="line"></span><br><span class="line">       插入排序     O(n^2)      O(n)       O(n^2)        O(1)        稳定 </span><br><span class="line"></span><br><span class="line">       希尔排序O(n*log(n))~O(n^2) O(n^1.3)    O(n^2)        O(1)       不稳定 </span><br><span class="line"></span><br><span class="line">       堆排序     O(n*log(n))   O(n*log(n))   O(n*log(n))      O(1)       不稳定 </span><br><span class="line"></span><br><span class="line">       归并排序    O(n*log(n))   O(n*log(n))   O(n*log(n))    O(n)          稳定 </span><br><span class="line"></span><br><span class="line">       快速排序    O(n*log(n))   O(n*log(n))    O(n^2)         O(1)       不稳定 </span><br><span class="line"></span><br><span class="line">       冒泡排序经过优化以后，最好时间复杂度可以达到O(n)。设置一个标志位，如果有一趟比较中没有发生任何交换，可提前结束，因此在正序情况下，时间复杂度为O(n)。选择排序在最坏和最好情况下，都必须在剩余的序列中选择最小（大）的数，与已排好序的序列后一个位置元素做交换，依次最好和最坏时间复杂度均为O(n^2)。^</span><br><span class="line"></span><br><span class="line">     插入排序是在把已排好序的序列的后一个元素插入到前面已排好序(需要选择合适的位置)的序列中，在正序情况下时间复杂度为O(n)。堆是完全二叉树，因此树的深度一定是log(n)+1，最好和最坏时间复杂度均为O(n*log(n))。归并排序是将大数组分为两个小数组，依次递归，相当于二叉树，深度为log(n)+1，因此最好和最坏时间复杂度都是O(n*log(n))。快速排序在正序或逆序情况下，每次划分只得到比上一次划分少一个记录的子序列，用递归树画出来，是一棵斜树，此时需要n-1次递归，且第i次划分要经过n-i次关键字比较才能找到第i个记录，因此时间复杂度是\sum_{i=1}^{n-1}(n-i)=n(n-1)/2，即O(n^2)。</span><br><span class="line"></span><br><span class="line">143. 算法的5个基本特征：确定性、有穷性、输入、输出、&lt;font color='red'&gt;可行性&lt;/font&gt;。</span><br><span class="line"></span><br><span class="line">144. 顺序查找的平均时间是多少？——&lt;font color='red'&gt;N/2&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">     - 严格意义上确实 应该是(n+1)/2，因为目标数据可以在任意位置，分别查找1，2，3，4，.......，n次，一共为n*(n+1)/2，所以除以n，平均时间为(n+1)/2</span><br><span class="line"></span><br><span class="line">145. `void hello(int a,int b=7,char* pszC="*");`</span><br><span class="line"></span><br><span class="line">     - hello(5)</span><br><span class="line"></span><br><span class="line">     - hello(5,8)</span><br><span class="line"></span><br><span class="line">     - `hello(6,"#")`</span><br><span class="line"></span><br><span class="line">     - hello(0,0,"#")</span><br><span class="line"></span><br><span class="line">     - &lt;font color='red'&gt;参数从右向左匹配&lt;/font&gt;，C项 a没有匹配到，`&amp;quot`;相当于半个引号，`&amp;quot ;#"=“#”`如上面D选项</span><br><span class="line"></span><br><span class="line">       从左到右我们就说参数是  a   b   c     A，函数从右往左匹配。b,c有现有的就不给了，5给a  </span><br><span class="line"></span><br><span class="line">       B,  8给b,5给a</span><br><span class="line"></span><br><span class="line">        C,  那一坨给了c，6给了b,  没东西给a 。不能跳着给。6给a，b用先有的是不对的。</span><br><span class="line"></span><br><span class="line">        D，挨个给就行了。</span><br><span class="line"></span><br><span class="line">146. 声明一个指向含有10个元素的数组的指针，其中每个元素是一个函数指针，该函数的返回值是int，参数是int*，正确的是（）                                        </span><br><span class="line"></span><br><span class="line">     -</span><br></pre></td></tr></tbody></table></figure>(int *p[10])(int*)<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>int [10]*p(int *)<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>int (*(*p)[10])(int *)<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>int ((int *)[10])*p<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">     - 先看未定义标识符p，p的左边是*，*p表示一个指针，跳出括号，由于[]的结合性大于*，所以*p指向一个大小为10的数组，即`(*p)[10]`。左边又有一个*号，修释数组的元素，*`(*p)[10]`表示`*p`指向一个大小为10的数组，且每个数组的元素为一个指针。跳出括号，根据右边`（int  *）`可以判断（*`(*p)[10]）`是一个函数指针，该函数的参数是`int*`,返回值是int。所以选C。</span><br><span class="line"></span><br><span class="line">147. C语言中的一个变量可以被定义为两个或多个不同的类型。请问这句话的说法是正确的吗？</span><br><span class="line"></span><br><span class="line">     - 如果不在一个函数体中，可以的；但是如果在一个函数体中，会出现调用混淆，不允许。</span><br><span class="line"></span><br><span class="line">       而且这是两个变量，只是变量名相同而已，被存在不同的内存单元中。</span><br><span class="line"></span><br><span class="line">     - 如果在同一个函数内，那肯定不行，重复的定义，如果一个是&lt;font color='red'&gt;全局&lt;/font&gt;一个是&lt;font color='red'&gt;局部&lt;/font&gt;那就可以，还有在两个不同的函数内，也是可以的</span><br><span class="line"></span><br><span class="line">148. 双循环链表中，任意一结点的后继指针均指向其逻辑后继。</span><br><span class="line"></span><br><span class="line">     - 逻辑后继:&lt;font color='green'&gt;指在存储时按照需要给定的逻辑顺序在其后的数据块&lt;/font&gt;。循环链表中**尾节点的逻辑后继**应该为&lt;font color='red'&gt;null&lt;/font&gt;而其**后继指针指向了头节点。**</span><br><span class="line"></span><br><span class="line">149. 递归先序遍历一个节点为n，深度为d的二叉树，需要栈空间的大小为_</span><br><span class="line"></span><br><span class="line">     - **因为二叉树并不一定是平衡的，也就是深度d！=logn，有可能d &gt; &gt; logn(远大于)，所以栈大小应该是O（d）**</span><br><span class="line"></span><br><span class="line">150. 缓存策略中基于 LRU 的淘汰策略，在缓存满时，会把最近进入缓存的数据先淘汰，以保持高的命中率</span><br><span class="line"></span><br><span class="line">     - 刚好说反了，LRU的过程如下（其实很好理解，访问的频率越高越不该丢弃）： </span><br><span class="line"></span><br><span class="line">       ​      1. 新数据插入到链表头部； </span><br><span class="line"></span><br><span class="line">       ​      2. 每当缓存命中（即缓存数据被访问），则将数据移到链表头部； </span><br><span class="line"></span><br><span class="line">             3. 当链表满的时候，将链表尾部的数据丢弃。</span><br><span class="line"></span><br><span class="line">151. 顺序表删除需要移动元素，而链表删除不需要移动元素</span><br><span class="line"></span><br><span class="line">152. &lt;font color='red'&gt;有环的单向链表跟无环的单向链表不可能相交&lt;/font&gt; -正确</span><br><span class="line"></span><br><span class="line">     - 有环的单向链表和无环的单向链表不能相交，因为当相交的时候，无环的单向链表也会被迫存在一个环，只不过这个环的”起点“可能不是原来单向链表的头结点</span><br><span class="line"></span><br><span class="line">153. 如果两个单向链表&lt;font color='red'&gt;相交&lt;/font&gt;，那这两个链表都一定不存在环 -错误</span><br><span class="line"></span><br><span class="line">     - 单向链表相交&lt;font color='red'&gt;可以存在环&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">     ![img](https://uploadfiles.nowcoder.com/images/20180717/4256577_1531815312082_BA893B14C7935C1B5F8296D83D999DDA)</span><br><span class="line"></span><br><span class="line">     - 意思就是&lt;font color='red'&gt;链表相交，要么都有环，要么都无环&lt;/font&gt;，不可能出现其他情况，出现其他情况就不是线性结构就不符合链表的定义</span><br><span class="line"></span><br><span class="line">154. 执行"int x=1;int y=~x;"语句后,y的值为？ ——-2</span><br><span class="line"></span><br><span class="line">     - 假设int占2个字节，那么1的二进制表示是 0000 0001 ，~表示按位取反，则 0000 0001变为 1111 1110，在计算机中整数用补码形式表示，正数的补码是它本身，负数的补码是原数值除符号位按位取反再加一，由补码求原数值也是按位取反再加一，那么 1111 1110 除符号位按位取反再加一变成 1000 0010，即 -2。</span><br><span class="line"></span><br><span class="line">155. 若函数的定义出现在主函数之前且仅被主函数使用，则可以不必再说明</span><br><span class="line"></span><br><span class="line">     - 正确（如果不是仅被主函数调用，就是错的）</span><br><span class="line"></span><br><span class="line">156. 若一个函数（非主函数）没有return语句，返回类型是void</span><br><span class="line"></span><br><span class="line">     - 错误（构造函数和析构函数都没有返回类型，也没有return语句）</span><br><span class="line"></span><br><span class="line">157. &lt;font color='red'&gt;++、--不算做赋值运算&lt;/font&gt;，只能说是一个表达式</span><br><span class="line"></span><br><span class="line">158. 有char a[10]=”abc”;，则strlen(a)的值为3，&lt;font color='red'&gt;strlen&lt;/font&gt;函数返回字符串的&lt;font color='blue'&gt;长度&lt;/font&gt;，不包括末尾的’\0，sizeof(a)才是10</span><br><span class="line"></span><br><span class="line">159. \#include命令的功能是（）</span><br><span class="line"></span><br><span class="line">     - 在&lt;font color='red'&gt;命令处&lt;/font&gt;插入一个文本文件（注意&lt;font color='red'&gt;不是&lt;/font&gt;在&lt;font color='blue'&gt;文件首部&lt;/font&gt;插入一个头文件）</span><br><span class="line"></span><br><span class="line">160. 当顺利执行了文件关闭操作时，&lt;font color='blue'&gt;fclose函数的返回值&lt;/font&gt;是（）</span><br><span class="line"></span><br><span class="line">     - 如果&lt;font color='red'&gt;正常关&lt;/font&gt;例了文件，则函数返回值为&lt;font color='red'&gt;0&lt;/font&gt;；否则，返回值为&lt;font color='red'&gt;非0&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">161. 定义类型并不会分配空间，只有在&lt;font color='blue'&gt;定义变量&lt;/font&gt;时才会分配内存空间</span><br><span class="line"></span><br><span class="line">162. `int  a[10];`</span><br><span class="line"></span><br><span class="line">     - 问下面不可以表示a[1]地址的是（）</span><br><span class="line"></span><br><span class="line">       - &amp;a[0] + 1</span><br><span class="line">       - &lt;font color='blue'&gt;a + sizeof(int)&nbsp;&nbsp;&lt;/font&gt;</span><br><span class="line">       - (int*)&amp;a + 1</span><br><span class="line">       - `(int*)((char*)&amp;a + sizeof(int))`</span><br><span class="line"></span><br><span class="line">     - a为数组的时候 </span><br><span class="line">       &lt;font color='red'&gt;&amp;a + 1&lt;/font&gt; 移动sizeof(数组)字节 </span><br><span class="line"></span><br><span class="line">        &lt;font color='red'&gt; a + 1 &lt;/font&gt;或者 &lt;font color='red'&gt;&amp;a[0] + 1&lt;/font&gt; 移动sizeof(int) ,即移动到&lt;font color='red'&gt;下一个数组元素 &lt;/font&gt;</span><br><span class="line"></span><br><span class="line">       B是指向a[4]</span><br><span class="line"></span><br><span class="line">       C将a变成了指针 int *类型，指针+1 都是移动sizeof(int) ，移动到下一个元素的 </span><br><span class="line"></span><br><span class="line">        D指针绕来绕去的，变成char* 后 +4 ，移动 4* (sizeof(char))，移动四个字节，然后又重新强转成了int*,依然指向下一个元素</span><br><span class="line"></span><br><span class="line">163. 已知ii，j都是整型变量，下列表达式中，与下标引用`X[ii][j]`不等效的是（）</span><br><span class="line"></span><br><span class="line">     - *（X[ii]+j）</span><br><span class="line"></span><br><span class="line">     - &lt;font color='red'&gt;*(X+ii)[j]&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">     - &lt;font color='red'&gt;*(X+ii+j)&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">     - *(*(X+ii)+j)</span><br><span class="line"></span><br><span class="line">       - &lt;font color='red'&gt;a[m]相当于*（a+m)&lt;/font&gt;就是说 [] 符号如果要去掉的话，相加，括号，再取地址。。。反过来也一样</span><br><span class="line"></span><br><span class="line">       - B应该也是错误的，由于&lt;font color='red'&gt;[]的优先级高于*&lt;/font&gt;,因此，相当于对地址`（X+ii）[j]`取值，如果B改为`（*（X+ii））[j]`就对了</span><br><span class="line">       - `a[i][j] =*(a[i]+j) = *(*(a+i)+j) =(*(a+i))[j]`</span><br><span class="line"></span><br><span class="line">164. print函数声明为void print(int a,char b='b',int c=1); 下面函数调用正确的是（）</span><br><span class="line"></span><br><span class="line">     - print('a');</span><br><span class="line"></span><br><span class="line">       print(5,8);</span><br><span class="line"></span><br><span class="line">       print(5,'#');</span><br><span class="line"></span><br><span class="line">       print(5,'#',2);</span><br><span class="line"></span><br><span class="line">     - C++在调用函数时，当实参和形参的数据类型不一致时，会发生数据类型转换！将低精度转换为高精度时，由编译器隐式完成；将高精度转换为低精度时，必须用强制类型转换运算符：static_cast&lt;&gt;()来转换才不会造成数据丢失。精度由低到高: char-&gt;int-&gt;double-&gt;long double。CD肯定对， A的话字符转为整数即为97, B 选项在将整数类型 8 复制给 char 时，会发生截断赋值。把整数的前3*8位去掉  直接后8位赋值给char </span><br><span class="line"></span><br><span class="line">165. fprintf函数只能以&lt;font color='red'&gt;字符串&lt;/font&gt;的形式写入到文件中</span><br><span class="line"></span><br><span class="line">166.</span><br></pre></td></tr></tbody></table></figure>int` `s[4][5],(*ps)[5];ps = s;</code></pre></li></ul><p>ps是一指向二维数组s的指针，ps+1表示指向数组s第2行首地址的指针；<br><em>(ps+3)表示数组s第4行的首地址；</em>(ps+1)+3表示数组s第2行第4列元素的地址，</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">167. 浮点类型在内存中分布为：&lt;font color='blue'&gt;符号位+指数位（-127~128）+尾数部分 (有效数字 1&lt;= M &lt;2)&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">168. ```c</span><br><span class="line">     #include "stdio.h"</span><br><span class="line">     #include "string.h"</span><br><span class="line">     void fun(char *s){ </span><br><span class="line">         char t[7];</span><br><span class="line">         s=t;</span><br><span class="line">         strcpy(s, "example");</span><br><span class="line">     }</span><br><span class="line">     </span><br><span class="line">     int  main(){ </span><br><span class="line">         char *s;    </span><br><span class="line">         fun(s);    </span><br><span class="line">         printf("%s",s);</span><br><span class="line">         return 0;</span><br><span class="line">     }</span><br></pre></td></tr></tbody></table></figure><p>对于栈中内存如果没有初始化，则会出现“烫烫烫烫烫烫”。对于堆中内存如果没有初始化，则会出现“屯屯屯屯屯”</p><ul><li><p>需要解释的就是编译错误和运行错误，编译错误可以理解成编译器能检查出来的错误，运行错误理解成逻辑错误，需要用户自己纠错</p></li><li><p>1.main函数里的s没有初始化就在fun函数里使用s，编译器会报警告，运行时会报错（局部变量未初始化）。答案选D。 </p><p>2.就算s初始化了，在fun函数里，局部变量t的大小为7，而strcpy函数会复制example末尾的\0 </p><p>所以example+’\0’一共8个字节空间，会溢出，程序会崩溃。 </p><p>3.就算局部变量t的大小足够大，在fun函数运行结束后，局部变量t的内存空间会被释放掉，此时s成为野指针；返回main函数后，也不会输出example。</p></li></ul></li><li><p>定义二维数组时，若第一维不确定第二维确定，则数组必须初始化;初始化后数组中元素个数除以第二维大小<font color="red">，若能整除，则商即第一维大小，若不能整除，则商加上1得到第一维大小</font>;若第一二维全部确定，可以不初始化，默认元素全部为0;不允许第二维不定</p><ul><li>二维数组的真实含义是，它的第一维就是一组数据的起始地址，第二维就是某组数据中的某个值，a[][3]表达的意思就是二维数组a的每一维都是由3个元素组成的一维数组</li></ul></li><li><p>下面程序段的运行结果是 ( ) 。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *s = <span class="string">"abcde"</span>;</span><br><span class="line">s += <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, s);</span><br></pre></td></tr></tbody></table></figure><ul><li>指针s保存的是字符串的首地址，s+=2后，指向了字符‘c’，格式化输出s就是字符‘c’的地址（十进制形式的地址，%p是十六进制的地址）</li></ul></li><li><p>下面代码的执行结果是（）</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">char</span> *p[] = {<span class="string">"TENCENT"</span>, <span class="string">"CAMPUS"</span>, <span class="string">"RECRUITING"</span>};</span><br><span class="line">    <span class="keyword">char</span> **pp[] = {p + <span class="number">2</span>, p + <span class="number">1</span>, p};</span><br><span class="line">    <span class="keyword">char</span> ***ppp = pp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s "</span>, **++ppp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, *++*++ppp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p><img src="https://uploadfiles.nowcoder.com/images/20180303/4129176_1520062230660_F3CCDD27D2000E3F9255A7E3E2C48800" alt="img"></p></li><li><p>从题干当中，我们可以画出这样的一个图，这样就比较直观的看出了p,pp,ppp都指向哪里了，关键是最后两个printf语句。<br>（1）printf(“%s”,**++ppp);即，ppp当前所指向的位置，再往下移一个位置，即pp的位置2，而pp的位置2指向的是p的位置2，p的位置2指向的是CAMPUS，所以先输出CAMPUS  </p><p>  （2）<code>printf(“%s”,*++*++ppp);</code>这个语句等价于 <code>printf(“%s”,*++（*++ppp)）;</code>所以我们首先看,++ppp，第一个printf语句中ppp已经指向了pp的位置2，所以再往下移一个，指向了pp的位置3，而（*++ppp）则代表pp位置3所指向的内容，即p的位置1（pp的位置3指向的是p的位置1），在此基础上前面再加上一个++，则代表指针p在位置1的基础上再往下移动，即指针p的位置2，而p的位置2所指向的内容是CAMPUS，所以第二行输出的也是CAMPUS。<br>所以正确答案是：CAMPUS CAMPUS</p></li></ul></li><li><p>scanf()函数是格式化输入函数，它从标准输入设备(键盘）读取输入的信息</p><ul><li>输入== 读取、打印到屏幕==写</li></ul></li><li><p>关于C语言中的float，下面哪种说法正确的是 （）</p><ul><li><font color="blue">x的二次方大于等于0,对于float变量x总成立</font><br>float 变量加法满足交换律<br>条件0.9f == 0.9 的值为真<br>条件9 == 0.9*10 的值为真</li><li>C/C++中浮点数由符号位、阶码和尾数构成，其二进制表示并不直接对应浮点数的大小，因此<strong>浮点数类型不能进行位运算</strong>，否则编译器报错；所以<strong>如果A选项正确，其指的应该是x的二次幂；而不是x与2进行逐位异或</strong>……</li><li>B不一定正确。<strong>虽然**</strong>浮点数标准<strong>**IEEE 754</strong>满足加法和乘法的交换律，不满足加法结合律，<strong>但是**</strong>C++标准不保证<strong>**IEEE 754标准的实现</strong>，于是C++编译器也不保证浮点数a+b的结果等于b+a</li><li>C、D错误。浮点数存在误差，直接比较大小往往不是预期的结果；通常引入一个比要求精度还要小几个数量级的实数epsilon来帮助比较大小。在我的机器上，精度取1e-8，0.9f == 0.9为假（0.9f是单精度浮点，精度比0.9低）：</li></ul></li><li><p>extern、register、static、auto分别是定义外部变量、寄存器变量、静态变量、自动变量<br> 其中，自动变量(<font color="red">auto</font>)和寄存器变量(<font color="red">register</font>)属于动态存储，<font color="red">调用时临时分配单元</font>；而静态变量(static)和外部变量(extern)属于静态存储，在整个程时都存在.</p><ul><li>故，以下只有在使用时才为该类型变量分配内存的存储类型的是（）<ul><li>auto和register</li></ul></li></ul></li><li><p>函数原型：指明函数的名字，返回的类型，有几个参数，这几个参数是什么类型，<strong>不需要函数体</strong>，也<strong><font color="red">不需要形式参数的名字</font></strong>，其中用分号作为原型的结束符。</p><p>例如：void fun( int );</p></li><li><p>C语言程序能够在不同的操作系统下运行，这说明C语言具有很好的</p><ul><li>移植性<ul><li>所谓移植性就是在某操作系统下编写的程序能够在其他操作系统下编译运行，而程序几乎不需要进行任何修改。所以选择B。</li></ul></li></ul></li><li><p>对于下面的代码，说法正确的是____</p><p>char* s1 = “Hello world”;<br>char s2[] = “Hello world”;<br>s1[2] = ‘E’;     // 1<br>s2[2] = ‘E’;     // 2<br>*(s1 + 2) = ‘E’;  // 3<br>*(s2 + 2) = ‘E’;  // 4</p><ul><li>“Hello World”在常量区，但s1存储在栈，并且可以做++运算，但*p不可更改，相当于const char *p</li><li><strong>指针指向字符串时，字符串是常量，存储在常量区，而指针存储在栈区，不能对其操作修改。</strong></li><li>而对于s2,”Hello world”存储在数组里，在栈区，是可以修改的</li></ul></li><li><p>strlen和str.length()都是求字符串的长度，但strlen( )的参数必须是char*，而 str.length( )是string类对象str调用的成员函数。</p></li><li><p>%3d：<font color="red">输出</font>时表示输出位数少于三位数时前面补0，<font color="red">多于三位数时按实际位数输出</font>。<font color="red">输入</font>时表示<font color="red">只输入三位数</font>，少于三位数以空格补齐。</p></li><li><p>二路归并排序的时间复杂度为（）。</p><ul><li>假设数据区域为[1:n]，归的过程，第一次将区间分为[1:n/2]和[n/2+1，n]，第二次将两个区间分为四个，总共会进行log2(n)次，总共分为了log2(n）层，每次分区间的时间复杂度为1，则总共归的过程时间复杂度为log2(n)，而并的过程会的归的过程分的区间进行排序，是两个有序数组合并的过程，每一层合并的时间复杂度为n，有log2(n)层，所以并的总共复杂度为nlog2(n)，而归并的复杂度为nlog2(n)+log2(n)，用大O表示法就是<font color="red">nlogn</font></li></ul></li><li><p>用邻接矩阵存储有n个结点(0,1,…,n)和e条边的有向图<img src="https://www.nowcoder.com/equation?tex=0%20%5Cle%20e%20%5Cle%20n(n%20-%201)" alt="img">)。在邻接矩阵中删除结点<img src="https://www.nowcoder.com/equation?tex=i(0%20%5Cle%20i%20%5Cle%20n)" alt="img">的时间复杂度是（）</p><ul><li><p>删除节点B时，在邻接矩阵中需要把指向B的边全部删除，B指向的边也全部删除。 </p><p>而邻接矩阵表示法由一个顶点表（一维数组），一个边集（邻接矩阵，二维数组）组成。由顶点表查找i，复杂度为O(1)，然后查找二维数组i行i列，置i行i列均为0（即删除i节点），复杂度为2*O（n）。 </p><p>结果为O(n)，选择 B。</p></li></ul></li><li><p><strong>回溯法</strong><br> 1）（求解目标）回溯法的求解目标是找出解空间中满足约束条件的一个解或所有解。<br> 2）（搜索方式：深度优先）回溯*<em>\</em>搜索整个解空间，当不满条件时，丢弃，继续搜索下一个儿子结点，如果所有儿子结点都不满足，向上回溯到它的父节点。</p><p>   <strong>分支限界法</strong><br> 1）（求解目标）分支限界法的目标一般是在满足约束条件的解中找出在某种意义下的最优解，也有找出满足约束条件的一个解。<br> 2）（搜索方式：广度优先）分支限界法以广度优先或以最小损耗优先的方式搜索解空间。</p><ul><li><p>回溯法的求解目标是找出T中满足约束条件的所有解，而分支限界法的求解目标则是找出满足约束条件的一个解，或是在满足约束条件的解中找出使某一目标函数值达到极大或极小的解，即在某种意义下的最优解。 </p><p>回溯法以深度优先的方式搜索解空间树T，而分支限界法则以广度优先或以最小耗费优先的方式搜索解空间树T。</p></li></ul></li><li><p>共用体变量可以作结构体的成员<font color="blue">,结构体变量也可以作共用体的成员</font>。</p><ul><li>正确</li></ul></li><li><p><font color="blue">文件指针和位置指针都是随着文件的读写操作在不断改变</font></p><ul><li>错，文件指针位置不变</li></ul></li><li><p>任何表达式语句都是表达式加分号结尾</p><ul><li>正确</li></ul></li><li><p>数组名不能与其他变量名相同</p><ul><li>正确</li></ul></li><li><p>函数形参的<a href="https://so.csdn.net/so/search?q=存储单元&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">存储单元</a>是<font color="red">动态分配</font>的</p><ul><li>错误，函数的变量一般是栈区，只要退出函数，系统就会自动回收栈区，而动态分配分配时分配堆区，堆区只能手动回收（free函数）</li></ul></li><li><p>C语言 随机操作<font color="red">只</font>适用于文本文件</p><ul><li><font color="red">错误</font>，随机操作文本指的是用seek函数重新定位文件指针进行读写操作，访问数组中的元素也是随机的，知道下标就可以，所以说随机操作不只是针对于文件来讲。</li></ul></li><li><p>全局变量放在static静态区，不是在栈区；stack由编译器自动分配和释放,存放函数的参数值，局部变量</p></li><li><p><a href="http://www.cnblogs.com/perfy/archive/2012/09/06/2672946.html" target="_blank" rel="noopener">heap&amp;stack 区别</a></p><p>​    1.heap是堆，stack是栈。   </p><p>​        2.stack的空间由操作系统（不是编译器）自动静态分配和释放（进站和出栈可控）；heap的空间是手动申请和释放的，heap常用new关键字来动态分配（—“内存泄露”——                            Memory Leak                     ）。   </p><p>​    3.stack空间有限（经常有栈溢出，而不是堆溢出），heap的空间是很大的自由区。   </p><p>  在Java中， </p><p>  若只是声明一个对象，则先在栈内存中为其分配地址空间， </p><p>  若再new一下，实例化它，则在堆内存中为其分配地址。 </p><p>   4.举例：  </p><p>   数据类型 变量名；这样定义的东西在栈区。  </p><p>   如：Object a =null; 只在栈内存中分配空间  </p><p>   new 数据类型();或者malloc(长度);    这样定义的东西就在堆区  </p><p>   如：Object b =new Object();    则在堆内存中分配空间</p></li><li><p>若fp已正确定义并指向某个文件，当未遇到该文件结束标志时函数feof(fp)的值为0.</p><ul><li>此时并未到文件尾部，否则返回非0，因为<font color="red">有数据时返回0</font></li></ul></li><li><p>文件指针用于指向文件，文件<font color="red">只有被打开后</font>才有对应的文件指针。</p></li><li><p>如果函数定义出现在函数调用之前,可以不必加函数原型声明</p><ul><li>正确</li></ul></li><li><p>输入操作称为写操作,将输入流中的信息存到内存时,使用写函数。</p><ul><li><font color="red">输入</font>是指计算机将数据读取存入内存的过程，即这个过程是<font color="red">读入</font>过程，即读操作，使用读函数<ul><li>类比scanf，计算将用户输入的数据从缓冲区读取出来存入内存；printf，计算机将内存中的数据写到输出设备上即屏幕</li></ul></li></ul></li><li><p>函数返回值的类型是由在<font color="red">定义函数</font>时所指定的函数类型</p></li><li><p>指向数组的指针变量称为数组指针变量。</p><ul><li><p>一个数组是由<font color="red">连续</font>的一块内存单元组成的。</p></li><li><p><font color="red">数组名</font>就是这块连续内存单元的<font color="red">首地址</font>。</p></li><li><p>一个数组<font color="blue">也是由各个数组元素（下标变量）组成</font>的。</p></li><li><p>每个数组元素按其类型不同占用几个连续的内存单元。</p></li><li><p>一个指针变量<font color="blue">既可以指向一个数组，也可以指向一个数组元素。</font></p><p>一般形式：<br>类型说明符 *指针变量名。</p><p>有了指针可以用两种方法访问数组元素:<br>第一种方法为下标法。<br>第二种方法为指针法。</p></li></ul></li><li><p>指针变量可以存放指针(地址)、数值和字符</p><ul><li><font color="red">只能存储地址</font></li></ul></li><li><p>内存中每个存储单元都有一个唯一的地址</p><ul><li>正确</li></ul></li><li><pre><code class="c"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span><span class="function"></span>{    <span class="keyword">char</span> arr[<span class="number">2</span>][<span class="number">4</span>];    <span class="built_in">strcpy</span> (arr[<span class="number">0</span>],<span class="string">"you"</span>);    <span class="built_in">strcpy</span> (arr[<span class="number">1</span>],<span class="string">"me"</span>);    arr[<span class="number">0</span>][<span class="number">3</span>]=<span class="string">'&amp;'</span>;    <span class="built_in">printf</span>(<span class="string">"%s \n"</span>,arr);    <span class="keyword">return</span> <span class="number">0</span>;}&lt;!--￼<span class="number">27</span>--&gt;- ```C  ioctl  &lt;!--￼<span class="number">28</span>--&gt;- ```C  <span class="built_in">write</span>  &lt;!--￼<span class="number">29</span>--&gt;</code></pre></li><li><p>malloc函数进行动态、静态内存分配是在什么阶段?</p><ul><li><p>程序占用三种类型的内存：静态内存、栈内存、堆内存；<br><strong>静态内存：</strong><br>用来保存局部static对象、类static数据成员以及定义在任何函数之外的变量<br> <strong>栈内存：</strong> </p><p>  用来保存定义在函数内的非static对象。  </p><p> 分配在静态内存或栈内存中的对象由编译器自动创建和销毁。对于栈对象，仅在其定义的程序块运行时才存在；static对象在使用之前分配，在程序结束时销毁。  </p><p> <strong>堆内存：</strong>  </p><p>  在程序<strong>运行时</strong>分配。动态对象的生存周期由<strong>程序（用户）</strong>来控制。</p></li><li><p>装载阶段、执行阶段</p></li></ul></li><li><p>“-6.2e”的意思：</p><p><strong>6</strong> 表示输出的位宽，如果结果小于6位，则不足的部分以空格补充，如果超于6位则没影响； </p><p>  <strong>.2</strong> 保留两位小数 </p><p>  e 以指数形式输出，即10的n次幂，e+02即表示10^2 </p><p>  - 负号，表示左对齐还是右对齐，2.19e+02 占9位（代码执行测试得到，通过不断修改6的结果，直到改到10，才出现了%6.2e输出时，左侧添加空格占位）。所以 - 表示左对齐，结尾右侧补空格，而+情况是右对齐，即左侧开头补空格 </p><p>  所以对于218.82631输出结果应为2.19*10^2，转换成计算机的代码输出格式即2.19e+02</p></li><li><p>共用体：</p><ul><li>共用体变量的地址和它的各成员的地址都是同 一地址。</li><li><font color="red">不能对共用体变量名赋值。</font></li><li>不能企图引用变量 名来得到一个值。</li><li>不能<font color="red">在定义共用体变量时对它初始化。</font></li><li><font color="red">不能</font>用共用体变量名作为<font color="red">函数参数</font>。 </li><li><font color="green">不能用函数返回共用体变量</font></li><li>可以定义共用体数组，<font color="green">共用体成员可以是数组</font></li><li><font color="blue">共用体类型定义和结构体类型定义可以互相嵌套</font></li><li>任何时间<font color="blue">起作用的是最后一个成员</font>（且只能任意时间只有一个成员起作用）</li></ul></li><li><p>C 语言分隔符：逗号(变量和表达式之间)、分号(for语句内)、空白符(字符串之间)、冒号（case:)</p></li><li><p>变量的类型分为两种：储存和数据</p><ul><li><p>所有的数据都有两种类型，一种是数据类型，一种是存储类型。<br><strong>数据类型</strong>：如int，float等<br><strong>存储类型</strong>：四种存储类型的变量，自动变量（auto）、<a href="https://so.csdn.net/so/search?q=静态变量&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">静态变量</a>（static）、外部变量（extern）、以及寄存器变量（register）。</p></li><li><table><thead><tr><th>存储类别</th><th>存储期</th><th>作用域</th><th>声明方式</th></tr></thead><tbody><tr><td>auto</td><td>自动</td><td>块</td><td>块内</td></tr><tr><td>register</td><td>自动</td><td>块</td><td>块内,使用关键字register</td></tr><tr><td>static(局部)</td><td>静态</td><td>块</td><td>块内,使用关键字static</td></tr><tr><td>static(全局)</td><td>静态</td><td>文件内部</td><td>所有函数外,使用关键字static</td></tr><tr><td>extern</td><td>静态</td><td>文件外部</td><td>所有函数外</td></tr></tbody></table></li></ul></li><li><p>return后面括号里的表达式的值即是此函数的值。请问这句话的说法是正确的吗？</p><ul><li>错误</li><li>return 后面括号的值不一定是函数的值，譬如函数返回值与return 类型不一致需要类型转换，返回值为 int ，retun 3.2 ，那么肯定会进行转换的</li></ul></li><li><p><code>!(x + y) + z-1 &amp;&amp; y + z/2;</code></p><ul><li>表达式的值是</li><li><code>!(x + y) + z-1 &amp;&amp; y + z/2即为(( !(x + y) )+ z-1) &amp;&amp; (y + z/2)=(!7+5-1)&amp;&amp;(4+2)=(0+5-1)&amp;&amp;6=4&amp;&amp;6=1</code></li></ul></li><li><p>用C语言编写的代码程序（）</p><ul><li><pre><code>可立即执行<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>是一个源程序<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>经过编译即可执行<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>经过编译解释才能执行<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">     - 1、【&lt;font color='red'&gt;编译&lt;/font&gt;】是把c源程序翻译成汇编代码：*.s； 2、【&lt;font color='red'&gt;汇编&lt;/font&gt;】是把汇编代码翻译成二进制目标代码：*.obj； 3、【&lt;font color='red'&gt;链接&lt;/font&gt;】是把多个二进制目标代码文件链接成一个可执行程序；因为一个工程某个文件调用了其他c文件的函数或变量 一个程序需要上面三个步骤才能由源程序变成可执行程序。</span><br><span class="line"></span><br><span class="line">     - C语言写的代码程序&lt;font color='red'&gt;肯定是源程序&lt;/font&gt; 它&lt;font color='blue'&gt;不能立即执行，必须经过编译成可执行代码&lt;/font&gt;</span><br><span class="line">       如果这个源程序中不含有main函数，编译后的代码也是不可执行的 C语言不是解释执行的</span><br><span class="line"></span><br><span class="line">209. 在32位机上，下面C程序的输出结果是</span><br><span class="line"></span><br><span class="line">     ```C</span><br><span class="line">     struct MyStruct</span><br><span class="line">     {</span><br><span class="line">         int i;</span><br><span class="line">         char c;</span><br><span class="line">         struct InnerStruct</span><br><span class="line">         {</span><br><span class="line">             int i;</span><br><span class="line">             long l;</span><br><span class="line">             double d;</span><br><span class="line">             char c;</span><br><span class="line">         } innerStruct;</span><br><span class="line">     };</span><br><span class="line">     union MyUnion</span><br><span class="line">     {</span><br><span class="line">         int i;</span><br><span class="line">         char c;</span><br><span class="line">     };</span><br><span class="line">     int main()</span><br><span class="line">     {</span><br><span class="line">        printf("%d, %d", sizeof(MyStruct), sizeof(MyUnion));</span><br><span class="line">     }</span><br></pre></td></tr></tbody></table></figure></code></pre></li><li><p>做选择题就要有做选择题的方法，除了掌握基本的知识。 </p><p>对于struct来说，大小虽然要慢慢累加，但是最后必然为struct里最长类型的整数倍，即double为8字节，则肯定是8的整数倍，排除A,B（不用慢慢累加计算） </p><p>对于Union来说，就简单了，大小为最长类型的整数倍，即int为4字节，则为4，选C</p></li><li><p>结构体长度并不一定是double的长度8的整数倍，而是min(字节对齐长度,8)的倍数</p><p>如果默认编译器4字节对齐，这题就是28，如果是8字节，就是32 </p><p>设对齐字节数为n(n = 4或8，区别于32位或者64位操作系统),每个成员内存长度为Li, Max(Li)为最大的成员内存长度,字节对齐规则是: </p><p>\1.    结构体对象的起始地址能够被Max(Li)所整除; </p><p>\2.    结构体中每个成员相对于起始地址的偏移量,即对齐值应是min(n,Li)的倍数.若不满足对齐值的要求,编译器会在成员之间填充若干个字节; </p><p>\3.    结构体的总长度值应是min(n,Max(Li))的倍数,若不满足总长度值的要求,编译器在为最后一个成员分配空间后,会在其后填充若干个字节.</p></li></ul></li><li><p><strong>两指针变量相减所得之差是两个指针所指数组元素之间相差的元素个数</strong></p></li><li><p>fseek函数<font color="red">一般</font>用于二进制文件。注意也可用于文本文件</p></li><li><p>一个变量的数据类型被强制转换后,它将保持被强制转换后的数据类型</p><ul><li>错误</li></ul></li><li><p>使用printf函数打印一个double类型的数据，要求：输出为10进制，输出左对齐30个字符，4位精度。以下哪个选项是正确的？</p><ul><li><pre><code>%-30.4e<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>%4.30e<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>%-30.4f<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>%-4.30f<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">     - -： 左对齐</span><br><span class="line"></span><br><span class="line">       30： 最小字段宽度</span><br><span class="line"></span><br><span class="line">       .4： 精确度保留小数4位</span><br><span class="line"></span><br><span class="line">       f： double精度浮点数</span><br><span class="line"></span><br><span class="line">       e： 科学计数法</span><br><span class="line"></span><br><span class="line">     - printf中，&lt;font color='red'&gt;%f通杀单精度和双精度&lt;/font&gt;</span><br><span class="line">       在&lt;font color='red'&gt;scanf&lt;/font&gt;中，%f和%lf才&lt;font color='red'&gt;有区别&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">214. 下面关于C语言中sizeof(int)说法正确的是（）</span><br><span class="line"></span><br><span class="line">     - &lt;font color='red'&gt;编译时&lt;/font&gt;</span><br><span class="line">     - 运行时</span><br><span class="line"></span><br><span class="line">215. C语言中的一个变量可以被定义为两个或多个不同的类型。请问这句话的说法是正确的吗</span><br><span class="line"></span><br><span class="line">     - 如果同一个变量，分别作为全局变量和局部变量，根据局部优先原则，是可以定义为不同类型的。</span><br><span class="line"></span><br><span class="line">216. ```C</span><br><span class="line">     struct student {</span><br><span class="line">         int num, age;</span><br><span class="line">     };</span><br><span class="line">     struct student stu[3] = {{6001, 20}, {6003, 21}, {6005, 19}};</span><br><span class="line">     struct student *p = stu;</span><br></pre></td></tr></tbody></table></figure></code></pre></li></ul><p>则下面的C语言表达式中,值为6003的是（） 。</p><ul><li><p>对于A选项：++(p-&gt;num)。表示取数组第一个元素的值(6001)，然后+1； </p><p>对于B选项：(p++)-&gt;num。后缀自增运算符(++)与成员选择运算符(-&gt;)处于同一优先级，从左到右结合，但是指针偏移的操作直到表达式结束才会进行， </p><p>这个表达式相当于(p)-&gt;num;p=p+1; </p><p>对于C选项：<code>(*p++).num。</code>后缀自增运算符(++)优先级高于取值运算符(<em>)，但是++直到表达式结束才会进行，这个表达式相当于`(</em>p).num;p=p+1;` </p><p>对于D选项：<code>(*++P).num。</code>前缀自增运算符(++)优先级和取值运算符(<em>)一样，先执行p=p+1操作，相当于`(</em>(p+1)).num`;</p></li></ul></li><li><p>下列函数正确的是</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="built_in">array</span>[MAX_CHAR+<span class="number">1</span>],i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= MAX_CHAR;i++){</span><br><span class="line">        <span class="built_in">array</span>[i] = i;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">char</span>*<span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">char</span> p[] = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">char</span> *p = test2();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">    str++;</span><br><span class="line">    *str = <span class="string">'0'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><pre><code>- 重点不在于CHAR_MAX的取值是多少，而是在于i的取值范围是多少。 一般char的取值范围是-128到127，而u char 则是0~255，所以i的取值范围是0~255. 所以当CHAR_MAX常量大于255时，执行i++后，i不能表示256以上的数字，所以导致无限循环。 第二个问题： 重点在于函数中p的身份，他是一个指针，还是数组名；  如果是指针p，则p指向存放字符串常量的地址，返回p则是返回字符串常量地址值，调用函数结束字符串常量不会消失（是常量）。所以返回常量的地址不会出错。 如果是数组p，则函数会将字符串常量的字符逐个复制到p数组里面，返回p则是返回数组p，但是调用函数结束后p被销毁，里面的元素不存在了。 例子中p是数组名，所以会出错，p所指的地址是随机值。 若是把char p[]="hello";改成char *p="hello";就可以了。第三个问题：  重点在于str++;这实际的语句就是str=str+1;而str是数组名，数组名是常量，所以不能给常量赋值。（可以执行str+1，但是不能str=.）</code></pre><ol start="218"><li><p>输出正确的是：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">char</span> *a = <span class="string">"Trend"</span>;</span><br><span class="line">    <span class="keyword">char</span> **b = &amp;a;</span><br><span class="line">    *b = <span class="string">"commercial"</span>;</span><br><span class="line">    <span class="keyword">char</span> *c = ++a;</span><br><span class="line">    a = <span class="string">"talents."</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,*++c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>一开始a指向Trend，b指向指针a，后面commercial的内容赋给了指针b，然后就改变了指针a的内容，a就指向了commercial，指针c指向a所指的第二个字符，也就是o，虽然后面a又指向了talents，但是c已经指向了commercial，所以++c，c就指向了m，*++c就输出m字符</li></ul></li><li><p><font color="red">在C中使用malloc时不需要强制类型转换，因为在C中从void*到其他类型的指针是自动隐式转换的；</font> </p><p>  在C++中使用malloc时必须要强制类型转换，否则会报错，但在c++中一般用new而不用malloc；</p></li><li><p>int a[10]={ }; 编译器自动将所有元素置零</p></li><li><p>对于以下结构定义，(*p)-&gt;str++中的++加在（）</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> {</span> <span class="keyword">int</span> len; <span class="keyword">char</span> *str; } *p;</span><br></pre></td></tr></tbody></table></figure><ul><li>p是指针，可以写p-&gt;str,但是<code>（*p）</code>只能写<code>(*p).str;</code></li></ul></li><li><p>结构体和共用体变量都不能进行比较操作，因为类型不一样，无法比较，除非强制转换或重载比较运算符</p></li><li><p>如果想在一个地方定义结构体，而在其他地方定义实际的结构体变量那么就必须使用标记名；如果定义结构体的同时就创建该结构体变量，则可以省略结构体的标记名，此时该结构体是一次性的、</p></li><li><p>typedef不是用来定义新的数据类型，而是创建易于记忆的类型名，给类型取别名</p></li><li><p>结构总是以传值的方式传递给函数</p></li><li><p>不管b_val为多少，while(b_val)等价于while(b_val！=0)，while(!b_val)等价于while(b_val==0)</p></li><li><p>在行尾放一个 \ ，编译器会忽略行尾的换行符，起到续行的作用。</p></li><li><p>include <code>&lt;file&gt;</code> //在标准库及默认搜索目录中寻找将要 include 的文件</p><p>include “file” //先在当前目录中搜索文件，然后再到默认搜索目录中搜寻。</p><ul><li>因此标准库头文件应该用&lt;&gt;更快</li></ul></li><li><p>%要求两边都是整数，如果你非要一个整数%另外一个非整数的可以用强制类型转换把它转换成整形</p><p>即使分母为0，编译器也不会编译出错，输出结果为inf,表示无穷大</p></li><li><p>所谓声明，就是告诉编译器变量的类型，编译器并不为其分配内存，此变量已经定义过，故声明可以多次进行。例如，声明外部变量 a。 </p><p>  extern int a; </p><p>   （1）定义创建了变量，并为其分配内存；声明没有分配内存。  </p><p>   （2）一个变量在一定的区域内只能被定义一次，却可以被多次声明。</p></li><li><p>若有以下的定义:<code>int t[3][2];</code></p><p>t[2] 能正确表示 t 数组某元素的地址 。表述是否正确？</p><ul><li>正确</li></ul></li><li><p>程序行、语句、函数都是由字符构成的，字符是C语言的最小单位，最小执行单元是函数。</p></li><li><p>以下定义错误的是：                                        </p><ul><li><pre><code>struct A{A  _a;};<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>struct A{A* _a;};<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>struct A{A&amp; _a;};<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></tbody></table></figure>struct B;struct A{B&amp; _b;};struct B{A&amp; _a;};<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">答案：A </span><br><span class="line"></span><br><span class="line">  解释：struct成员类型不可以是它自己。</span><br></pre></td></tr></tbody></table></figure>因为会递归定义。理论上这样导致结构体的大小不能被计算（无限大小）。所以不能在结构体里的成员类型是结构体本身。但是成员可以定义为该结构体的指针。就像你上面这段代码。因为指针的大小是已知的（随编译器和操作系统而定）。所以可以定义为该结构体的指针，但不是该结构体。<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">234. 表头可以是原子或子表，表尾一定是子表</span><br><span class="line"></span><br><span class="line">235. 数组静态分配内存，链表动态分配内存；</span><br><span class="line">      数组在内存中连续，链表不连续；（对于数组，对象是放在堆内存中的，对象的引用是放在栈内存中的）</span><br><span class="line">      数组元素在栈区，链表元素在堆区；</span><br><span class="line">      数组利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度O(n)；</span><br><span class="line">      数组插入或删除元素的时间复杂度O(n)，链表的时间复杂度O(1)。</span><br><span class="line"></span><br><span class="line">236. 一般情况下,算法中基本操作重复执行的次数是问题规模n的某个函数,用T(n)表示,若有某个辅助函数f(n),使得当n趋近于无穷大时,T（n)/f(n)的极限值为不等于零的常数,则称f(n)是T(n)的同数量级函数.记作T(n)=O(f(n)),称O(f(n)) 为算法的渐进时间复杂度,简称时间复杂度.数学语言表达就是：存在足够大的正整数M，使得T（n）≤M×f（n）。</span><br><span class="line"></span><br><span class="line">237. 一个C源程序不是必须包含一个main()函数，而是必须包含一个**程序的入口函数**，**程序的入口函数不一定是main()函数**</span><br><span class="line"></span><br><span class="line">238. **1.default顾名思义是缺省情况，所有case条件不符合时才会执行；**</span><br><span class="line"></span><br><span class="line">     2.case语句若不加break，则当一条满足条件的case语句执行后，其下面的case语句都会执行。</span><br><span class="line"></span><br><span class="line">239. 必须在声明中对常量初始化，否则该常量值不确定且无法修改</span><br><span class="line"></span><br><span class="line">240. 注意本题的索引下标是从1开始 所以循环队列中最多有n个元素</span><br><span class="line">      在循环队列中,头指针指向队列当中的第一个元素,而尾指针指向最后一个元素的下一位</span><br><span class="line"></span><br><span class="line">     ​    假设循环队列的队尾指针是rear，队头是front，其中QueueSize为循环队列的最大长度。  </span><br><span class="line"></span><br><span class="line">        (1)    入队时队尾指针前进1：(rear+1)%QueueSize  </span><br><span class="line"></span><br><span class="line">        (2)    出队时队头指针前进1：(front+1)%QueueSize  </span><br><span class="line"></span><br><span class="line">        (3)    队列长度：(rear-front+QueueSize)%QueueSize  </span><br><span class="line"></span><br><span class="line">     ​    现有一循环队列，其队头指针为front，队尾指针为rear；循环队列长度为N。其队内有效长度为？(假设队头不存放数据)  </span><br><span class="line"></span><br><span class="line">     ​    答案：(rear-front+N)%N  </span><br><span class="line"></span><br><span class="line">        (4) 队空和队满的条件  </span><br><span class="line"></span><br><span class="line">     ​    为了区分队空还是堆满的情况，有多种处理方式：  </span><br><span class="line"></span><br><span class="line">        方式1：    牺牲一个单元来区分队空和队满，入队时少用一个队列单元，即约定以"队头指针在队尾指针的下一位置作为队满的标志"。  </span><br><span class="line"></span><br><span class="line">     ​    队满条件为：(rear+1)%QueueSize==front  </span><br><span class="line"></span><br><span class="line">     ​    队空条件为：front==rear  </span><br><span class="line"></span><br><span class="line">     ​    队列长度为：(rear-front++QueueSize)%QueueSize  </span><br><span class="line"></span><br><span class="line">        方式2：    增设表示队列元素个数的数据成员size，此时，队空和队满时都有front==rear。  </span><br><span class="line"></span><br><span class="line">     ​    队满条件为：size==QueueSize  </span><br><span class="line"></span><br><span class="line">     ​    队空条件为：size==0  </span><br><span class="line"></span><br><span class="line">        方式3：    增设tag数据成员以区分队满还是队空  </span><br><span class="line"></span><br><span class="line">     ​    tag表示0的情况下，若因删除导致front==rear，则队空；  </span><br><span class="line"></span><br><span class="line">     ​    tag等于1的情况，若因插入导致front==rear则队满</span><br><span class="line"></span><br><span class="line">241. 一个结构体指针变量虽然可以用来访问结构体变量或结构体数组元素的成员，但是，**结构体指针变量不能指向一个成员**。也就是说不允许取一个成员的地址来赋予它。</span><br><span class="line"></span><br><span class="line">     ```c</span><br><span class="line">     错误：</span><br><span class="line">     pdate = &amp;Date[1].year;//错误的</span><br></pre></td></tr></tbody></table></figure></code></pre></li></ul></li><li><h2 id="链表练习"><a href="#链表练习" class="headerlink" title="链表练习"></a>链表练习</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>{</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> sex[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> score[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">float</span> ave;</span><br><span class="line">}student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stuNode</span>{</span></span><br><span class="line">student stu;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stuNode</span> *<span class="title">next</span>;</span></span><br><span class="line">}stuNode, *stuList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入一个学生信息</span></span><br><span class="line"><span class="function">student <span class="title">inputAStu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//输入n 个学生信息， 返回学生数组 </span></span><br><span class="line"><span class="function">student* <span class="title">inputStu</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//输出学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStu</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//为学生数据进行按照平均分大小进行降序排序（分别使用冒泡排序、选择排序、插入排序、快速排序实现）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSortStu</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSortStu</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSortStu</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">patition</span><span class="params">(student *stu, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(student *stu,<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>;</span><br><span class="line"><span class="comment">//创建带有头结点的链表(头插法)</span></span><br><span class="line"><span class="function">stuList <span class="title">creat1</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//创建带有头结点的链表(尾插法)</span></span><br><span class="line"><span class="function">stuList <span class="title">creat1_2</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//创建不带头结点的链表 (相当于尾插法)(可以写头插法，但是没必要，简单来说就是创建带有头结点的链表【同上】，最后返回的是head-&gt;next)</span></span><br><span class="line"><span class="function">stuList <span class="title">creat2</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//统一使用使用不带头结点的遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(stuList head)</span></span>;</span><br><span class="line"><span class="comment">//为链表添加一个学生信息(按平均分有序插入(带头结点))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addStuNode</span><span class="params">(stuList *head, student stu)</span></span>;</span><br><span class="line"><span class="comment">//链表中删除姓名为delname的全部学生信息,删除成功返回1，否则返回0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delStuNode</span><span class="params">(stuList *head, <span class="keyword">char</span> *delname)</span></span>;</span><br><span class="line"><span class="comment">//将链表中的学生信息逆置(带头结点)【头插法实现逆置】</span></span><br><span class="line"><span class="function">stuList <span class="title">reverseStuList</span><span class="params">(stuList head)</span></span>;</span><br><span class="line"><span class="comment">//将两个学生有序的链表合并，并保证合并后链表仍然有序(带头结点)</span></span><br><span class="line"><span class="function">stuList <span class="title">mergeList</span><span class="params">(stuList L1, stuList L2)</span></span>;</span><br><span class="line"><span class="comment">//链表中删除平均分最小的节点</span></span><br><span class="line"><span class="function">stuList <span class="title">delStuMinAve</span><span class="params">(stuList head)</span></span>;</span><br><span class="line"><span class="comment">//找到两个链表的公共学生信息（以姓名为基准）合并成一个新的链表</span></span><br><span class="line"><span class="function">stuList <span class="title">getCommonStu</span><span class="params">(stuList L1, stuList L2)</span></span>;</span><br><span class="line"><span class="comment">//判断两个学生学生链表是否相交</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judgeInterSect</span><span class="params">(stuList L1, stuList L2)</span></span>;</span><br><span class="line"><span class="comment">//判断学生链表是否存在环</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judgeLoop</span><span class="params">(stuList head)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please input students number: "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">student *stu;</span><br><span class="line">stu = inputStu(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----输出学生数组----\n"</span>);</span><br><span class="line">printStu(stu, n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----输出排序后学生数组----\n"</span>);</span><br><span class="line"><span class="comment">//bubbleSortStu(stu, n);</span></span><br><span class="line"><span class="comment">//insertSortStu(stu, n);</span></span><br><span class="line"><span class="comment">//selectSortStu(stu, n);</span></span><br><span class="line">quickSort(stu, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">printStu(stu, n);</span><br><span class="line"></span><br><span class="line">stuList head;</span><br><span class="line"><span class="comment">//head = creat1(stu, n); //头结点头插法测试</span></span><br><span class="line">head = creat1_2(stu, n); <span class="comment">//头结点尾插法测试</span></span><br><span class="line"><span class="comment">//head = creat2(stu, n); //不带头结点尾插法测试</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----输出学生链表----\n"</span>);</span><br><span class="line">printList(head-&gt;next);</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("----Input插入学生信息---");</span></span><br><span class="line"><span class="comment">//student e = inputAStu();</span></span><br><span class="line"><span class="comment">//addStuNode(&amp;head, e);</span></span><br><span class="line"><span class="comment">//printf("----输出学生链表----\n");</span></span><br><span class="line"><span class="comment">//printList(head);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("\n----Input待删除学生姓名---\n");</span></span><br><span class="line"><span class="comment">//char delname[10];</span></span><br><span class="line"><span class="comment">//getchar();</span></span><br><span class="line"><span class="comment">//gets(delname);</span></span><br><span class="line"><span class="comment">//if(delStuNode(&amp;head, delname)){</span></span><br><span class="line"><span class="comment">//printf("delete successful!\n");</span></span><br><span class="line"><span class="comment">//}else{</span></span><br><span class="line"><span class="comment">//printf("no find this student!\n");</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("----逆置学生链表----\n");</span></span><br><span class="line"><span class="comment">//head = reverseStuList(head);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int n2;</span></span><br><span class="line"><span class="comment">//printf("please input students number: ");</span></span><br><span class="line"><span class="comment">//scanf("%d", &amp;n2);</span></span><br><span class="line"><span class="comment">//student *stu2;</span></span><br><span class="line"><span class="comment">//stu2 = inputStu(n2);</span></span><br><span class="line"><span class="comment">//printf("----输出学生数组----\n");</span></span><br><span class="line"><span class="comment">//printStu(stu2, n2);</span></span><br><span class="line"><span class="comment">//printf("----输出排序后学生数组----\n");</span></span><br><span class="line"><span class="comment">//quickSort(stu2, 0, n2 - 1);</span></span><br><span class="line"><span class="comment">//printStu(stu2, n2);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//stuList head2;</span></span><br><span class="line"><span class="comment">//head2 = creat1_2(stu2, n2); //头结点尾插法测试</span></span><br><span class="line"><span class="comment">//printf("----输出学生链表----\n");</span></span><br><span class="line"><span class="comment">//printList(head2-&gt;next);</span></span><br><span class="line"><span class="comment">//printf("----合并两个链表---\n");</span></span><br><span class="line"><span class="comment">//stuList head3 =  mergeList(head, head2);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//printf("----输出合并后学生链表----\n");</span></span><br><span class="line"><span class="comment">//printList(head3-&gt;next);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("----删除平均分最小的节点---\n");</span></span><br><span class="line"><span class="comment">//head = delStuMinAve(head);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int n2;</span></span><br><span class="line"><span class="comment">//printf("please input students number: ");</span></span><br><span class="line"><span class="comment">//scanf("%d", &amp;n2);</span></span><br><span class="line"><span class="comment">//student *stu2;</span></span><br><span class="line"><span class="comment">//stu2 = inputStu(n2);</span></span><br><span class="line"><span class="comment">//printf("----输出学生数组----\n");</span></span><br><span class="line"><span class="comment">//printStu(stu2, n2);</span></span><br><span class="line"><span class="comment">//printf("----输出排序后学生数组----\n");</span></span><br><span class="line"><span class="comment">//quickSort(stu2, 0, n2 - 1);</span></span><br><span class="line"><span class="comment">//printStu(stu2, n2);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//stuList head2;</span></span><br><span class="line"><span class="comment">//head2 = creat1_2(stu2, n2); //头结点尾插法测试</span></span><br><span class="line"><span class="comment">//printf("----输出学生链表----\n");</span></span><br><span class="line"><span class="comment">//printList(head2-&gt;next);</span></span><br><span class="line"><span class="comment">//printf("----找到公共学生信息链表---\n");</span></span><br><span class="line"><span class="comment">//stuList head3 =  getCommonStu(head, head2);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----输出删除的后学生链表----\n"</span>);</span><br><span class="line">printList(head-&gt;next);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入一个学生信息</span></span><br><span class="line"><span class="function">student <span class="title">inputAStu</span><span class="params">()</span></span>{</span><br><span class="line">student stu;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"该学生(依次输入学号、姓名、性别、三门课成绩 ）："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%s%s"</span>, &amp;stu.num, stu.name, stu.sex);</span><br><span class="line"><span class="keyword">int</span> j, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;stu.score[j]);</span><br><span class="line">sum += stu.score[j];</span><br><span class="line">}</span><br><span class="line">stu.ave = (<span class="keyword">float</span>)sum / <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> stu;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输入n 个学生信息， 返回学生数组 </span></span><br><span class="line"><span class="function">student* <span class="title">inputStu</span><span class="params">(<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">student *stu = (student *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(student) * n);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Input n students:\n"</span>); </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No.%d (依次输入学号、姓名、性别、三门课成绩 ）："</span>, ++count);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%s%s"</span>, &amp;stu[i].num, stu[i].name, stu[i].sex);</span><br><span class="line"><span class="keyword">int</span> j, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;stu[i].score[j]);</span><br><span class="line">sum += stu[i].score[j];</span><br><span class="line">}</span><br><span class="line">stu[i].ave = (<span class="keyword">float</span>)sum / <span class="number">3</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> stu; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStu</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d个学生：%d  %s  %s  %d  %d  %d  %.2f\n"</span>,i + <span class="number">1</span>, stu[i].num, stu[i].name, stu[i].sex, stu[i].score[<span class="number">0</span>], stu[i].score[<span class="number">1</span>], stu[i].score[<span class="number">2</span>], stu[i].ave);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//为学生数据进行按照平均分大小进行降序排序（分别使用冒泡排序、选择排序、插入排序、快速排序实现）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSortStu</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>{</span><br><span class="line">student temp;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++){</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = n - <span class="number">1</span>; j &gt; i; j--){</span><br><span class="line"><span class="keyword">if</span>(stu[j - <span class="number">1</span>].ave-stu[j].ave &lt; <span class="number">1e-6</span>){</span><br><span class="line">temp = stu[j];</span><br><span class="line">stu[j] = stu[j - <span class="number">1</span>];</span><br><span class="line">stu[j - <span class="number">1</span>] = temp;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>){<span class="comment">//此汤未发生交换则提前结束排序没因为已经有序</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSortStu</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">student temp;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++){</span><br><span class="line"><span class="keyword">if</span>(stu[i - <span class="number">1</span>].ave-stu[i].ave &lt; <span class="number">1e-6</span>){</span><br><span class="line">temp = stu[i];</span><br><span class="line"><span class="keyword">for</span>(j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; stu[j].ave-temp.ave &lt; <span class="number">1e-6</span>; j--){</span><br><span class="line">stu[j + <span class="number">1</span>] = stu[j];</span><br><span class="line">}</span><br><span class="line">stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSortStu</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">student temp; </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++){</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">max</span> = i;</span><br><span class="line"><span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; n; j++){</span><br><span class="line"><span class="keyword">if</span>(stu[<span class="built_in">max</span>].ave-stu[j].ave &lt; <span class="number">1e-6</span>){</span><br><span class="line"><span class="built_in">max</span> = j;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">max</span> != i){</span><br><span class="line">temp = stu[i];</span><br><span class="line">stu[i] = stu[<span class="built_in">max</span>];</span><br><span class="line">stu[<span class="built_in">max</span>] = temp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">patition</span><span class="params">(student *stu, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>{</span><br><span class="line">student pivot = stu[left];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left &lt; right){</span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; stu[right].ave-pivot.ave &lt;= <span class="number">1e-6</span>) right--;</span><br><span class="line">stu[left] = stu[right];</span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; stu[left].ave-pivot.ave &gt;= <span class="number">1e-6</span>) left++;</span><br><span class="line">stu[right] = stu[left];</span><br><span class="line">}</span><br><span class="line">stu[left] = pivot;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(student *stu,<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(left &lt; right){</span><br><span class="line"><span class="keyword">int</span> pation = patition(stu, left, right);</span><br><span class="line">quickSort(stu, left, pation - <span class="number">1</span>);</span><br><span class="line">quickSort(stu, pation + <span class="number">1</span>, right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//创建带有头结点的链表(头插法)</span></span><br><span class="line"><span class="function">stuList <span class="title">creat1</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>{</span><br><span class="line">stuList head = (stuNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stuNode));</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">stuList p;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line">p = (stuNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stuNode));</span><br><span class="line">p-&gt;stu = stu[i];</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//创建带有头结点的链表(尾插法)</span></span><br><span class="line"><span class="function">stuList <span class="title">creat1_2</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>{</span><br><span class="line">stuList head = (stuNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stuNode));</span><br><span class="line">stuList p, r = head;<span class="comment">//定义r为尾指针</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line">p = (stuNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stuNode));</span><br><span class="line">p-&gt;stu = stu[i];</span><br><span class="line">r-&gt;next = p;</span><br><span class="line">r = p;</span><br><span class="line">}</span><br><span class="line">r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建不带头结点的链表 (相当于尾插法)(可以写头插法，但是没必要，简单来说就是创建带有头结点的链表【同上】，最后返回的是head-&gt;next)</span></span><br><span class="line"><span class="function">stuList <span class="title">creat2</span><span class="params">(student *stu, <span class="keyword">int</span> n)</span></span>{</span><br><span class="line">stuList head = (stuNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stuNode));</span><br><span class="line">stuList p, q;</span><br><span class="line">head = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line">p = (stuNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stuNode));</span><br><span class="line">p-&gt;stu = stu[i];</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">NULL</span>){</span><br><span class="line">head = p;</span><br><span class="line">q = head;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">q-&gt;next = p;</span><br><span class="line">q = p;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//统一使用使用不带头结点的遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(stuList head)</span></span>{</span><br><span class="line">stuList p = head;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d个节点："</span>, ++i);</span><br><span class="line">student stu = p-&gt;stu;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d  %s   %s  %d  %d  %d  %.2f\n"</span>, stu.num, stu.name, stu.sex, stu.score[<span class="number">0</span>], stu.score[<span class="number">1</span>], stu.score[<span class="number">2</span>], stu.ave);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//为链表添加一个学生信息(按平均分有序插入(带头结点))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addStuNode</span><span class="params">(stuList *head, student stu)</span></span>{</span><br><span class="line">stuList p = *head, s = (stuList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stuNode));</span><br><span class="line">s-&gt;stu = stu;</span><br><span class="line">s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next-&gt;stu.ave - stu.ave &lt;= <span class="number">1e-6</span>){</span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>){<span class="comment">//如果当前学生的成绩最小，即需要插入到链表末尾</span></span><br><span class="line">p-&gt;next = s;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//链表中删除姓名为delname的全部学生信息,删除成功返回1，否则返回0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delStuNode</span><span class="params">(stuList *head, <span class="keyword">char</span> *delname)</span></span>{</span><br><span class="line">stuList p = *head, q;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;next-&gt;stu.name, delname) == <span class="number">0</span>){</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">free</span>(q); </span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//将链表中的学生信息逆置(带头结点)【头插法实现逆置】</span></span><br><span class="line"><span class="function">stuList <span class="title">reverseStuList</span><span class="params">(stuList head)</span></span>{</span><br><span class="line">stuList p = head-&gt;next, q;</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>){</span><br><span class="line">q = p-&gt;next; <span class="comment">//q节点暂存p的后继</span></span><br><span class="line">p-&gt;next = head-&gt;next; <span class="comment">//头插遍历</span></span><br><span class="line">head-&gt;next = p;</span><br><span class="line">p = q;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//将两个学生有序的链表合并，并保证合并后链表仍然有序(带头结点)</span></span><br><span class="line"><span class="function">stuList <span class="title">mergeList</span><span class="params">(stuList L1, stuList L2)</span></span>{</span><br><span class="line">stuList head = (stuList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stuNode)), p1 = L1-&gt;next, p2 = L2-&gt;next, r = head;</span><br><span class="line">stuNode *s;</span><br><span class="line"><span class="keyword">while</span>(p1 != <span class="literal">NULL</span> &amp;&amp; p2 != <span class="literal">NULL</span>){</span><br><span class="line">s = (stuNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stuNode));</span><br><span class="line"><span class="keyword">if</span>(p1-&gt;stu.ave - p2-&gt;stu.ave &lt; <span class="number">1e-6</span>){<span class="comment">//归并思想 大的先插（尾插法）</span></span><br><span class="line">s-&gt;stu = p2-&gt;stu;</span><br><span class="line">r-&gt;next = s;</span><br><span class="line">r = s;</span><br><span class="line">p2 = p2-&gt;next;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">s-&gt;stu = p1-&gt;stu;</span><br><span class="line">r-&gt;next = s;</span><br><span class="line">r = s;</span><br><span class="line">p1 = p1-&gt;next;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(p1){</span><br><span class="line">r-&gt;next = p1;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(p2){</span><br><span class="line">r-&gt;next = p2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//链表中删除平均分最小的节点</span></span><br><span class="line"><span class="function">stuList <span class="title">delStuMinAve</span><span class="params">(stuList head)</span></span>{</span><br><span class="line">stuList L = head, p = head-&gt;next;</span><br><span class="line"><span class="keyword">char</span> delname[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">float</span> <span class="built_in">min</span> = p-&gt;stu.ave;</span><br><span class="line"><span class="built_in">strcpy</span>(delname, p-&gt;stu.name);</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">if</span>(p-&gt;stu.ave - <span class="built_in">min</span> &lt; <span class="number">1e-6</span>){</span><br><span class="line"><span class="built_in">min</span> = p-&gt;stu.ave;</span><br><span class="line"><span class="built_in">strcpy</span>(delname, p-&gt;stu.name);</span><br><span class="line">}</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//直接调用前面写好的接口</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, delname);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(delStuNode(&amp;L, delname)){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"成功\n"</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"失败\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//找到两个链表的公共学生信息（以姓名为基准）合并成一个新的链表</span></span><br><span class="line"><span class="function">stuList <span class="title">getCommonStu</span><span class="params">(stuList L1, stuList L2)</span></span>{</span><br><span class="line">stuList head = (stuList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stuNode)), p1 = L1-&gt;next, p2 = L2-&gt;next, r = head;</span><br><span class="line">stuNode *s;</span><br><span class="line"><span class="keyword">while</span>(p1 != <span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">while</span>(p2 != <span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(p1-&gt;stu.name, p2-&gt;stu.name) == <span class="number">0</span>){</span><br><span class="line">s = (stuNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stuNode));</span><br><span class="line">s-&gt;stu = p1-&gt;stu;</span><br><span class="line">r-&gt;next = s;</span><br><span class="line">r = s;</span><br><span class="line">}</span><br><span class="line">p2 = p2-&gt;next;</span><br><span class="line">}</span><br><span class="line">p2 = L2-&gt;next;</span><br><span class="line">p1 = p1-&gt;next;</span><br><span class="line">}</span><br><span class="line">r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//判断两个学生学生链表是否相交</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judgeInterSect</span><span class="params">(stuList L1, stuList L2)</span></span>{</span><br><span class="line">stuList p1 = L1, p2 = L2;</span><br><span class="line"><span class="keyword">while</span>(p1-&gt;next != <span class="literal">NULL</span>){</span><br><span class="line">p1 = p1-&gt;next;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(p2-&gt;next != <span class="literal">NULL</span>){</span><br><span class="line">p2 = p2-&gt;next;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//如果两个链表相交，那么他们的最后一个节点一定相同</span></span><br><span class="line"><span class="keyword">return</span> p1 == p2;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//判断学生链表是否存在环</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judgeLoop</span><span class="params">(stuList head)</span></span>{</span><br><span class="line">stuList p1 = head-&gt;next, p2 = head-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断有环的问题，一般使用快慢指针，快指针一次走两步，慢指针一次走一步，那么最终</span></span><br><span class="line"><span class="comment">//如果有环，那么快指针和慢指针一定会相遇，如果无环，快指针一定能先走到NULL节点，此时退出</span></span><br><span class="line"><span class="keyword">while</span>(p2 != <span class="literal">NULL</span>){</span><br><span class="line">p2 = p2-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p2 != <span class="literal">NULL</span>){</span><br><span class="line">p2 = p2-&gt;next;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(p1 == p2){</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">p1 = p1-&gt;next;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="243"><li><h3 id="栈队列"><a href="#栈队列" class="headerlink" title="栈队列"></a>栈队列</h3><p>1、堆栈与队列的基本概念与操作</p><p>1）、堆栈的基本概念与操作</p><pre><code>堆栈：只能在表的一端进行操作的线性表，一般的操作就是插入和删除，允许操作的一端称为栈顶，栈顶元素由栈顶指针给出，没有元素时为空栈后进先出，先进后出插入（入栈，进栈）删除（出栈，退栈）判空判满检索当前栈顶元素特殊性：1、操作时一般线性表的子集；2、插入和删除的位置受到限制</code></pre></li></ol><pre><code>​    2)、队列的基本概念与操作    队列：队列简称队，是一种只能由一端进行插入，另一端进行删除的线性表。进行插入的一端称为队尾，用rear表示，删除的一端称为队头，用front指针表示    先进先出，后进后出    插入（进队，入队）    删除（出队，退队）    判空    检索当前队头元素    创建空队    特殊性：1、操作时一般线性表的子集；2、插入和删除的位置受到限制​    ​    2、堆栈与队列的顺序存储结构与链式存储结构的构造原理1）、堆栈的顺序存储结构    一维数组SCACK[0..n-1],定义一个整型变量给出栈顶元素，但是不同于数组，数组时静态结构，堆栈是动态结构   溢出：上溢：栈满时进行插入操作 top = n-1；下溢：栈空时进行删除操作  top = -1   定义：<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000</span></span><br><span class="line"><span class="keyword">int</span> STACK[M];</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">-1</span>;  <span class="comment">//初始的时候top为-1，表示栈空</span></span><br></pre></td></tr></tbody></table></figure>2)、堆栈的链式存储结构    用线性链表表示，栈顶指针为NULL是为空<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line">     <span class="keyword">int</span> data;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">link</span>;</span></span><br><span class="line">}STNode, *STLink;</span><br></pre></td></tr></tbody></table></figure>3）、队列的顺序存储结构<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一维数组QUEUE[<span class="number">0.</span>.n<span class="number">-1</span>],两个变量front和rear指出队头和队尾元素的位置。</span><br><span class="line">约定：rear指出实际队尾元素的位置</span><br><span class="line">      front指出队头元素的前一个位置</span><br><span class="line">      初始队列为空front = <span class="number">-1</span> ； rear = <span class="number">-1</span>； </span><br><span class="line">      判断队列为空的条件：front = rear；</span><br><span class="line">      </span><br><span class="line">#define M <span class="number">1000</span></span><br><span class="line"><span class="keyword">int</span> QUEUE[M];</span><br><span class="line"><span class="keyword">int</span> front, rear;</span><br></pre></td></tr></tbody></table></figure>4）、队列的链式存储结构<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用线性链表表示，rear指出队尾，front指出队头</span><br><span class="line">空队列 front = <span class="literal">NULL</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> struct node{ </span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">link</span>;</span></span><br><span class="line">}QNode, *QLink;</span><br></pre></td></tr></tbody></table></figure>3、在不同存储结构上对堆栈和队列进行插入和删除操作的算法设计1）、顺序存储结构上对堆栈进行操作</code></pre><p>​       </p><pre><code><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">初始化</span><br><span class="line">     </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> &amp;top)</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">       top = <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">     </span><br><span class="line">  判空</span><br><span class="line">     </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Empty</span><span class="params">(<span class="keyword">int</span> top)</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">       <span class="keyword">return</span> top == <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">     </span><br><span class="line">  判满</span><br><span class="line">     </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">FULL</span><span class="params">(<span class="keyword">int</span> top)</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">       <span class="keyword">return</span> top == M<span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">     </span><br><span class="line">  插入（进栈）</span><br><span class="line">     </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> Stack[], <span class="keyword">int</span> &amp;top, <span class="keyword">int</span> element)</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">       <span class="keyword">if</span>(FULL(top)</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">else</span>{</span><br><span class="line">           Stack[++top] = element;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       }</span><br><span class="line">  }</span><br><span class="line">     </span><br><span class="line">  删除（出栈）</span><br><span class="line">  <span class="keyword">int</span> Pop(<span class="keyword">int</span> Stack[], <span class="keyword">int</span> &amp;top, <span class="keyword">int</span> element)</span><br><span class="line">  {</span><br><span class="line">       <span class="keyword">if</span>(Empty(top))</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">else</span>{</span><br><span class="line">           element = Stack[top--];</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>2）、链式存储上对堆栈进行操作<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">初始化</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(STLink &amp;top)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    top = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">判空</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Empty</span><span class="params">(STLink top)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> top == <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">插入（进栈）不用判满</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(STLink &amp;top, <span class="keyword">int</span> item)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    STLink p;</span><br><span class="line">    <span class="keyword">if</span>(!(p = (STLink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(STNode))))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        p-&gt;data = item;</span><br><span class="line">        p-&gt;link = top;</span><br><span class="line">        top = p;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">删除（出栈）</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(STLink &amp;top, <span class="keyword">int</span> &amp;item)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    STLink p;</span><br><span class="line">    <span class="keyword">if</span>(Empty(top))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        p = top;</span><br><span class="line">        item = p-&gt;data;</span><br><span class="line">        top = top-&gt;link;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>​    3）、在顺序存储结构上对队列进行操作    初始化    void Init(int &amp;front, int &amp;rear)    {        front = -1;        rear = -1;    }    判空    int Empty(int front, int rear)    {        return rear == front;    }    插入     int ADDQ(int Queue[], int &amp;rear, int item)    {        if(rear == M-1)    //假溢出            return 0;        else{            Queue[++rear] = item;            return 1;        }    }    删除     int DELQ(int Queue[], int &amp;front, int rear, int &amp;item)    {        if(Empty(front, rear))            return 0;        else{            item = Queue[--front];            return 1;        }    }    循环队列：将队列想象成头尾相连的表，使得队头删除的元素的空间能够尽可能被利用    算法1：删除之后将每个元素前移一位。            缺点：浪费空间    算法2：求余    添加：    int ADDQ(int Q[], int &amp;rear, int &amp;front, int item)    {        if((rear+1)%M == front)            return 0;        else{            Q[++rear%M] = item;            return 1;        }    }    删除：    int DELQ(int Q[], int &amp;front, int &amp;rear, int &amp;item)    {        if(front == rear)            return 0;        else{            front = (front + 1)%M;            item = Q[front];            return 1;        }    }4）、在链式存储结构上对队列进行操作<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">初始化</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(QLink front, QLink rear)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    front = <span class="literal">NULL</span>;</span><br><span class="line">    rear = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">判空</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Empty</span><span class="params">(QLink front)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> fron == <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">插入</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ADDQ</span><span class="params">(QLink &amp;front, QLink &amp;rear, <span class="keyword">int</span> item)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QLink p;</span><br><span class="line">    <span class="keyword">if</span>(!(p = (QLink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode))))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        p-&gt;data = item;</span><br><span class="line">        p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(front == <span class="literal">NULL</span>)</span><br><span class="line">            front = p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            rear-&gt;link = p;</span><br><span class="line">        </span><br><span class="line">        rear = p;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">删除 </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DELQ</span><span class="params">(QLink &amp;front, QLink &amp;rear, <span class="keyword">int</span> &amp;item)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QLink p;</span><br><span class="line">    <span class="keyword">if</span>(Empty(front, rear))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        p = front;</span><br><span class="line">        front = front-&gt;link;</span><br><span class="line">        item = p-&gt;data;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></code></pre><p>​     </p><ol start="244"><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 成都信息工程大学807程序设计基础易错知识点汇总&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="考研" scheme="https://liudufu.github.io/categories/%E8%80%83%E7%A0%94/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E8%80%83%E7%A0%94/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://liudufu.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C" scheme="https://liudufu.github.io/tags/C/"/>
    
      <category term="考研" scheme="https://liudufu.github.io/tags/%E8%80%83%E7%A0%94/"/>
    
      <category term="807" scheme="https://liudufu.github.io/tags/807/"/>
    
  </entry>
  
  <entry>
    <title>servlet基础</title>
    <link href="https://liudufu.github.io/Servlet_Basics/"/>
    <id>https://liudufu.github.io/Servlet_Basics/</id>
    <published>2020-12-08T13:30:39.000Z</published>
    <updated>2020-12-08T13:33:03.918Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p></blockquote><a id="more"></a><h2 id="🌸Servlet-简介"><a href="#🌸Servlet-简介" class="headerlink" title="🌸Servlet 简介"></a>🌸Servlet 简介</h2><h3 id="🍁Servlet-是什么？"><a href="#🍁Servlet-是什么？" class="headerlink" title="🍁Servlet 是什么？"></a>🍁Servlet 是什么？</h3><p>java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p><p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p><ul><li>性能明显更好。</li><li>Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。</li><li>Servlet 是独立于平台的，因为它们是用 Java 编写的。</li><li>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。</li><li>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</li></ul><h3 id="🍁Servlet-架构"><a href="#🍁Servlet-架构" class="headerlink" title="🍁Servlet 架构"></a>🍁Servlet 架构</h3><p><a href="https://imgchr.com/i/dX9zf1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX9zf1.png" alt="dX9zf1.png"></a></p><h3 id="🍁Servlet在做什么"><a href="#🍁Servlet在做什么" class="headerlink" title="🍁Servlet在做什么"></a>🍁Servlet在做什么</h3><ul><li>读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li><li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li><li>处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li><li>发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li><li>发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li></ul><hr><h2 id="🌸Servlet-创建的三种方式"><a href="#🌸Servlet-创建的三种方式" class="headerlink" title="🌸Servlet 创建的三种方式"></a>🌸Servlet 创建的三种方式</h2><h3 id="🍁实现-Servlet-接口"><a href="#🍁实现-Servlet-接口" class="headerlink" title="🍁实现 Servlet 接口"></a>🍁实现 Servlet 接口</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Servlet的生命周期:从Servlet被创建到Servlet被销毁的过程</span></span><br><span class="line"><span class="comment">//一次创建，到处服务</span></span><br><span class="line"><span class="comment">//一个Servlet只会有一个对象，服务所有的请求</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.实例化（使用构造方法创建对象）</span></span><br><span class="line"><span class="comment"> * 2.初始化  执行init方法</span></span><br><span class="line"><span class="comment"> * 3.服务     执行service方法</span></span><br><span class="line"><span class="comment"> * 4.销毁    执行destroy方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public ServletDemo1(){}</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//生命周期方法:当Servlet第一次被创建对象时执行该方法,该方法在整个生命周期中只执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">                System.out.println(<span class="string">"=======init========="</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生命周期方法:对客户端响应的方法,该方法会被执行多次，每次请求该servlet都会执行该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest arg0, ServletResponse arg1)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"hehe"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生命周期方法:当Servlet被销毁时执行该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"******destroy**********"</span>);</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//当停止tomcat时也就销毁的servlet。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁继承-GenericServlet-类"><a href="#🍁继承-GenericServlet-类" class="headerlink" title="🍁继承 GenericServlet 类"></a>🍁继承 GenericServlet 类</h3><p>这种方法我们极少用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest arg0, ServletResponse arg1)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"heihei"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁继承-HttpServlet-方法"><a href="#🍁继承-HttpServlet-方法" class="headerlink" title="🍁继承 HttpServlet 方法"></a>🍁继承 HttpServlet 方法</h3><p><code>经常用</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"haha"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"ee"</span>);</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸HttpServlet、GenericServlet-和-Servlet-的关系"><a href="#🌸HttpServlet、GenericServlet-和-Servlet-的关系" class="headerlink" title="🌸HttpServlet、GenericServlet 和 Servlet 的关系"></a>🌸HttpServlet、GenericServlet 和 Servlet 的关系</h2><blockquote><p>对于一个 Servlet 类，我们日常最常用的方法是继承自 HttpServlet 类，提供了 Http 相关的方法，HttpServlet 扩展了 GenericServlet 类，而 GenericServlet 类又实现了 Servlet 类和 ServletConfig 类。</p></blockquote><h3 id="🍁Servlet"><a href="#🍁Servlet" class="headerlink" title="🍁Servlet"></a>🍁Servlet</h3><p>Servlet 类提供了五个方法，其中三个生命周期方法和两个普通方法，关于 Servlet 类的方法，不再赘述</p><h3 id="🍁GenericServlet"><a href="#🍁GenericServlet" class="headerlink" title="🍁GenericServlet"></a>🍁GenericServlet</h3><p><code>GenericServlet</code> 是一个抽象类，实现了 Servlet 接口，并且对其中的 <code>init()</code> 和 <code>destroy()</code> 和 <code>service()</code> 提供了默认实现。在 <code>GenericServlet</code> 中，主要完成了以下任务：</p><ul><li>将 init() 中的 ServletConfig 赋给一个类级变量，可以由 getServletConfig 获得；</li><li>为 Servlet 所有方法提供默认实现；</li><li>可以直接调用 ServletConfig 中的方法；</li></ul><p>基本的结构如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>,<span class="title">ServletConfig</span></span>{</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//GenericServlet通过将ServletConfig赋给类级变量</span></span><br><span class="line">   <span class="keyword">private</span> trServletConfig servletConfig;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.servletConfig=servletConfig;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*自定义init()的原因是：如果子类要初始化必须覆盖父类的init() 而使它无效 这样</span></span><br><span class="line"><span class="comment">       this.servletConfig=servletConfig不起作用 这样就会导致空指针异常 这样如果子类要初始化，</span></span><br><span class="line"><span class="comment">       可以直接覆盖不带参数的init()方法 */</span></span><br><span class="line">      <span class="keyword">this</span>.init();</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//自定义的init()方法，可以由子类覆盖  </span></span><br><span class="line">   <span class="comment">//init()不是生命周期方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">  </span><br><span class="line">   }</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//实现service()空方法，并且声明为抽象方法，强制子类必须实现service()方法 </span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request,ServletResponse response)</span> </span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> ServletException,java.io.IOException</span>{</span><br><span class="line">   }</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//实现空的destroy方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>{ }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>如果继承这个类的话，我们必须重写 service() 方法来对处理请求。</strong></p><h3 id="🍁HttpServlet"><a href="#🍁HttpServlet" class="headerlink" title="🍁HttpServlet"></a>🍁HttpServlet</h3><p>HttpServlet 也是一个抽象类，它进一步继承并封装了 GenericServlet，使得使用更加简单方便，由于是扩展了 Http 的内容，所以还需要使用 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code>，这两个类分别是 ServletRequest 和 <code>ServletResponse</code> 的子类。代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>{</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//HttpServlet中的service()</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                       HttpServletResponse httpServletResponse)</span></span>{</span><br><span class="line">        <span class="comment">//该方法通过httpServletRequest.getMethod()判断请求类型调用doGet() doPost()</span></span><br><span class="line">   }</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//必须实现父类的service()方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest,ServletResponse servletResponse)</span></span>{</span><br><span class="line">      HttpServletRequest request;</span><br><span class="line">      HttpServletResponse response;</span><br><span class="line">      <span class="keyword">try</span>{</span><br><span class="line">         request=(HttpServletRequest)servletRequest;</span><br><span class="line">         response=(HttpServletResponse)servletResponse;</span><br><span class="line">      }<span class="keyword">catch</span>(ClassCastException){</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"non-http request or response"</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">//调用service()方法</span></span><br><span class="line">      <span class="keyword">this</span>.service(request,response);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们可以看到，HttpServlet 中对原始的 Servlet 中的方法都进行了默认的操作，不需要显式的销毁初始化以及 <code>service()</code>，在 HttpServlet 中，自定义了一个新的 <code>service()</code> 方法，其中通过 getMethod() 方法判断请求的类型，从而调用 <code>doGet()</code> 或者 <code>doPost()</code> 处理 <code>get,post</code> 请求，使用者只需要继承 <code>HttpServlet</code>，然后重写 <code>doPost()</code> 或者 <code>doGet()</code> 方法处理请求即可。</p><p><strong>我们一般都使用继承 HttpServlet 的方式来定义一个 servlet。</strong></p><hr><h2 id="🌸Servlet环境配置（Eclipse）"><a href="#🌸Servlet环境配置（Eclipse）" class="headerlink" title="🌸Servlet环境配置（Eclipse）"></a>🌸Servlet环境配置（Eclipse）</h2><p>使用 Eclipse 来搭建 JSP 开发环境，首先我们分别下载一下软件包</p><ul><li><strong>Eclipse J2EE：</strong><a href="http://www.eclipse.org/downloads/" target="_blank" rel="noopener">http://www.eclipse.org/downloads/</a></li><li><strong>Tomcat：</strong><a href="http://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">http://tomcat.apache.org/download-70.cgi</a></li></ul><h3 id="🍁Tomcat-下载安装"><a href="#🍁Tomcat-下载安装" class="headerlink" title="🍁Tomcat 下载安装"></a>🍁Tomcat 下载安装</h3><p><a href="https://imgchr.com/i/dXrmcQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXrmcQ.png" alt="dXrmcQ.png"></a></p><p>下载之后，将压缩包解压到盘（你可以自己选择）：</p><p><a href="https://imgchr.com/i/dXrEh8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXrEh8.png" alt="dXrEh8.png"></a></p><p>注意目录名不能有中文和空格。目录介绍如下：</p><ul><li>bin：二进制执行文件。里面最常用的文件是<strong>startup.bat</strong>，如果是 Linux 或 Mac 系统启动文件为 <strong>startup.sh</strong>。</li><li>conf:配置目录。里面最核心的文件是<strong>server.xml</strong>。可以在里面改端口号等。默认端口号是8080，也就是说，此端口号不能被其他应用程序占用。</li><li>lib：库文件。tomcat运行时需要的jar包所在的目录</li><li>logs：日志</li><li>temp：临时产生的文件，即缓存</li><li>webapps：web的应用程序。<strong>web应用放置到此目录下浏览器可以直接访问</strong></li><li>work：编译以后的class文件。</li></ul><p>接着我们可以双击 startup.bat 启动 Tomcat，弹出如下界面：</p><p><a href="https://imgchr.com/i/dXrAtf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXrAtf.png" alt="dXrAtf.png"></a></p><p>这个时候，本地的服务器就已经搭建起来了。如果想关闭服务器，可以直接关闭上面的窗口，或者在里面输入Ctrl+C禁止服务。</p><p>接着我们在浏览器中输入 <strong><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></strong>，如果弹出如下界面，表示tomcat安装成功并且启动起来了：</p><p><a href="https://imgchr.com/i/dXre1g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXre1g.png" alt="dXre1g.png"></a></p><p>首先在apache-tomcat-9.0.37\webapps\ROOT目录中新建一个jsp文件：</p><p><a href="https://imgchr.com/i/dXrZ9S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXrZ9S.png" alt="dXrZ9S.png"></a></p><p>test.jsp 文件代码如下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.<span class="keyword">print</span>(<span class="string">"云澈 : https://liudufu.github.io"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><p>接着在浏览器中访问地址 <strong><a href="http://localhost:8080/test.jsp" target="_blank" rel="noopener">http://localhost:8080/test.jsp</a></strong>, 输出结果如下：</p><p><a href="https://imgchr.com/i/dX6yCV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX6yCV.png" alt="dX6yCV.png"></a></p><h3 id="🍁Tomcat-和-Eclipse-相关联"><a href="#🍁Tomcat-和-Eclipse-相关联" class="headerlink" title="🍁Tomcat 和 Eclipse 相关联"></a>🍁Tomcat 和 Eclipse 相关联</h3><p>打开Java EE ，选择菜单栏Windows–&gt;preferences（Mac 系统为 Eclipse–&gt;偏好设置），弹出如下界面：</p><p><img src="https://www.runoob.com/wp-content/uploads/2016/01/232111301681549.png" alt=""></p><p>上图中，点击”add”的添加按钮，弹出如下界面：</p><p><a href="https://imgchr.com/i/dXcFKg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXcFKg.png" alt="dXcFKg.png"></a></p><p>点击 “Finish”，完成配置。</p><h3 id="🍁创建实例"><a href="#🍁创建实例" class="headerlink" title="🍁创建实例"></a>🍁创建实例</h3><p>选择 “File–&gt;New–&gt;Dynamic Web Project”，创建 TomcatTest 项目：</p><p><a href="https://imgchr.com/i/dX2r4I" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2r4I.png" alt="dX2r4I.png"></a></p><p><a href="https://imgchr.com/i/dX2BEd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2BEd.png" alt="dX2BEd.png"></a></p><p>工程文件结构：</p><p><a href="https://imgchr.com/i/dX2wHH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2wHH.png" alt="dX2wHH.png"></a></p><p>上图中各个目录解析：</p><ul><li>deployment descriptor：部署的描述。</li><li>Web App Libraries：自己加的包可以放在里面。</li><li>build：放入编译之后的文件。</li><li>WebContent:放进写入的页面。</li></ul><p>在WebContent文件夹下新建一个test.jsp文件。在下图中可以看到它的默认代码：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>接着我们修改下test.jsp文件代码如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</span><br><span class="line">    pageEncoding="UTF-8"%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</span><br><span class="line">&lt;title&gt;云澈&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.println("Hello World!");</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行该项目:</p><p><a href="https://imgchr.com/i/dX2DUA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2DUA.png" alt="dX2DUA.png"></a></p><p>浏览器访问 <code>http://localhost:8080/TomcatTest/test.jsp</code>, 即可输出正常结果：</p><p><a href="https://imgchr.com/i/dX2dDe" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2dDe.png" alt="dX2dDe.png"></a></p><h3 id="🍁Servlet-实例创建"><a href="#🍁Servlet-实例创建" class="headerlink" title="🍁Servlet 实例创建"></a>🍁Servlet 实例创建</h3><p>使用以上环境创建 Servlet 文件，选择 “File–&gt;New–&gt;Servlet”:</p><p><a href="https://imgchr.com/i/dX268P" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX268P.png" alt="dX268P.png"></a></p><p>HelloServlet.java 代码如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yunche.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/HelloServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloServlet</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// 使用 GBK 设置中文正常显示</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">"GBK"</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">"云澈：https://liudufu.github.io"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建 /TomcatTest/WebContent/WEB-INF/web.xml 文件（如果没有），代码如下所示：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee   </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">     <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yunche.test.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/HelloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>接着重启 Tomcat，浏览器访问 <code>http://localhost:8080/TomcatTest/HelloServlet：</code></p><p><a href="https://imgchr.com/i/dX2yCt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2yCt.png" alt="dX2yCt.png"></a></p><hr><h2 id="🌸Servlet-生命周期"><a href="#🌸Servlet-生命周期" class="headerlink" title="🌸Servlet 生命周期"></a>🌸Servlet 生命周期</h2><p>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><ul><li>Servlet 通过调用 <strong>init ()</strong> 方法进行初始化。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 通过调用 <strong>destroy()</strong> 方法终止（结束）。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><p>现在让我们详细讨论生命周期的方法。</p><h3 id="🍁init-方法"><a href="#🍁init-方法" class="headerlink" title="🍁init() 方法"></a>🍁init() 方法</h3><p>init 方法被设计成只调用一次。它在第一次创建 Servlet 时被调用，在后续每次用户请求时不再调用。因此，它是用于一次性初始化，就像 Applet 的 init 方法一样。</p><p>Servlet 创建于用户第一次调用对应于该 Servlet 的 URL 时，但是您也可以指定 Servlet 在服务器第一次启动时被加载。</p><p>当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，适当的时候移交给 doGet 或 doPost 方法。init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。</p><p>init 方法的定义如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">  <span class="comment">// 初始化代码...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁service-方法"><a href="#🍁service-方法" class="headerlink" title="🍁service() 方法"></a>🍁service() 方法</h3><p>service() 方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。</p><p>每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。service() 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法。</p><p>下面是该方法的特征：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void service(ServletRequest request, </span><br><span class="line">                    ServletResponse response) </span><br><span class="line">      throws ServletException, IOException{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>service() 方法由容器调用，service 方法在适当的时候调用 doGet、doPost、doPut、doDelete 等方法。所以，您不用对 service() 方法做任何动作，您只需要根据来自客户端的请求类型来重写 doGet() 或 doPost() 即可。</p><p>doGet() 和 doPost() 方法是每次服务请求中最常用的方法。下面是这两种方法的特</p><h3 id="🍁doGet-方法"><a href="#🍁doGet-方法" class="headerlink" title="🍁doGet() 方法"></a>🍁doGet() 方法</h3><p>GET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 METHOD 的 HTML 表单，它由 doGet() 方法处理。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                  HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">    <span class="comment">// Servlet 代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁doPost-方法"><a href="#🍁doPost-方法" class="headerlink" title="🍁doPost() 方法"></a>🍁doPost() 方法</h3><p>POST 请求来自于一个特别指定了 METHOD 为 POST 的 HTML 表单，它由 doPost() 方法处理。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                   HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">    <span class="comment">// Servlet 代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁destroy-方法"><a href="#🍁destroy-方法" class="headerlink" title="🍁destroy() 方法"></a>🍁destroy() 方法</h3><p>destroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。</p><p>在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。destroy 方法定义如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="comment">// 终止化代码...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁架构图"><a href="#🍁架构图" class="headerlink" title="🍁架构图"></a>🍁架构图</h3><p>下图显示了一个典型的 Servlet 生命周期方案。</p><ul><li>第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。</li><li>Servlet 容器在调用 service() 方法之前加载 Servlet。</li><li>然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。</li></ul><p><a href="https://imgchr.com/i/dxHFxg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/01/dxHFxg.png" alt="dxHFxg.png"></a></p><hr><h2 id="🌸Servlet-实例"><a href="#🌸Servlet-实例" class="headerlink" title="🌸Servlet 实例"></a>🌸Servlet 实例</h2><p>Servlet 是服务 HTTP 请求并实现 <strong>javax.servlet.Servlet</strong> 接口的 Java 类。Web 应用程序开发人员通常编写 Servlet 来扩展 javax.servlet.http.HttpServlet，并实现 Servlet 接口的抽象类专门用来处理 HTTP 请求。</p><h3 id="🍁Hello-World-示例代码"><a href="#🍁Hello-World-示例代码" class="headerlink" title="🍁Hello World 示例代码"></a>🍁Hello World 示例代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 执行必需的初始化</span></span><br><span class="line">      message = <span class="string">"Hello World"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 实际的逻辑是在这里</span></span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;"</span> + message + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 什么也不做</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁Servlet部署"><a href="#🍁Servlet部署" class="headerlink" title="🍁Servlet部署"></a>🍁Servlet部署</h3><p>WEB-INF/ 的 <strong>web.xml</strong> 文件中创建以下条目</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloWorld<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>启动 tomcat 服务器，最后在浏览器的地址栏中输入 <strong><a href="http://localhost:8080/HelloWorld" target="_blank" rel="noopener">http://localhost:8080/HelloWorld</a></strong>。如果一切顺利，您会看到下面的结果：</p><p><a href="https://imgchr.com/i/dxO6c8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/01/dxO6c8.png" alt="dxO6c8.png"></a></p><h3 id="🍁后记"><a href="#🍁后记" class="headerlink" title="🍁后记"></a>🍁后记</h3><p>destory 方法被调用后，servlet 被销毁，但是并没有立即被回收，再次请求时，并没有重新初始化。</p><p>代码示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">    message = <span class="string">"Hello World , Nect To Meet You: "</span> + System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"servlet初始化……"</span>);</span><br><span class="line">    <span class="keyword">super</span>.init();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">    response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">    PrintWriter writer = response.getWriter();</span><br><span class="line">    writer.write(<span class="string">"&lt;h1&gt;"</span> + message + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">    destroy();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{</span><br><span class="line">    System.out.println(<span class="string">"servlet销毁！"</span>);</span><br><span class="line">    <span class="keyword">super</span>.destroy();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>控制台打印：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">servlet初始化……</span><br><span class="line">servlet销毁！</span><br><span class="line">2017-7-6 19:48:52 org.apache.catalina.core.StandardContext reload</span><br><span class="line">信息: Reloading Context with name [/myServlet] has started</span><br><span class="line">servlet销毁！</span><br><span class="line">2017-7-6 19:48:52 org.apache.catalina.core.StandardContext reload</span><br><span class="line">信息: Reloading Context with name [/myServlet] is completed</span><br><span class="line">servlet初始化……</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br></pre></td></tr></tbody></table></figure><p><strong>servlet 浏览器访问路径配置有个小问题：</strong></p><p>1、java 类里的注解 —— @WebServlet(“/HelloServlet”) 对应浏览器路径：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/TomcatTest/HelloServlet</span><br></pre></td></tr></tbody></table></figure><p>2、配置文件（web.xml）里对应的浏览器访问路径：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/TomcatTest/TomcatTest/HelloServlet</span><br></pre></td></tr></tbody></table></figure><p>这两种配一个就好了，不然路径重名的话反而会让tomcat启动不了。</p><p>例如这样就启动不了：</p><p>修改 web.xml :</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;url-pattern&gt;/HelloServlet&lt;/url-pattern&gt;</span><br></pre></td></tr></tbody></table></figure><p>修改后，web.xml 和 java 类的注解，对应路径都是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/TomcatTest/HelloServlet</span><br></pre></td></tr></tbody></table></figure><p><strong>导致</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命名的 servlet[HelloServlet]和 [com.runoob.test.HelloServlet] 都被映射到 URL 模式 [/ HelloServlet] 这是不允许的。</span><br></pre></td></tr></tbody></table></figure><p><strong>解决办法：</strong></p><p>将<strong>注解去掉</strong>或者<strong>保留注解进入web.xml将映射删除</strong>既可以。</p><hr><h2 id="🌸Servlet-表单数据"><a href="#🌸Servlet-表单数据" class="headerlink" title="🌸Servlet 表单数据"></a>🌸Servlet 表单数据</h2><p>很多情况下，需要传递一些信息，从浏览器到 Web 服务器，最终到后台程序。浏览器使用两种方法可将这些信息传递到 Web 服务器，分别为 GET 方法和 POST 方法。</p><h3 id="🍁GET-方法"><a href="#🍁GET-方法" class="headerlink" title="🍁GET 方法"></a>🍁GET 方法</h3><p>GET 方法向页面请求发送已编码的用户信息。页面和已编码的信息中间用 ? 字符分隔，如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.test.com/hello?key1=value1&amp;key2=value2</span><br></pre></td></tr></tbody></table></figure><p>GET 方法是默认的从浏览器向 Web 服务器传递信息的方法，它会产生一个很长的字符串，出现在浏览器的地址栏中。如果您要向服务器传递的是密码或其他的敏感信息，请不要使用 GET 方法。GET 方法有大小限制：请求字符串中最多只能有 1024 个字符。</p><p>这些信息使用 QUERY_STRING 头传递，并可以通过 QUERY_STRING 环境变量访问，Servlet 使用 <strong>doGet()</strong> 方法处理这种类型的请求。</p><h3 id="🍁POST-方法"><a href="#🍁POST-方法" class="headerlink" title="🍁POST 方法"></a>🍁POST 方法</h3><p>另一个向后台程序传递信息的比较可靠的方法是 POST 方法。POST 方法打包信息的方式与 GET 方法基本相同，但是 POST 方法不是把信息作为 URL 中 ? 字符后的文本字符串进行发送，而是把这些信息作为一个单独的消息。消息以标准输出的形式传到后台程序，您可以解析和使用这些标准输出。Servlet 使用 doPost() 方法处理这种类型的请求。</p><h3 id="🍁使用-Servlet-读取表单数据"><a href="#🍁使用-Servlet-读取表单数据" class="headerlink" title="🍁使用 Servlet 读取表单数据"></a>🍁使用 Servlet 读取表单数据</h3><p>Servlet 处理表单数据，这些数据会根据不同的情况使用不同的方法自动解析：</p><ul><li><strong>getParameter()：</strong>您可以调用 request.getParameter() 方法来获取表单参数的值。</li><li><strong>getParameterValues()：</strong>如果参数出现一次以上，则调用该方法，并返回多个值，例如复选框。</li><li><strong>getParameterNames()：</strong>如果您想要得到当前请求中的所有参数的完整列表，则调用该方法。</li></ul><h3 id="🍁使用-URL-的-GET-方法实例"><a href="#🍁使用-URL-的-GET-方法实例" class="headerlink" title="🍁使用 URL 的 GET 方法实例"></a>🍁使用 URL 的 GET 方法实例</h3><p>下面是一个简单的 URL，将使用 GET 方法向 HelloForm 程序传递两个值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/TomcatTest/HelloForm?name=云澈&amp;url=https://liudufu.github.io</span><br></pre></td></tr></tbody></table></figure><p>下面是处理 Web 浏览器输入的 <strong>HelloForm.java</strong> Servlet 程序。我们将使用 <strong>getParameter()</strong> 方法，可以很容易地访问传递的信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloForm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/HelloForm"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloForm</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloForm</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"使用 GET 方法读取表单数据"</span>;</span><br><span class="line">        <span class="comment">// 处理中文</span></span><br><span class="line">        String name =<span class="keyword">new</span> String(request.getParameter(<span class="string">"name"</span>).getBytes(<span class="string">"UTF-8"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;ul&gt;\n"</span> +</span><br><span class="line">            <span class="string">"  &lt;li&gt;&lt;b&gt;站点名&lt;/b&gt;："</span></span><br><span class="line">            + name + <span class="string">"\n"</span> +</span><br><span class="line">            <span class="string">"  &lt;li&gt;&lt;b&gt;网址&lt;/b&gt;："</span></span><br><span class="line">            + request.getParameter(<span class="string">"url"</span>) + <span class="string">"\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/ul&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后我们在 <strong>web.xml</strong> 文件中创建以下条目：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloForm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.HelloForm<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloForm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/HelloForm<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在在浏览器的地址栏中输入<code>http://localhost:8080/TomcatTest/HelloForm?name=云澈&amp;url=https://liudufu.github.io</code>，并在触发上述命令之前确保已经启动 Tomcat 服务器。如果一切顺利，您会得到下面的结果：</p><p><a href="https://imgchr.com/i/wpxUXt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxUXt.png" alt="wpxUXt.png"></a></p><h3 id="🍁使用表单的-GET-方法实例"><a href="#🍁使用表单的-GET-方法实例" class="headerlink" title="🍁使用表单的 GET 方法实例"></a>🍁使用表单的 GET 方法实例</h3><p>下面是一个简单的实例，使用 HTML 表单和提交按钮传递两个值。我们将使用相同的 Servlet HelloForm 来处理输入。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"HelloForm"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">网址名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">网址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>保存这个 HTML 到 hello.html 文件中，目录结构在WebContent下</p><p>尝试输入网址名和网址，然后点击”提交”按钮，</p><p><a href="https://imgchr.com/i/wpxYpd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxYpd.png" alt="wpxYpd.png"></a></p><p><a href="https://imgchr.com/i/wpxt1A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxt1A.png" alt="wpxt1A.png"></a></p><h3 id="🍁使用表单的-POST-方法实例"><a href="#🍁使用表单的-POST-方法实例" class="headerlink" title="🍁使用表单的 POST 方法实例"></a>🍁使用表单的 POST 方法实例</h3><p>让我们对上面的 Servlet 做小小的修改，以便它可以处理 GET 和 POST 方法。下面的 <strong>HelloForm.java</strong> Servlet 程序使用 GET 和 POST 方法处理由 Web 浏览器给出的输入。</p><p>注意：如果表单提交的数据中有中文数据则需要转码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name =<span class="keyword">new</span> String(request.getParameter(<span class="string">"name"</span>).getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloForm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/HelloForm"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloForm</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloForm</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"使用 POST 方法读取表单数据"</span>;</span><br><span class="line">        <span class="comment">// 处理中文</span></span><br><span class="line">        String name =<span class="keyword">new</span> String(request.getParameter(<span class="string">"name"</span>).getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;ul&gt;\n"</span> +</span><br><span class="line">            <span class="string">"  &lt;li&gt;&lt;b&gt;站点名&lt;/b&gt;："</span></span><br><span class="line">            + name + <span class="string">"\n"</span> +</span><br><span class="line">            <span class="string">"  &lt;li&gt;&lt;b&gt;网址&lt;/b&gt;："</span></span><br><span class="line">            + request.getParameter(<span class="string">"url"</span>) + <span class="string">"\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/ul&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在，编译部署上述的 Servlet，并使用带有 POST 方法的 hello.html 进行测试，如下所示</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>云澈(liudufu.github.io)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"HelloForm"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">网址名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">网址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>表单的实际输出与get图相同</p><h3 id="🍁将复选框数据传递到-Servlet-程序"><a href="#🍁将复选框数据传递到-Servlet-程序" class="headerlink" title="🍁将复选框数据传递到 Servlet 程序"></a>🍁将复选框数据传递到 Servlet 程序</h3><p>当需要选择一个以上的选项时，则使用复选框。</p><p>下面是一个 HTML 代码实例 checkbox.html，一个带有两个复选框的表单。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>云澈(liudufu.github.io)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"CheckBox"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"runoob"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span> 云澈</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"google"</span>  /&gt;</span> Google</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"taobao"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span> 淘宝</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"选择站点"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>下面是 CheckBox.java Servlet 程序，处理 Web 浏览器给出的复选框输入。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class CheckBox</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CheckBox"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"读取复选框数据"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">            out.println(docType +</span><br><span class="line">                <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;ul&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;云澈标识：&lt;/b&gt;: "</span></span><br><span class="line">                + request.getParameter(<span class="string">"runoob"</span>) + <span class="string">"\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;Google 标识：&lt;/b&gt;: "</span></span><br><span class="line">                + request.getParameter(<span class="string">"google"</span>) + <span class="string">"\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;淘宝标识：&lt;/b&gt;: "</span></span><br><span class="line">                + request.getParameter(<span class="string">"taobao"</span>) + <span class="string">"\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/ul&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>设置对应的 web.xml：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CheckBox<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.CheckBox<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CheckBox<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/CheckBox<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上面的实例将显示下面的结果：</p><p><a href="https://imgchr.com/i/wpxGfH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxGfH.png" alt="wpxGfH.png"></a></p><p><a href="https://imgchr.com/i/wpxN6I" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxN6I.png" alt="wpxN6I.png"></a></p><h3 id="🍁读取所有的表单参数"><a href="#🍁读取所有的表单参数" class="headerlink" title="🍁读取所有的表单参数"></a>🍁读取所有的表单参数</h3><p>以下是通用的实例，使用 HttpServletRequest 的 <strong>getParameterNames()</strong> 方法读取所有可用的表单参数。该方法返回一个枚举，其中包含未指定顺序的参数名。</p><p>一旦我们有一个枚举，我们可以以标准方式循环枚举，使用 <em>hasMoreElements()</em> 方法来确定何时停止，使用 <em>nextElement()</em> 方法来获取每个参数的名称。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ReadParams</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ReadParams"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadParams</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReadParams</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"读取所有的表单数据"</span>;</span><br><span class="line">        String docType =</span><br><span class="line">            <span class="string">"&lt;!doctype html public \"-//w3c//dtd html 4.0 "</span> +</span><br><span class="line">            <span class="string">"transitional//en\"&gt;\n"</span>;</span><br><span class="line">            out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=\"100%\" border=\"1\" align=\"center\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;tr bgcolor=\"#949494\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;th&gt;参数名称&lt;/th&gt;&lt;th&gt;参数值&lt;/th&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;/tr&gt;\n"</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration paramNames = request.getParameterNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(paramNames.hasMoreElements()) {</span><br><span class="line">            String paramName = (String)paramNames.nextElement();</span><br><span class="line">            out.print(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + paramName + <span class="string">"&lt;/td&gt;\n"</span>);</span><br><span class="line">            String[] paramValues =</span><br><span class="line">            request.getParameterValues(paramName);</span><br><span class="line">            <span class="comment">// 读取单个值的数据</span></span><br><span class="line">            <span class="keyword">if</span> (paramValues.length == <span class="number">1</span>) {</span><br><span class="line">                String paramValue = paramValues[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (paramValue.length() == <span class="number">0</span>)</span><br><span class="line">                    out.println(<span class="string">"&lt;td&gt;&lt;i&gt;没有值&lt;/i&gt;&lt;/td&gt;"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    out.println(<span class="string">"&lt;td&gt;"</span> + paramValue + <span class="string">"&lt;/td&gt;"</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 读取多个值的数据</span></span><br><span class="line">                out.println(<span class="string">"&lt;td&gt;&lt;ul&gt;"</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; paramValues.length; i++) {</span><br><span class="line">                out.println(<span class="string">"&lt;li&gt;"</span> + paramValues[i]);</span><br><span class="line">            }</span><br><span class="line">                out.println(<span class="string">"&lt;/ul&gt;&lt;/td&gt;"</span>);</span><br><span class="line">            }</span><br><span class="line">            out.print(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line">        out.println(<span class="string">"\n&lt;/table&gt;\n&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在，通过下面的表单尝试上面的 Servlet：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>云澈(liudufu.github.io)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"ReadParams"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"maths"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span> 数学</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"physics"</span>  /&gt;</span> 物理</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chemistry"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span> 化学</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"选择学科"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>设置相应的 web.xml:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ReadParams<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.ReadParams<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ReadParams<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/ReadParams<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在使用上面的表单调用 Servlet，将产生以下结果：</p><p><a href="https://imgchr.com/i/wpxw0f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxw0f.png" alt="wpxw0f.png"></a><br><a href="https://imgchr.com/i/wpx078" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpx078.png" alt="wpx078.png"></a></p><h2 id="🌸Servlet-客户端-HTTP-请求"><a href="#🌸Servlet-客户端-HTTP-请求" class="headerlink" title="🌸Servlet 客户端 HTTP 请求"></a>🌸Servlet 客户端 HTTP 请求</h2><p>当浏览器请求网页时，它会向 Web 服务器发送特定信息，这些信息不能被直接读取，因为这些信息是作为 HTTP 请求的头的一部分进行传输的。</p><p>以下是来自于浏览器端的重要头信息，您可以在 Web 编程中频繁使用：</p><table><thead><tr><th align="left">头信息</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Accept</td><td align="left">这个头信息指定浏览器或其他客户端可以处理的 MIME 类型。值 <strong>image/png</strong> 或 <strong>image/jpeg</strong> 是最常见的两种可能值。</td></tr><tr><td align="left">Accept-Charset</td><td align="left">这个头信息指定浏览器可以用来显示信息的字符集。例如 ISO-8859-1。</td></tr><tr><td align="left">Accept-Encoding</td><td align="left">这个头信息指定浏览器知道如何处理的编码类型。值 <strong>gzip</strong> 或 <strong>compress</strong> 是最常见的两种可能值。</td></tr><tr><td align="left">Accept-Language</td><td align="left">这个头信息指定客户端的首选语言，在这种情况下，Servlet 会产生多种语言的结果。例如，en、en-us、ru 等。</td></tr><tr><td align="left">Authorization</td><td align="left">这个头信息用于客户端在访问受密码保护的网页时识别自己的身份。</td></tr><tr><td align="left">Connection</td><td align="left">这个头信息指示客户端是否可以处理持久 HTTP 连接。持久连接允许客户端或其他浏览器通过单个请求来检索多个文件。值 <strong>Keep-Alive</strong> 意味着使用了持续连接。</td></tr><tr><td align="left">Content-Length</td><td align="left">这个头信息只适用于 POST 请求，并给出 POST 数据的大小（以字节为单位）。</td></tr><tr><td align="left">Cookie</td><td align="left">这个头信息把之前发送到浏览器的 cookies 返回到服务器。</td></tr><tr><td align="left">Host</td><td align="left">这个头信息指定原始的 URL 中的主机和端口。</td></tr><tr><td align="left">If-Modified-Since</td><td align="left">这个头信息表示只有当页面在指定的日期后已更改时，客户端想要的页面。如果没有新的结果可以使用，服务器会发送一个 304 代码，表示 <strong>Not Modified</strong> 头信息。</td></tr><tr><td align="left">If-Unmodified-Since</td><td align="left">这个头信息是 If-Modified-Since 的对立面，它指定只有当文档早于指定日期时，操作才会成功。</td></tr><tr><td align="left">Referer</td><td align="left">这个头信息指示所指向的 Web 页的 URL。例如，如果您在网页 1，点击一个链接到网页 2，当浏览器请求网页 2 时，网页 1 的 URL 就会包含在 Referer 头信息中。</td></tr><tr><td align="left">User-Agent</td><td align="left">这个头信息识别发出请求的浏览器或其他客户端，并可以向不同类型的浏览器返回不同的内容。</td></tr></tbody></table><h3 id="🍁读取-HTTP-头的方法"><a href="#🍁读取-HTTP-头的方法" class="headerlink" title="🍁读取 HTTP 头的方法"></a>🍁读取 HTTP 头的方法</h3><p>下面的方法可用在 Servlet 程序中读取 HTTP 头。这些方法通过 <em>HttpServletRequest</em> 对象可用。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>Cookie[] getCookies()</strong> 返回一个数组，包含客户端发送该请求的所有的 Cookie 对象。</td></tr><tr><td align="left">2</td><td align="left"><strong>Enumeration getAttributeNames()</strong> 返回一个枚举，包含提供给该请求可用的属性名称。</td></tr><tr><td align="left">3</td><td align="left"><strong>Enumeration getHeaderNames()</strong> 返回一个枚举，包含在该请求中包含的所有的头名。</td></tr><tr><td align="left">4</td><td align="left"><strong>Enumeration getParameterNames()</strong> 返回一个 String 对象的枚举，包含在该请求中包含的参数的名称。</td></tr><tr><td align="left">5</td><td align="left"><strong>HttpSession getSession()</strong> 返回与该请求关联的当前 session 会话，或者如果请求没有 session 会话，则创建一个。</td></tr><tr><td align="left">6</td><td align="left"><strong>HttpSession getSession(boolean create)</strong> 返回与该请求关联的当前 HttpSession，或者如果没有当前会话，且创建是真的，则返回一个新的 session 会话。</td></tr><tr><td align="left">7</td><td align="left"><strong>Locale getLocale()</strong> 基于 Accept-Language 头，返回客户端接受内容的首选的区域设置。</td></tr><tr><td align="left">8</td><td align="left"><strong>Object getAttribute(String name)</strong> 以对象形式返回已命名属性的值，如果没有给定名称的属性存在，则返回 null。</td></tr><tr><td align="left">9</td><td align="left"><strong>ServletInputStream getInputStream()</strong> 使用 ServletInputStream，以二进制数据形式检索请求的主体。</td></tr><tr><td align="left">10</td><td align="left"><strong>String getAuthType()</strong> 返回用于保护 Servlet 的身份验证方案的名称，例如，”BASIC” 或 “SSL”，如果JSP没有受到保护则返回 null。</td></tr><tr><td align="left">11</td><td align="left"><strong>String getCharacterEncoding()</strong> 返回请求主体中使用的字符编码的名称。</td></tr><tr><td align="left">12</td><td align="left"><strong>String getContentType()</strong> 返回请求主体的 MIME 类型，如果不知道类型则返回 null。</td></tr><tr><td align="left">13</td><td align="left"><strong>String getContextPath()</strong> 返回指示请求上下文的请求 URI 部分。</td></tr><tr><td align="left">14</td><td align="left"><strong>String getHeader(String name)</strong> 以字符串形式返回指定的请求头的值。</td></tr><tr><td align="left">15</td><td align="left"><strong>String getMethod()</strong> 返回请求的 HTTP 方法的名称，例如，GET、POST 或 PUT。</td></tr><tr><td align="left">16</td><td align="left"><strong>String getParameter(String name)</strong> 以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。</td></tr><tr><td align="left">17</td><td align="left"><strong>String getPathInfo()</strong> 当请求发出时，返回与客户端发送的 URL 相关的任何额外的路径信息。</td></tr><tr><td align="left">18</td><td align="left"><strong>String getProtocol()</strong> 返回请求协议的名称和版本。</td></tr><tr><td align="left">19</td><td align="left"><strong>String getQueryString()</strong> 返回包含在路径后的请求 URL 中的查询字符串。</td></tr><tr><td align="left">20</td><td align="left"><strong>String getRemoteAddr()</strong> 返回发送请求的客户端的互联网协议（IP）地址。</td></tr><tr><td align="left">21</td><td align="left"><strong>String getRemoteHost()</strong> 返回发送请求的客户端的完全限定名称。</td></tr><tr><td align="left">22</td><td align="left"><strong>String getRemoteUser()</strong> 如果用户已通过身份验证，则返回发出请求的登录用户，或者如果用户未通过身份验证，则返回 null。</td></tr><tr><td align="left">23</td><td align="left"><strong>String getRequestURI()</strong> 从协议名称直到 HTTP 请求的第一行的查询字符串中，返回该请求的 URL 的一部分。</td></tr><tr><td align="left">24</td><td align="left"><strong>String getRequestedSessionId()</strong> 返回由客户端指定的 session 会话 ID。</td></tr><tr><td align="left">25</td><td align="left"><strong>String getServletPath()</strong> 返回调用 JSP 的请求的 URL 的一部分。</td></tr><tr><td align="left">26</td><td align="left"><strong>String[] getParameterValues(String name)</strong> 返回一个字符串对象的数组，包含所有给定的请求参数的值，如果参数不存在则返回 null。</td></tr><tr><td align="left">27</td><td align="left"><strong>boolean isSecure()</strong> 返回一个布尔值，指示请求是否使用安全通道，如 HTTPS。</td></tr><tr><td align="left">28</td><td align="left"><strong>int getContentLength()</strong> 以字节为单位返回请求主体的长度，并提供输入流，或者如果长度未知则返回 -1。</td></tr><tr><td align="left">29</td><td align="left"><strong>int getIntHeader(String name)</strong> 返回指定的请求头的值为一个 int 值。</td></tr><tr><td align="left">30</td><td align="left"><strong>int getServerPort()</strong> 返回接收到这个请求的端口号。</td></tr><tr><td align="left">31</td><td align="left"><strong>int getParameterMap()</strong> 将参数封装成 Map 类型。</td></tr></tbody></table><h3 id="🍁HTTP-Header-请求实例"><a href="#🍁HTTP-Header-请求实例" class="headerlink" title="🍁HTTP Header 请求实例"></a>🍁HTTP Header 请求实例</h3><p>下面的实例使用 HttpServletRequest 的 <strong>getHeaderNames()</strong> 方法读取 HTTP 头信息。该方法返回一个枚举，包含与当前的 HTTP 请求相关的头信息。</p><p>一旦我们有一个枚举，我们可以以标准方式循环枚举，使用 <em>hasMoreElements()</em> 方法来确定何时停止，使用 <em>nextElement()</em> 方法来获取每个参数的名称。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/DisplayHeader"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayHeader</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"HTTP Header 请求实例 - 云澈实例"</span>;</span><br><span class="line">        String docType =</span><br><span class="line">            <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">            out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=\"100%\" border=\"1\" align=\"center\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;tr bgcolor=\"#949494\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;th&gt;Header 名称&lt;/th&gt;&lt;th&gt;Header 值&lt;/th&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;/tr&gt;\n"</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration headerNames = request.getHeaderNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(headerNames.hasMoreElements()) {</span><br><span class="line">            String paramName = (String)headerNames.nextElement();</span><br><span class="line">            out.print(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + paramName + <span class="string">"&lt;/td&gt;\n"</span>);</span><br><span class="line">            String paramValue = request.getHeader(paramName);</span><br><span class="line">            out.println(<span class="string">"&lt;td&gt; "</span> + paramValue + <span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        out.println(<span class="string">"&lt;/table&gt;\n&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上测试实例是位于 TomcatTest 项目下，对应的 web.xml 配置为：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DisplayHeader<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.DisplayHeader<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DisplayHeader<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/DisplayHeader<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在，调用上面的 Servlet，访问 <strong><a href="http://localhost:8080/TomcatTest/DisplayHeader" target="_blank" rel="noopener">http://localhost:8080/TomcatTest/DisplayHeader</a></strong> 会产生以下结果：</p><p><a href="https://imgchr.com/i/wPao0e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/03/wPao0e.png" alt="wPao0e.png"></a></p><h2 id="🌸Servlet-服务器-HTTP-响应"><a href="#🌸Servlet-服务器-HTTP-响应" class="headerlink" title="🌸Servlet 服务器 HTTP 响应"></a>🌸Servlet 服务器 HTTP 响应</h2><p>正如前面的章节中讨论的那样，当一个 Web 服务器响应一个 HTTP 请求时，响应通常包括一个状态行、一些响应报头、一个空行和文档。一个典型的响应如下所示：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Header2: ...</span><br><span class="line">...</span><br><span class="line">HeaderN: ...</span><br><span class="line">  (Blank Line)</span><br><span class="line"><span class="meta">&lt;!doctype ...&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>状态行包括 HTTP 版本（在本例中为 HTTP/1.1）、一个状态码（在本例中为 200）和一个对应于状态码的短消息（在本例中为 OK）。</p><p>下表总结了从 Web 服务器端返回到浏览器的最有用的 HTTP 1.1 响应报头，您会在 Web 编程中频繁地使用它们：</p><table><thead><tr><th align="left">头信息</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Allow</td><td align="left">这个头信息指定服务器支持的请求方法（GET、POST 等）。</td></tr><tr><td align="left">Cache-Control</td><td align="left">这个头信息指定响应文档在何种情况下可以安全地缓存。可能的值有：<strong>public、private</strong> 或 <strong>no-cache</strong> 等。Public 意味着文档是可缓存，Private 意味着文档是单个用户私用文档，且只能存储在私有（非共享）缓存中，no-cache 意味着文档不应被缓存。</td></tr><tr><td align="left">Connection</td><td align="left">这个头信息指示浏览器是否使用持久 HTTP 连接。值 <strong>close</strong> 指示浏览器不使用持久 HTTP 连接，值 <strong>keep-alive</strong> 意味着使用持久连接。</td></tr><tr><td align="left">Content-Disposition</td><td align="left">这个头信息可以让您请求浏览器要求用户以给定名称的文件把响应保存到磁盘。</td></tr><tr><td align="left">Content-Encoding</td><td align="left">在传输过程中，这个头信息指定页面的编码方式。</td></tr><tr><td align="left">Content-Language</td><td align="left">这个头信息表示文档编写所使用的语言。例如，en、en-us、ru 等。</td></tr><tr><td align="left">Content-Length</td><td align="left">这个头信息指示响应中的字节数。只有当浏览器使用持久（keep-alive）HTTP 连接时才需要这些信息。</td></tr><tr><td align="left">Content-Type</td><td align="left">这个头信息提供了响应文档的 MIME（Multipurpose Internet Mail Extension）类型。</td></tr><tr><td align="left">Expires</td><td align="left">这个头信息指定内容过期的时间，在这之后内容不再被缓存。</td></tr><tr><td align="left">Last-Modified</td><td align="left">这个头信息指示文档的最后修改时间。然后，客户端可以缓存文件，并在以后的请求中通过 <strong>If-Modified-Since</strong> 请求头信息提供一个日期。</td></tr><tr><td align="left">Location</td><td align="left">这个头信息应被包含在所有的带有状态码的响应中。在 300s 内，这会通知浏览器文档的地址。浏览器会自动重新连接到这个位置，并获取新的文档。</td></tr><tr><td align="left">Refresh</td><td align="left">这个头信息指定浏览器应该如何尽快请求更新的页面。您可以指定页面刷新的秒数。</td></tr><tr><td align="left">Retry-After</td><td align="left">这个头信息可以与 503（Service Unavailable 服务不可用）响应配合使用，这会告诉客户端多久就可以重复它的请求。</td></tr><tr><td align="left">Set-Cookie</td><td align="left">这个头信息指定一个与页面关联的 cookie。</td></tr></tbody></table><h3 id="🍁设置-HTTP-响应报头的方法"><a href="#🍁设置-HTTP-响应报头的方法" class="headerlink" title="🍁设置 HTTP 响应报头的方法"></a>🍁设置 HTTP 响应报头的方法</h3><p>下面的方法可用于在 Servlet 程序中设置 HTTP 响应报头。这些方法通过 <em>HttpServletResponse</em> 对象可用。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>String encodeRedirectURL(String url)</strong> 为 sendRedirect 方法中使用的指定的 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。</td></tr><tr><td align="left">2</td><td align="left"><strong>String encodeURL(String url)</strong> 对包含 session 会话 ID 的指定 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。</td></tr><tr><td align="left">3</td><td align="left"><strong>boolean containsHeader(String name)</strong> 返回一个布尔值，指示是否已经设置已命名的响应报头。</td></tr><tr><td align="left">4</td><td align="left"><strong>boolean isCommitted()</strong> 返回一个布尔值，指示响应是否已经提交。</td></tr><tr><td align="left">5</td><td align="left"><strong>void addCookie(Cookie cookie)</strong> 把指定的 cookie 添加到响应。</td></tr><tr><td align="left">6</td><td align="left"><strong>void addDateHeader(String name, long date)</strong> 添加一个带有给定的名称和日期值的响应报头。</td></tr><tr><td align="left">7</td><td align="left"><strong>void addHeader(String name, String value)</strong> 添加一个带有给定的名称和值的响应报头。</td></tr><tr><td align="left">8</td><td align="left"><strong>void addIntHeader(String name, int value)</strong> 添加一个带有给定的名称和整数值的响应报头。</td></tr><tr><td align="left">9</td><td align="left"><strong>void flushBuffer()</strong> 强制任何在缓冲区中的内容被写入到客户端。</td></tr><tr><td align="left">10</td><td align="left"><strong>void reset()</strong> 清除缓冲区中存在的任何数据，包括状态码和头。</td></tr><tr><td align="left">11</td><td align="left"><strong>void resetBuffer()</strong> 清除响应中基础缓冲区的内容，不清除状态码和头。</td></tr><tr><td align="left">12</td><td align="left"><strong>void sendError(int sc)</strong> 使用指定的状态码发送错误响应到客户端，并清除缓冲区。</td></tr><tr><td align="left">13</td><td align="left"><strong>void sendError(int sc, String msg)</strong> 使用指定的状态发送错误响应到客户端。</td></tr><tr><td align="left">14</td><td align="left"><strong>void sendRedirect(String location)</strong> 使用指定的重定向位置 URL 发送临时重定向响应到客户端。</td></tr><tr><td align="left">15</td><td align="left"><strong>void setBufferSize(int size)</strong> 为响应主体设置首选的缓冲区大小。</td></tr><tr><td align="left">16</td><td align="left"><strong>void setCharacterEncoding(String charset)</strong> 设置被发送到客户端的响应的字符编码（MIME 字符集）例如，UTF-8。</td></tr><tr><td align="left">17</td><td align="left"><strong>void setContentLength(int len)</strong> 设置在 HTTP Servlet 响应中的内容主体的长度，该方法设置 HTTP Content-Length 头。</td></tr><tr><td align="left">18</td><td align="left"><strong>void setContentType(String type)</strong> 如果响应还未被提交，设置被发送到客户端的响应的内容类型。</td></tr><tr><td align="left">19</td><td align="left"><strong>void setDateHeader(String name, long date)</strong> 设置一个带有给定的名称和日期值的响应报头。</td></tr><tr><td align="left">20</td><td align="left"><strong>void setHeader(String name, String value)</strong> 设置一个带有给定的名称和值的响应报头。</td></tr><tr><td align="left">21</td><td align="left"><strong>void setIntHeader(String name, int value)</strong> 设置一个带有给定的名称和整数值的响应报头。</td></tr><tr><td align="left">22</td><td align="left"><strong>void setLocale(Locale loc)</strong> 如果响应还未被提交，设置响应的区域。</td></tr><tr><td align="left">23</td><td align="left"><strong>void setStatus(int sc)</strong> 为该响应设置状态码。</td></tr></tbody></table><h3 id="🍁HTTP-Header-响应实例"><a href="#🍁HTTP-Header-响应实例" class="headerlink" title="🍁HTTP Header 响应实例"></a>🍁HTTP Header 响应实例</h3><p>您已经在前面的实例中看到 setContentType() 方法，下面的实例也使用了同样的方法，此外，我们会用 <strong>setIntHeader()</strong> 方法来设置 <strong>Refresh</strong> 头。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/Refresh"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Refresh</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">      </span>{</span><br><span class="line">          <span class="comment">// 设置刷新自动加载时间为 5 秒</span></span><br><span class="line">          response.setIntHeader(<span class="string">"Refresh"</span>, <span class="number">5</span>);</span><br><span class="line">          <span class="comment">// 设置响应内容类型</span></span><br><span class="line">          response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">         </span><br><span class="line">          <span class="comment">//使用默认时区和语言环境获得一个日历  </span></span><br><span class="line">          Calendar cale = Calendar.getInstance();  </span><br><span class="line">          <span class="comment">//将Calendar类型转换成Date类型  </span></span><br><span class="line">          Date tasktime=cale.getTime();  </span><br><span class="line">          <span class="comment">//设置日期输出的格式  </span></span><br><span class="line">          SimpleDateFormat df=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">          <span class="comment">//格式化输出  </span></span><br><span class="line">          String nowTime = df.format(tasktime);</span><br><span class="line">          PrintWriter out = response.getWriter();</span><br><span class="line">          String title = <span class="string">"自动刷新 Header 设置 - 云澈实例"</span>;</span><br><span class="line">          String docType =</span><br><span class="line">          <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">          out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;p&gt;当前时间是："</span> + nowTime + <span class="string">"&lt;/p&gt;\n"</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                         HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">         doGet(request, response);</span><br><span class="line">      }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上测试实例是位于 TomcatTest 项目下，对应的 web.xml 配置为：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">     <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.Refresh<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/Refresh<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在，调用上面的 Servlet，每隔 5 秒会显示当前系统时间。只要运行 Servlet 并稍等片刻，即可看到如下的结果：</p><p><a href="https://imgchr.com/i/wPwqQP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/03/wPwqQP.png" alt="wPwqQP.png"></a></p><h2 id="🌸Servlet-HTTP-状态码"><a href="#🌸Servlet-HTTP-状态码" class="headerlink" title="🌸Servlet HTTP 状态码"></a>🌸Servlet HTTP 状态码</h2><p>HTTP 请求和 HTTP 响应消息的格式是类似的，结构如下：</p><ul><li>初始状态行 + 回车换行符（回车+换行）</li><li>零个或多个标题行+回车换行符</li><li>一个空白行，即回车换行符</li><li>一个可选的消息主体，比如文件、查询数据或查询输出</li></ul><p>例如，服务器的响应头如下所示：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Header2: ...</span><br><span class="line">...</span><br><span class="line">HeaderN: ...</span><br><span class="line">  (Blank Line)</span><br><span class="line"><span class="meta">&lt;!doctype ...&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>状态行包括 HTTP 版本（在本例中为 HTTP/1.1）、一个状态码（在本例中为 200）和一个对应于状态码的短消息（在本例中为 OK）。</p><p>以下是可能从 Web 服务器返回的 HTTP 状态码和相关的信息列表：</p><table><thead><tr><th align="left">代码</th><th align="left">消息</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">服务器切换协议。</td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">该请求是完整的，并创建一个新的资源。</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">该请求被接受处理，但是该处理是不完整的。</td></tr><tr><td align="left">203</td><td align="left">Non-authoritative Information</td><td align="left"></td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left"></td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left"></td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left"></td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">所请求的页面已经转移到一个新的 URL。</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">所请求的页面可以在另一个不同的 URL 下被找到。</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left"></td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left"></td></tr><tr><td align="left">306</td><td align="left"><em>Unused</em></td><td align="left">在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">服务器不理解请求。</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">所请求的页面需要用户名和密码。</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left"><em>您还不能使用该代码。</em></td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">禁止访问所请求的页面。</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法找到所请求的页面。.</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">在请求中指定的方法是不允许的。</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器只生成一个不被客户端接受的响应。</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">在请求送达之前，您必须使用代理服务器的验证。</td></tr><tr><td align="left">408</td><td align="left">Request Timeout</td><td align="left">请求需要的时间比服务器能够等待的时间长，超时。</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">请求因为冲突无法完成。</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">所请求的页面不再可用。</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">“Content-Length” 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">请求中给出的先决条件被服务器评估为 false。</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">服务器不接受该请求，因为请求实体过大。</td></tr><tr><td align="left">414</td><td align="left">Request-url Too Long</td><td align="left">服务器不接受该请求，因为 URL 太长。当您转换一个 “post” 请求为一个带有长的查询信息的 “get” 请求时发生。</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器不接受该请求，因为媒体类型不被支持。</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed</td><td align="left"></td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">未完成的请求。服务器遇到了一个意外的情况。</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">未完成的请求。服务器不支持所需的功能。</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">未完成的请求。服务器从上游服务器收到无效响应。</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">未完成的请求。服务器暂时超载或死机。</td></tr><tr><td align="left">504</td><td align="left">Gateway Timeout</td><td align="left">网关超时。</td></tr><tr><td align="left">505</td><td align="left">HTTP Version Not Supported</td><td align="left">服务器不支持”HTTP协议”版本。### 🍁HTTP 请求和 HTTP 响应消息的格式是类似的，结构如下：</td></tr></tbody></table><h3 id="🍁设置-HTTP-状态代码的方法"><a href="#🍁设置-HTTP-状态代码的方法" class="headerlink" title="🍁设置 HTTP 状态代码的方法"></a>🍁设置 HTTP 状态代码的方法</h3><p>下面的方法可用于在 Servlet 程序中设置 HTTP 状态码。这些方法通过 <em>HttpServletResponse</em> 对象可用。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void setStatus ( int statusCode )</strong> 该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的响应包含了一个特殊的状态码和文档，请确保在使用 <em>PrintWriter</em> 实际返回任何内容之前调用 setStatus。</td></tr><tr><td align="left">2</td><td align="left"><strong>public void sendRedirect(String url)</strong> 该方法生成一个 302 响应，连同一个带有新文档 URL 的 <em>Location</em> 头。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void sendError(int code, String message)</strong> 该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。</td></tr></tbody></table><h3 id="🍁HTTP-状态码实例"><a href="#🍁HTTP-状态码实例" class="headerlink" title="🍁HTTP 状态码实例"></a>🍁HTTP 状态码实例</h3><p>下面的例子把 407 错误代码发送到客户端浏览器，浏览器会显示 “Need authentication!!!” 消息。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/showError"</span>)</span><br><span class="line"><span class="comment">// 扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">showError</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 设置错误代码和原因</span></span><br><span class="line">      response.sendError(<span class="number">407</span>, <span class="string">"Need authentication!!!"</span> );</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                     HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">     doGet(request, response);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在，调用上面的 Servlet 将显示以下结果：</p><p><a href="https://imgchr.com/i/wPro0f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/03/wPro0f.png" alt="wPro0f.png"></a></p><hr><h2 id="🌸Servlet-编写过滤器"><a href="#🌸Servlet-编写过滤器" class="headerlink" title="🌸Servlet 编写过滤器"></a>🌸Servlet 编写过滤器</h2><p>Servlet 过滤器可以动态地拦截请求和响应，以变换或使用包含在请求或响应中的信息。</p><p>可以将一个或多个 Servlet 过滤器附加到一个 Servlet 或一组 Servlet。Servlet 过滤器也可以附加到 JavaServer Pages (JSP) 文件和 HTML 页面。调用 Servlet 前调用所有附加的 Servlet 过滤器。</p><p>Servlet 过滤器是可用于 Servlet 编程的 Java 类，可以实现以下目的：</p><ul><li>在客户端的请求访问后端资源之前，拦截这些请求。</li><li>在服务器的响应发送回客户端之前，处理这些响应。</li></ul><p>根据规范建议的各种类型的过滤器：</p><ul><li>身份验证过滤器（Authentication Filters）。</li><li>数据压缩过滤器（Data compression Filters）。</li><li>加密过滤器（Encryption Filters）。</li><li>触发资源访问事件过滤器。</li><li>图像转换过滤器（Image Conversion Filters）。</li><li>日志记录和审核过滤器（Logging and Auditing Filters）。</li><li>MIME-TYPE 链过滤器（MIME-TYPE Chain Filters）。</li><li>标记化过滤器（Tokenizing Filters）。</li><li>XSL/T 过滤器（XSL/T Filters），转换 XML 内容。</li></ul><p>过滤器通过 Web 部署描述符（web.xml）中的 XML 标签来声明，然后映射到您的应用程序的部署描述符中的 Servlet 名称或 URL 模式。</p><p>当 Web 容器启动 Web 应用程序时，它会为您在部署描述符中声明的每一个过滤器创建一个实例。</p><p>Filter的执行顺序与在web.xml配置文件中的配置顺序一致，一般把Filter配置在所有的Servlet之前。</p><h3 id="🍁Servlet-过滤器方法"><a href="#🍁Servlet-过滤器方法" class="headerlink" title="🍁Servlet 过滤器方法"></a>🍁Servlet 过滤器方法</h3><p>过滤器是一个实现了 javax.servlet.Filter 接口的 Java 类。javax.servlet.Filter 接口定义了三个方法：</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void doFilter (ServletRequest, ServletResponse, FilterChain)</strong> 该方法完成实际的过滤操作，当客户端请求方法与过滤器设置匹配的URL时，Servlet容器将先调用过滤器的doFilter方法。FilterChain用户访问后续过滤器。</td></tr><tr><td align="left">2</td><td align="left"><strong>public void init(FilterConfig filterConfig)</strong> web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void destroy()</strong> Servlet容器在销毁过滤器实例前调用该方法，在该方法中释放Servlet过滤器占用的资源。</td></tr></tbody></table><h3 id="🍁FilterConfig-使用"><a href="#🍁FilterConfig-使用" class="headerlink" title="🍁FilterConfig 使用"></a>🍁FilterConfig 使用</h3><p>Filter 的 init 方法中提供了一个 FilterConfig 对象。</p><p>如 web.xml 文件配置如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;LogFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">runoob</span>.<span class="title">test</span>.<span class="title">LogFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">Site</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;云澈&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在 init 方法使用 FilterConfig 对象获取参数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">    <span class="comment">// 获取初始化参数</span></span><br><span class="line">    String site = config.getInitParameter(<span class="string">"Site"</span>); </span><br><span class="line">    <span class="comment">// 输出初始化参数</span></span><br><span class="line">    System.out.println(<span class="string">"网站名称: "</span> + site); </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁Servlet-过滤器实例"><a href="#🍁Servlet-过滤器实例" class="headerlink" title="🍁Servlet 过滤器实例"></a>🍁Servlet 过滤器实例</h3><p>以下是 Servlet 过滤器的实例，将输出网站名称和地址。本实例让您对 Servlet 过滤器有基本的了解，您可以使用相同的概念编写更复杂的过滤器应用程序：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">        <span class="comment">// 获取初始化参数</span></span><br><span class="line">        String site = config.getInitParameter(<span class="string">"Site"</span>); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出初始化参数</span></span><br><span class="line">        System.out.println(<span class="string">"网站名称: "</span> + site); </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> java.io.IOException, ServletException </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出站点名称</span></span><br><span class="line">        System.out.println(<span class="string">"站点网址：http://liudufu.github.io"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把请求传回过滤链</span></span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">( )</span></span>{</span><br><span class="line">        <span class="comment">/* 在 Filter 实例被 Web 容器从服务移除之前调用 */</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这边使用前文提到的 DisplayHeader.java 为例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/DisplayHeader"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayHeader</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"HTTP Header 请求实例 - 云澈实例"</span>;</span><br><span class="line">        String docType =</span><br><span class="line">            <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">            out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=\"100%\" border=\"1\" align=\"center\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;tr bgcolor=\"#949494\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;th&gt;Header 名称&lt;/th&gt;&lt;th&gt;Header 值&lt;/th&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;/tr&gt;\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">Enumeration headerNames = request.getHeaderNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(headerNames.hasMoreElements()) {</span><br><span class="line">            String paramName = (String)headerNames.nextElement();</span><br><span class="line">            out.print(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + paramName + <span class="string">"&lt;/td&gt;\n"</span>);</span><br><span class="line">            String paramValue = request.getHeader(paramName);</span><br><span class="line">            out.println(<span class="string">"&lt;td&gt; "</span> + paramValue + <span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        out.println(<span class="string">"&lt;/table&gt;\n&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁Web-xml-中的-Servlet-过滤器映射（Servlet-Filter-Mapping）"><a href="#🍁Web-xml-中的-Servlet-过滤器映射（Servlet-Filter-Mapping）" class="headerlink" title="🍁Web.xml 中的 Servlet 过滤器映射（Servlet Filter Mapping）"></a>🍁Web.xml 中的 Servlet 过滤器映射（Servlet Filter Mapping）</h3><p>定义过滤器，然后映射到一个 URL 或 Servlet，这与定义 Servlet，然后映射到一个 URL 模式方式大致相同。在部署描述符文件 <strong>web.xml</strong> 中为 filter 标签创建下面的条目：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.runoob.test.LogFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>Site<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>云澈<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DisplayHeader<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- 所在的包 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.DisplayHeader<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DisplayHeader<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- 访问的网址 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/DisplayHeader<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上述过滤器适用于所有的 Servlet，因为我们在配置中指定 <strong>/*</strong> 。如果您只想在少数的 Servlet 上应用过滤器，您可以指定一个特定的 Servlet 路径。</p><p>现在试着以常用的方式调用任何 Servlet，您将会看到在 Web 服务器中生成的日志。您也可以使用 Log4J 记录器来把上面的日志记录到一个单独的文件中。</p><p>接下来我们访问这个实例地址 <strong><a href="http://localhost:8080/TomcatTest/DisplayHeader" target="_blank" rel="noopener">http://localhost:8080/TomcatTest/DisplayHeader</a></strong>, 然后在控制台看下输出内容，如下所示：</p><p><a href="https://imgchr.com/i/0UGZTg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/06/0UGZTg.png" alt="0UGZTg.png"></a></p><h3 id="🍁使用多个过滤器"><a href="#🍁使用多个过滤器" class="headerlink" title="🍁使用多个过滤器"></a>🍁使用多个过滤器</h3><p>Web 应用程序可以根据特定的目的定义若干个不同的过滤器。假设您定义了两个过滤器 <em>AuthenFilter</em> 和 <em>LogFilter</em>。您需要创建一个如下所述的不同的映射，其余的处理与上述所讲解的大致相同：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.runoob.test.LogFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>test-param<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Initialization Paramter<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.runoob.test.AuthenFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>test-param<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Initialization Paramter<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="🍁过滤器的应用顺序"><a href="#🍁过滤器的应用顺序" class="headerlink" title="🍁过滤器的应用顺序"></a>🍁过滤器的应用顺序</h3><p>web.xml 中的 filter-mapping 元素的顺序决定了 Web 容器应用过滤器到 Servlet 的顺序。若要反转过滤器的顺序，您只需要在 web.xml 文件中反转 filter-mapping 元素即可。</p><p>例如，上面的实例将先应用 LogFilter，然后再应用 AuthenFilter，但是下面的实例将颠倒这个顺序：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="🍁web-xml配置各节点说明"><a href="#🍁web-xml配置各节点说明" class="headerlink" title="🍁web.xml配置各节点说明"></a>🍁web.xml配置各节点说明</h3><ul><li><code>&lt;filter&gt;</code>指定一个过滤器。<ul><li><code>&lt;filter-name&gt;</code>用于为过滤器指定一个名字，该元素的内容不能为空。</li><li><code>&lt;filter-class&gt;</code>元素用于指定过滤器的完整的限定类名。</li><li><code>&lt;init-param&gt;</code>元素用于为过滤器指定初始化参数，它的子元素<code>&lt;param-name&gt;</code>指定参数的名字，<code>&lt;param-value&gt;</code>指定参数的值。</li><li>在过滤器中，可以使用<code>FilterConfig</code>接口对象来访问初始化参数。</li></ul></li><li><code>&lt;filter-mapping&gt;</code>元素用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径<ul><li><code>&lt;filter-name&gt;</code>子元素用于设置filter的注册名称。该值必须是在<code>&lt;filter&gt;</code>元素中声明过的过滤器的名字</li><li><code>&lt;url-pattern&gt;</code>设置 filter 所拦截的请求路径(过滤器关联的URL样式)</li></ul></li><li><code>&lt;servlet-name&gt;</code>指定过滤器所拦截的Servlet名称。</li><li><code>&lt;dispatcher&gt;</code>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是<code>REQUEST</code>,<code>INCLUDE</code>,<code>FORWARD</code>和<code>ERROR</code>之一，默认<code>REQUEST</code>。用户可以设置多个<code>&lt;dispatcher&gt;</code>子元素用来指定 Filter 对资源的多种调用方式进行拦截。</li><li><code>&lt;dispatcher&gt;</code>子元素可以设置的值及其意义<ul><li><code>REQUEST</code>：当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过<code>RequestDispatcher</code>的include()或forward()方法访问时，那么该过滤器就不会被调用。</li><li><code>INCLUDE</code>：如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。</li><li><code>FORWARD</code>：如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。</li><li><code>ERROR</code>：如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。</li></ul></li></ul><h2 id="🌸Servlet-异常处理"><a href="#🌸Servlet-异常处理" class="headerlink" title="🌸Servlet 异常处理"></a>🌸Servlet 异常处理</h2><p>当一个 Servlet 抛出一个异常时，Web 容器在使用了 exception-type 元素的 <strong>web.xml</strong> 中搜索与抛出异常类型相匹配的配置。</p><p>您必须在 web.xml 中使用 <strong>error-page</strong> 元素来指定对特定<strong>异常</strong> 或 HTTP <strong>状态码</strong> 作出相应的 Servlet 调用。</p><h3 id="🍁web-xml-配置"><a href="#🍁web-xml-配置" class="headerlink" title="🍁web.xml 配置"></a>🍁web.xml 配置</h3><p>假设，有一个 <em>ErrorHandler</em> 的 Servlet 在任何已定义的异常或错误出现时被调用。以下将是在 web.xml 中创建的项。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- servlet 定义 --&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;ErrorHandler&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">ErrorHandler</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!-- <span class="title">servlet</span> 映射 --&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">ErrorHandler</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">ErrorHandler</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;!-- <span class="title">error</span>-<span class="title">code</span> 相关的错误页面 --&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">error</span>-<span class="title">code</span>&gt;404&lt;/<span class="title">error</span>-<span class="title">code</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">location</span>&gt;/<span class="title">ErrorHandler</span>&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">error</span>-<span class="title">code</span>&gt;403&lt;/<span class="title">error</span>-<span class="title">code</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">location</span>&gt;/<span class="title">ErrorHandler</span>&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;!-- <span class="title">exception</span>-<span class="title">type</span> 相关的错误页面 --&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">exception</span>-<span class="title">type</span>&gt;</span></span><br><span class="line"><span class="class">          <span class="title">javax</span>.<span class="title">servlet</span>.<span class="title">ServletException</span></span></span><br><span class="line"><span class="class">    &lt;/<span class="title">exception</span>-<span class="title">type</span> &gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">location</span>&gt;/<span class="title">ErrorHandler</span>&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">exception</span>-<span class="title">type</span>&gt;<span class="title">java</span>.<span class="title">io</span>.<span class="title">IOException</span>&lt;/<span class="title">exception</span>-<span class="title">type</span> &gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">location</span>&gt;/<span class="title">ErrorHandler</span>&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果您想对所有的异常有一个通用的错误处理程序，那么应该定义下面的 error-page，而不是为每个异常定义单独的 error-page 元素：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="name">exception-type</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>以下是关于上面的 web.xml 异常处理要注意的点：</p><ul><li>Servlet ErrorHandler 与其他的 Servlet 的定义方式一样，且在 web.xml 中进行配置。</li><li>如果有错误状态代码出现，不管为 404（Not Found 未找到）或 403（Forbidden 禁止），则会调用 ErrorHandler 的 Servlet。</li><li>如果 Web 应用程序抛出 <em>ServletException</em> 或 <em>IOException</em>，那么 Web 容器会调用 ErrorHandler 的 Servlet。</li><li>您可以定义不同的错误处理程序来处理不同类型的错误或异常。上面的实例是非常通用的，希望您能通过实例理解基本的概念。</li></ul><h3 id="🍁请求属性-错误-异常"><a href="#🍁请求属性-错误-异常" class="headerlink" title="🍁请求属性 - 错误/异常"></a>🍁请求属性 - 错误/异常</h3><p>以下是错误处理的 Servlet 可以访问的请求属性列表，用来分析错误/异常的性质。</p><table><thead><tr><th align="left">序号</th><th align="left">属性 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>javax.servlet.error.status_code</strong> 该属性给出状态码，状态码可被存储，并在存储为 java.lang.Integer 数据类型后可被分析。</td></tr><tr><td align="left">2</td><td align="left"><strong>javax.servlet.error.exception_type</strong> 该属性给出异常类型的信息，异常类型可被存储，并在存储为 java.lang.Class 数据类型后可被分析。</td></tr><tr><td align="left">3</td><td align="left"><strong>javax.servlet.error.message</strong> 该属性给出确切错误消息的信息，信息可被存储，并在存储为 java.lang.String 数据类型后可被分析。</td></tr><tr><td align="left">4</td><td align="left"><strong>javax.servlet.error.request_uri</strong> 该属性给出有关 URL 调用 Servlet 的信息，信息可被存储，并在存储为 java.lang.String 数据类型后可被分析。</td></tr><tr><td align="left">5</td><td align="left"><strong>javax.servlet.error.exception</strong> 该属性给出异常产生的信息，信息可被存储，并在存储为 java.lang.Throwable 数据类型后可被分析。</td></tr><tr><td align="left">6</td><td align="left"><strong>javax.servlet.error.servlet_name</strong> 该属性给出 Servlet 的名称，名称可被存储，并在存储为 java.lang.String 数据类型后可被分析。</td></tr></tbody></table><h3 id="🍁Servlet-错误处理程序实例"><a href="#🍁Servlet-错误处理程序实例" class="headerlink" title="🍁Servlet 错误处理程序实例"></a>🍁Servlet 错误处理程序实例</h3><p>以下是 Servlet 实例，将应对任何您所定义的错误或异常发生时的错误处理程序。</p><p>本实例让您对 Servlet 中的异常处理有基本的了解，您可以使用相同的概念编写更复杂的异常处理应用程序：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="comment">//import java.util.*;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展 HttpServlet 类</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorHandler</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      Throwable throwable = (Throwable)</span><br><span class="line">      request.getAttribute(<span class="string">"javax.servlet.error.exception"</span>);</span><br><span class="line">      Integer statusCode = (Integer)</span><br><span class="line">      request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>);</span><br><span class="line">      String servletName = (String)</span><br><span class="line">      request.getAttribute(<span class="string">"javax.servlet.error.servlet_name"</span>);</span><br><span class="line">      <span class="keyword">if</span> (servletName == <span class="keyword">null</span>){</span><br><span class="line">          servletName = <span class="string">"Unknown"</span>;</span><br><span class="line">      }</span><br><span class="line">      String requestUri = (String)</span><br><span class="line">      request.getAttribute(<span class="string">"javax.servlet.error.request_uri"</span>);</span><br><span class="line">      <span class="keyword">if</span> (requestUri == <span class="keyword">null</span>){</span><br><span class="line">          requestUri = <span class="string">"Unknown"</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">  </span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      String title = <span class="string">"云澈Error/Exception 信息"</span>;</span><br><span class="line">     </span><br><span class="line">      String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">          <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">           <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">           <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span>);</span><br><span class="line">         out.println(<span class="string">"&lt;h1&gt;云澈异常信息实例演示&lt;/h1&gt;"</span>);</span><br><span class="line">         <span class="keyword">if</span> (throwable == <span class="keyword">null</span> &amp;&amp; statusCode == <span class="keyword">null</span>){</span><br><span class="line">            out.println(<span class="string">"&lt;h2&gt;错误信息丢失&lt;/h2&gt;"</span>);</span><br><span class="line">            out.println(<span class="string">"请返回 &lt;a href=\""</span> + </span><br><span class="line">          response.encodeURL(<span class="string">"http://localhost:8080/"</span>) + </span><br><span class="line">              <span class="string">"\"&gt;主页&lt;/a&gt;。"</span>);</span><br><span class="line">         }<span class="keyword">else</span> <span class="keyword">if</span> (statusCode != <span class="keyword">null</span>) {</span><br><span class="line">            out.println(<span class="string">"错误代码 : "</span> + statusCode);</span><br><span class="line">      }<span class="keyword">else</span>{</span><br><span class="line">             out.println(<span class="string">"&lt;h2&gt;错误信息&lt;/h2&gt;"</span>);</span><br><span class="line">            out.println(<span class="string">"Servlet Name : "</span> + servletName + </span><br><span class="line">                            <span class="string">"&lt;/br&gt;&lt;/br&gt;"</span>);</span><br><span class="line">            out.println(<span class="string">"异常类型 : "</span> + </span><br><span class="line">                            throwable.getClass( ).getName( ) + </span><br><span class="line">                            <span class="string">"&lt;/br&gt;&lt;/br&gt;"</span>);</span><br><span class="line">            out.println(<span class="string">"请求 URI: "</span> + requestUri + </span><br><span class="line">                            <span class="string">"&lt;br&gt;&lt;br&gt;"</span>);</span><br><span class="line">            out.println(<span class="string">"异常信息: "</span> + </span><br><span class="line">                                throwable.getMessage( ));</span><br><span class="line">         }</span><br><span class="line">         out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">         out.println(<span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">      doGet(request, response);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以通常的方式编译 <strong>ErrorHandler.java</strong>，把您的类文件放入<tomcat-installation-directory>/webapps/ROOT/WEB-INF/classes 中。</tomcat-installation-directory></p><p>让我们在 web.xml 文件中添加如下配置来处理异常：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.ErrorHandler<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- servlet mappings --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/ErrorHandler<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/TomcatTest/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="name">exception-type</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在，尝试使用一个会产生异常的 Servlet，或者输入一个错误的 URL，这将触发 Web 容器调用 <strong>ErrorHandler</strong> 的 Servlet，并显示适当的消息。例如，如果您输入了一个错误的 URL（如：<a href="http://localhost:8080/TomcatTest/UnKonwPage），那么它将显示下面的结果：" target="_blank" rel="noopener">http://localhost:8080/TomcatTest/UnKonwPage），那么它将显示下面的结果：</a></p><p><a href="https://imgchr.com/i/0UNCE8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/06/0UNCE8.png" alt="0UNCE8.png"></a></p><hr><h2 id="🌸Servlet-Cookie-处理"><a href="#🌸Servlet-Cookie-处理" class="headerlink" title="🌸Servlet  Cookie 处理"></a>🌸Servlet  Cookie 处理</h2><p>Cookie 是存储在客户端计算机上的文本文件，并保留了各种跟踪信息。Java Servlet 显然支持 HTTP Cookie。</p><p>识别返回用户包括三个步骤：</p><ul><li>服务器脚本向浏览器发送一组 Cookie。例如：姓名、年龄或识别号码等。</li><li>浏览器将这些信息存储在本地计算机上，以备将来使用。</li><li>当下一次浏览器向 Web 服务器发送任何请求时，浏览器会把这些 Cookie 信息发送到服务器，服务器将使用这些信息来识别用户。</li></ul><p>本章将向您讲解如何设置或重置 Cookie，如何访问它们，以及如何将它们删除。</p><p>Servlet Cookie 处理需要对中文进行编码与解码，方法如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String   str   =   java.net.URLEncoder.encode(<span class="string">"中文"</span>，<span class="string">"UTF-8"</span>);            <span class="comment">//编码</span></span><br><span class="line">String   str   =   java.net.URLDecoder.decode(<span class="string">"编码后的字符串"</span>,<span class="string">"UTF-8"</span>);   <span class="comment">// 解码</span></span><br></pre></td></tr></tbody></table></figure><h3 id="🍁Cookie-剖析"><a href="#🍁Cookie-剖析" class="headerlink" title="🍁Cookie 剖析"></a>🍁Cookie 剖析</h3><p>Cookie 通常设置在 HTTP 头信息中（虽然 JavaScript 也可以直接在浏览器上设置一个 Cookie）。设置 Cookie 的 Servlet 会发送如下的头信息：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Fri, <span class="number">04</span> Feb <span class="number">2000</span> <span class="number">21</span>:<span class="number">03</span>:<span class="number">38</span> GMT</span><br><span class="line">Server: Apache/<span class="number">1.3</span><span class="number">.9</span> (UNIX) PHP/<span class="number">4.0</span>b3</span><br><span class="line">Set-Cookie: name=xyz; expires=Friday, <span class="number">04</span>-Feb-<span class="number">07</span> <span class="number">22</span>:<span class="number">03</span>:<span class="number">38</span> GMT; </span><br><span class="line">                 path=/; domain=runoob.com</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html</span><br></pre></td></tr></tbody></table></figure><p>正如您所看到的，Set-Cookie 头包含了一个名称值对、一个 GMT 日期、一个路径和一个域。名称和值会被 URL 编码。expires 字段是一个指令，告诉浏览器在给定的时间和日期之后”忘记”该 Cookie。</p><p>如果浏览器被配置为存储 Cookie，它将会保留此信息直到到期日期。如果用户的浏览器指向任何匹配该 Cookie 的路径和域的页面，它会重新发送 Cookie 到服务器。浏览器的头信息可能如下所示：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.0</span></span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">User-Agent: Mozilla/<span class="number">4.6</span> (X11; I; Linux <span class="number">2.2</span><span class="number">.6</span><span class="number">-15</span>apmac ppc)</span><br><span class="line">Host: zink.demon.co.uk:<span class="number">1126</span></span><br><span class="line">Accept: image/gif, *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">Accept-Charset: iso-8859-1,*,utf-8</span></span><br><span class="line"><span class="comment">Cookie: name=xyz</span></span><br></pre></td></tr></tbody></table></figure><p>Servlet 就能够通过请求方法 <em>request.getCookies()</em> 访问 Cookie，该方法将返回一个 <em>Cookie</em> 对象的数组。</p><h3 id="🍁Servlet-Cookie-方法"><a href="#🍁Servlet-Cookie-方法" class="headerlink" title="🍁Servlet Cookie 方法"></a>🍁Servlet Cookie 方法</h3><p>以下是在 Servlet 中操作 Cookie 时可使用的有用的方法列表。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void setDomain(String pattern)</strong> 该方法设置 cookie 适用的域，例如 runoob.com。</td></tr><tr><td align="left">2</td><td align="left"><strong>public String getDomain()</strong> 该方法获取 cookie 适用的域，例如 runoob.com。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void setMaxAge(int expiry)</strong> 该方法设置 cookie 过期的时间（以秒为单位）。如果不这样设置，cookie 只会在当前 session 会话中持续有效。</td></tr><tr><td align="left">4</td><td align="left"><strong>public int getMaxAge()</strong> 该方法返回 cookie 的最大生存周期（以秒为单位），默认情况下，-1 表示 cookie 将持续下去，直到浏览器关闭。</td></tr><tr><td align="left">5</td><td align="left"><strong>public String getName()</strong> 该方法返回 cookie 的名称。名称在创建后不能改变。</td></tr><tr><td align="left">6</td><td align="left"><strong>public void setValue(String newValue)</strong> 该方法设置与 cookie 关联的值。</td></tr><tr><td align="left">7</td><td align="left"><strong>public String getValue()</strong> 该方法获取与 cookie 关联的值。</td></tr><tr><td align="left">8</td><td align="left"><strong>public void setPath(String uri)</strong> 该方法设置 cookie 适用的路径。如果您不指定路径，与当前页面相同目录下的（包括子目录下的）所有 URL 都会返回 cookie。</td></tr><tr><td align="left">9</td><td align="left"><strong>public String getPath()</strong> 该方法获取 cookie 适用的路径。</td></tr><tr><td align="left">10</td><td align="left"><strong>public void setSecure(boolean flag)</strong> 该方法设置布尔值，表示 cookie 是否应该只在加密的（即 SSL）连接上发送。</td></tr><tr><td align="left">11</td><td align="left"><strong>public void setComment(String purpose)</strong> 设置cookie的注释。该注释在浏览器向用户呈现 cookie 时非常有用。</td></tr><tr><td align="left">12</td><td align="left"><strong>public String getComment()</strong> 获取 cookie 的注释，如果 cookie 没有注释则返回 null。</td></tr></tbody></table><h3 id="🍁通过-Servlet-设置-Cookie"><a href="#🍁通过-Servlet-设置-Cookie" class="headerlink" title="🍁通过 Servlet 设置 Cookie"></a>🍁通过 Servlet 设置 Cookie</h3><p>通过 Servlet 设置 Cookie 包括三个步骤：</p><p><strong>(1) 创建一个 Cookie 对象：</strong>您可以调用带有 cookie 名称和 cookie 值的 Cookie 构造函数，cookie 名称和 cookie 值都是字符串。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"key"</span>,<span class="string">"value"</span>);</span><br></pre></td></tr></tbody></table></figure><p>请记住，无论是名字还是值，都不应该包含空格或以下任何字符：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ ] ( ) = , <span class="string">" / ? @ : ;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>(2) 设置最大生存周期：</strong>您可以使用 setMaxAge 方法来指定 cookie 能够保持有效的时间（以秒为单位）。下面将设置一个最长有效期为 24 小时的 cookie。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>(3) 发送 Cookie 到 HTTP 响应头：</strong>您可以使用 <strong>response.addCookie</strong> 来添加 HTTP 响应头中的 Cookie，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁实例"><a href="#🍁实例" class="headerlink" title="🍁实例"></a>🍁实例</h3><p>让我们修改我们的 <a href="">表单数据实例</a>，为名字和姓氏设置 Cookie。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/HelloForm"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloForm</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloForm</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 为名字和姓氏创建 Cookie      </span></span><br><span class="line">        Cookie name = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>,</span><br><span class="line">                URLEncoder.encode(request.getParameter(<span class="string">"name"</span>), <span class="string">"UTF-8"</span>)); <span class="comment">// 中文转码</span></span><br><span class="line">        Cookie url = <span class="keyword">new</span> Cookie(<span class="string">"url"</span>,</span><br><span class="line">                      request.getParameter(<span class="string">"url"</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 为两个 Cookie 设置过期日期为 24 小时后</span></span><br><span class="line">        name.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>); </span><br><span class="line">        url.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在响应头中添加两个 Cookie</span></span><br><span class="line">        response.addCookie( name );</span><br><span class="line">        response.addCookie( url );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"设置 Cookie 实例"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">                <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;ul&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;站点名：&lt;/b&gt;："</span></span><br><span class="line">                + request.getParameter(<span class="string">"name"</span>) + <span class="string">"\n&lt;/li&gt;"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;站点 URL：&lt;/b&gt;："</span></span><br><span class="line">                + request.getParameter(<span class="string">"url"</span>) + <span class="string">"\n&lt;/li&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;/ul&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译上面的 Servlet <strong>HelloForm</strong>，并在 web.xml 文件中创建适当的条目:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloForm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.HelloForm<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloForm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/HelloForm<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>最后尝试下面的 HTML 页面来调用 Servlet。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>云澈<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/TomcatTest/HelloForm"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">站点名 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">站点 URL：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>保存上面的 HTML 内容到文件 /TomcatTest/test.html 中。</p><p>接下来我们访问<a href="http://localhost:8080/TomcatTest/test.html，如下：" target="_blank" rel="noopener">http://localhost:8080/TomcatTest/test.html，如下：</a></p><p><img src="https://s1.ax1x.com/2020/10/08/007Dl8.png" alt="007Dl8.png"></p><p><img src="https://s1.ax1x.com/2020/10/08/007WYq.png" alt="007WYq.png"></p><h3 id="🍁通过-Servlet-读取-Cookie"><a href="#🍁通过-Servlet-读取-Cookie" class="headerlink" title="🍁通过 Servlet 读取 Cookie"></a>🍁通过 Servlet 读取 Cookie</h3><p>要读取 Cookie，您需要通过调用 <em>HttpServletRequest</em> 的 <strong>getCookies( )</strong> 方法创建一个 <em>javax.servlet.http.Cookie</em> 对象的数组。然后循环遍历数组，并使用 getName() 和 getValue() 方法来访问每个 cookie 和关联的值。</p><h4 id="🍂-实例"><a href="#🍂-实例" class="headerlink" title="🍂 实例"></a>🍂 实例</h4><p>让我们读取上面的实例中设置的 Cookie</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ReadCookies</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ReadCookies"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadCookies</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReadCookies</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        Cookie cookie = <span class="keyword">null</span>;</span><br><span class="line">        Cookie[] cookies = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 获取与该域相关的 Cookie 的数组</span></span><br><span class="line">        cookies = request.getCookies();</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 设置响应内容类型</span></span><br><span class="line">         response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    </span><br><span class="line">         PrintWriter out = response.getWriter();</span><br><span class="line">         String title = <span class="string">"Delete Cookie Example"</span>;</span><br><span class="line">         String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">         out.println(docType +</span><br><span class="line">                   <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                   <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                   <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> );</span><br><span class="line">          <span class="keyword">if</span>( cookies != <span class="keyword">null</span> ){</span><br><span class="line">            out.println(<span class="string">"&lt;h2&gt;Cookie 名称和值&lt;/h2&gt;"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++){</span><br><span class="line">               cookie = cookies[i];</span><br><span class="line">               <span class="keyword">if</span>((cookie.getName( )).compareTo(<span class="string">"name"</span>) == <span class="number">0</span> ){</span><br><span class="line">                    cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line">                    out.print(<span class="string">"已删除的 cookie："</span> + </span><br><span class="line">                                 cookie.getName( ) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">               }</span><br><span class="line">               out.print(<span class="string">"名称："</span> + cookie.getName( ) + <span class="string">"，"</span>);</span><br><span class="line">               out.print(<span class="string">"值："</span> +  URLDecoder.decode(cookie.getValue(), <span class="string">"utf-8"</span>) +<span class="string">" &lt;br/&gt;"</span>);</span><br><span class="line">            }</span><br><span class="line">         }<span class="keyword">else</span>{</span><br><span class="line">             out.println(</span><br><span class="line">               <span class="string">"&lt;h2 class=\"tutheader\"&gt;No Cookie founds&lt;/h2&gt;"</span>);</span><br><span class="line">         }</span><br><span class="line">         out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">         out.println(<span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁通过-Servlet-删除-Cookie"><a href="#🍁通过-Servlet-删除-Cookie" class="headerlink" title="🍁通过 Servlet 删除 Cookie"></a>🍁通过 Servlet 删除 Cookie</h3><p>删除 Cookie 是非常简单的。如果您想删除一个 cookie，那么您只需要按照以下三个步骤进行：</p><ul><li>读取一个现有的 cookie，并把它存储在 Cookie 对象中。</li><li>使用 <strong>setMaxAge()</strong> 方法设置 cookie 的年龄为零，来删除现有的 cookie。</li><li>把这个 cookie 添加到响应头。</li></ul><h4 id="🍂实例"><a href="#🍂实例" class="headerlink" title="🍂实例"></a>🍂实例</h4><p>下面的例子将删除现有的名为 “url” 的 cookie，当您下次运行 ReadCookies 的 Servlet 时，它会返回 url 为 null。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class DeleteCookies</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/DeleteCookies"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteCookies</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeleteCookies</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        Cookie cookie = <span class="keyword">null</span>;</span><br><span class="line">        Cookie[] cookies = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 获取与该域相关的 Cookie 的数组</span></span><br><span class="line">        cookies = request.getCookies();</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">   </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"删除 Cookie 实例"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">                  <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                  <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                  <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> );</span><br><span class="line">         <span class="keyword">if</span>( cookies != <span class="keyword">null</span> ){</span><br><span class="line">           out.println(<span class="string">"&lt;h2&gt;Cookie 名称和值&lt;/h2&gt;"</span>);</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++){</span><br><span class="line">              cookie = cookies[i];</span><br><span class="line">              <span class="keyword">if</span>((cookie.getName( )).compareTo(<span class="string">"url"</span>) == <span class="number">0</span> ){</span><br><span class="line">                   cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">                   response.addCookie(cookie);</span><br><span class="line">                   out.print(<span class="string">"已删除的 cookie："</span> + </span><br><span class="line">                                cookie.getName( ) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">              }</span><br><span class="line">              out.print(<span class="string">"名称："</span> + cookie.getName( ) + <span class="string">"，"</span>);</span><br><span class="line">              out.print(<span class="string">"值："</span> + cookie.getValue( )+<span class="string">" &lt;br/&gt;"</span>);</span><br><span class="line">           }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            out.println(</span><br><span class="line">              <span class="string">"&lt;h2 class=\"tutheader\"&gt;No Cookie founds&lt;/h2&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line">        out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸Servlet-Session-跟踪"><a href="#🌸Servlet-Session-跟踪" class="headerlink" title="🌸Servlet Session 跟踪"></a>🌸Servlet Session 跟踪</h2><p>HTTP 是一种”无状态”协议，这意味着每次客户端检索网页时，客户端打开一个单独的连接到 Web 服务器，服务器会自动不保留之前客户端请求的任何记录。</p><p>但是仍然有以下三种方式来维持 Web 客户端和 Web 服务器之间的 session 会话：</p><h3 id="🍁Cookies"><a href="#🍁Cookies" class="headerlink" title="🍁Cookies"></a>🍁Cookies</h3><p>一个 Web 服务器可以分配一个唯一的 session 会话 ID 作为每个 Web 客户端的 cookie，对于客户端的后续请求可以使用接收到的 cookie 来识别。</p><p>这可能不是一个有效的方法，因为很多浏览器不支持 cookie，所以我们建议不要使用这种方式来维持 session 会话。</p><h3 id="🍁隐藏的表单字段"><a href="#🍁隐藏的表单字段" class="headerlink" title="🍁隐藏的表单字段"></a>🍁隐藏的表单字段</h3><h3 id="🍁Servlet一个-Web-服务器可以发送一个隐藏的-HTML-表单字段，以及一个唯一的-session-会话-ID，如下所示："><a href="#🍁Servlet一个-Web-服务器可以发送一个隐藏的-HTML-表单字段，以及一个唯一的-session-会话-ID，如下所示：" class="headerlink" title="🍁Servlet一个 Web 服务器可以发送一个隐藏的 HTML 表单字段，以及一个唯一的 session 会话 ID，如下所示："></a>🍁Servlet一个 Web 服务器可以发送一个隐藏的 HTML 表单字段，以及一个唯一的 session 会话 ID，如下所示：</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"sessionid"</span> value=<span class="string">"12345"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>该条目意味着，当表单被提交时，指定的名称和值会被自动包含在 GET 或 POST 数据中。每次当 Web 浏览器发送回请求时，session_id 值可以用于保持不同的 Web 浏览器的跟踪。</p><p>这可能是一种保持 session 会话跟踪的有效方式，但是点击常规的超文本链接（<a href...="">）不会导致表单提交，因此隐藏的表单字段也不支持常规的 session 会话跟踪。</a></p><a href...=""></a><h3 id="🍁URL-重写"><a href...=""></a><a href="#🍁URL-重写" class="headerlink" title="🍁URL 重写"></a>🍁URL 重写</h3><p>您可以在每个 URL 末尾追加一些额外的数据来标识 session 会话，服务器会把该 session 会话标识符与已存储的有关 session 会话的数据相关联。</p><p>例如，http://w3cschool.cc/file.htm;sessionid=12345，session 会话标识符被附加为 sessionid=12345，标识符可被 Web 服务器访问以识别客户端。</p><p>URL 重写是一种更好的维持 session 会话的方式，它在浏览器不支持 cookie 时能够很好地工作，但是它的缺点是会动态生成每个 URL 来为页面分配一个 session 会话 ID，即使是在很简单的静态 HTML 页面中也会如此。</p><h3 id="🍁HttpSession-对象"><a href="#🍁HttpSession-对象" class="headerlink" title="🍁HttpSession 对象"></a>🍁HttpSession 对象</h3><p>除了上述的三种方式，Servlet 还提供了 HttpSession 接口，该接口提供了一种跨多个页面请求或访问网站时识别用户以及存储有关用户信息的方式。</p><p>Servlet 容器使用这个接口来创建一个 HTTP 客户端和 HTTP 服务器之间的 session 会话。会话持续一个指定的时间段，跨多个连接或页面请求。</p><p>您会通过调用 HttpServletRequest 的公共方法 <strong>getSession()</strong> 来获取 HttpSession 对象，如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br></pre></td></tr></tbody></table></figure><p>你需要在向客户端发送任何文档内容之前调用 <em>request.getSession()</em>。下面总结了 HttpSession 对象中可用的几个重要的方法：</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public Object getAttribute(String name)</strong> 该方法返回在该 session 会话中具有指定名称的对象，如果没有指定名称的对象，则返回 null。</td></tr><tr><td align="left">2</td><td align="left"><strong>public Enumeration getAttributeNames()</strong> 该方法返回 String 对象的枚举，String 对象包含所有绑定到该 session 会话的对象的名称。</td></tr><tr><td align="left">3</td><td align="left"><strong>public long getCreationTime()</strong> 该方法返回该 session 会话被创建的时间，自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。</td></tr><tr><td align="left">4</td><td align="left"><strong>public String getId()</strong> 该方法返回一个包含分配给该 session 会话的唯一标识符的字符串。</td></tr><tr><td align="left">5</td><td align="left"><strong>public long getLastAccessedTime()</strong> 该方法返回客户端最后一次发送与该 session 会话相关的请求的时间自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。</td></tr><tr><td align="left">6</td><td align="left"><strong>public int getMaxInactiveInterval()</strong> 该方法返回 Servlet 容器在客户端访问时保持 session 会话打开的最大时间间隔，以秒为单位。</td></tr><tr><td align="left">7</td><td align="left"><strong>public void invalidate()</strong> 该方法指示该 session 会话无效，并解除绑定到它上面的任何对象。</td></tr><tr><td align="left">8</td><td align="left"><strong>public boolean isNew()</strong> 如果客户端还不知道该 session 会话，或者如果客户选择不参入该 session 会话，则该方法返回 true。</td></tr><tr><td align="left">9</td><td align="left"><strong>public void removeAttribute(String name)</strong> 该方法将从该 session 会话移除指定名称的对象。</td></tr><tr><td align="left">10</td><td align="left"><strong>public void setAttribute(String name, Object value)</strong>  该方法使用指定的名称绑定一个对象到该 session 会话。</td></tr><tr><td align="left">11</td><td align="left"><strong>public void setMaxInactiveInterval(int interval)</strong> 该方法在 Servlet 容器指示该 session 会话无效之前，指定客户端请求之间的时间，以秒为单位。</td></tr></tbody></table><h3 id="🍁Session-跟踪实例"><a href="#🍁Session-跟踪实例" class="headerlink" title="🍁Session 跟踪实例"></a>🍁Session 跟踪实例</h3><p>本实例说明了如何使用 HttpSession 对象获取 session 会话创建时间和最后访问时间。如果不存在 session 会话，我们将通过请求创建一个新的 session 会话。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class SessionTrack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/SessionTrack"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionTrack</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 如果不存在 session 会话，则创建一个 session 对象</span></span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 获取 session 创建时间</span></span><br><span class="line">        Date createTime = <span class="keyword">new</span> Date(session.getCreationTime());</span><br><span class="line">        <span class="comment">// 获取该网页的最后一次访问时间</span></span><br><span class="line">        Date lastAccessTime = <span class="keyword">new</span> Date(session.getLastAccessedTime());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//设置日期输出的格式  </span></span><br><span class="line">        SimpleDateFormat df=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">    </span><br><span class="line">        String title = <span class="string">"Servlet Session 实例 - 云澈"</span>;</span><br><span class="line">        Integer visitCount = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">        String visitCountKey = <span class="keyword">new</span> String(<span class="string">"visitCount"</span>);</span><br><span class="line">        String userIDKey = <span class="keyword">new</span> String(<span class="string">"userID"</span>);</span><br><span class="line">        String userID = <span class="keyword">new</span> String(<span class="string">"Runoob"</span>);</span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(visitCountKey) == <span class="keyword">null</span>) {</span><br><span class="line">            session.setAttribute(visitCountKey, <span class="keyword">new</span> Integer(<span class="number">0</span>));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 检查网页上是否有新的访问者</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew()){</span><br><span class="line">            title = <span class="string">"Servlet Session 实例 - 云澈"</span>;</span><br><span class="line">             session.setAttribute(userIDKey, userID);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">             visitCount = (Integer)session.getAttribute(visitCountKey);</span><br><span class="line">             visitCount = visitCount + <span class="number">1</span>;</span><br><span class="line">             userID = (String)session.getAttribute(userIDKey);</span><br><span class="line">        }</span><br><span class="line">        session.setAttribute(visitCountKey,  visitCount);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">    </span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">                <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">                 <span class="string">"&lt;h2 align=\"center\"&gt;Session 信息&lt;/h2&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;table border=\"1\" align=\"center\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr bgcolor=\"#949494\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;th&gt;Session 信息&lt;/th&gt;&lt;th&gt;值&lt;/th&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;id&lt;/td&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;"</span> + session.getId() + <span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;创建时间&lt;/td&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;"</span> +  df.format(createTime) + </span><br><span class="line">                <span class="string">"  &lt;/td&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;最后访问时间&lt;/td&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;"</span> + df.format(lastAccessTime) + </span><br><span class="line">                <span class="string">"  &lt;/td&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;用户 ID&lt;/td&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;"</span> + userID + </span><br><span class="line">                <span class="string">"  &lt;/td&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;访问统计：&lt;/td&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;"</span> + visitCount + <span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/table&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>); </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译上面的 Servlet <strong>SessionTrack</strong>，并在 web.xml 文件中创建适当的条目。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SessionTrack<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.SessionTrack<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SessionTrack<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/SessionTrack<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在浏览器地址栏输入 <em>http://localhost:8080/TomcatTest/SessionTrack</em>，当您第一次运行时将显示如下结果：</p><p><a href="https://imgchr.com/i/0rsYND" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/09/0rsYND.png" alt="0rsYND.png"></a></p><p>再次尝试运行相同的 Servlet，它将显示如下结果</p><p><a href="https://imgchr.com/i/0rsBut" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/09/0rsBut.png" alt="0rsBut.png"></a></p><h3 id="🍁删除-Session-会话数据"><a href="#🍁删除-Session-会话数据" class="headerlink" title="🍁删除 Session 会话数据"></a>🍁删除 Session 会话数据</h3><p>当您完成了一个用户的 session 会话数据，您有以下几种选择：</p><ul><li><strong>移除一个特定的属性：</strong>您可以调用 <em>public void removeAttribute(String name)</em> 方法来删除与特定的键相关联的值。</li><li><strong>删除整个 session 会话：</strong>您可以调用 <em>public void invalidate()</em> 方法来丢弃整个 session 会话。</li><li><strong>设置 session 会话过期时间：</strong>您可以调用 <em>public void setMaxInactiveInterval(int interval)</em> 方法来单独设置 session 会话超时。</li><li><strong>注销用户：</strong>如果使用的是支持 servlet 2.4 的服务器，您可以调用 <strong>logout</strong> 来注销 Web 服务器的客户端，并把属于所有用户的所有 session 会话设置为无效。</li><li><strong>web.xml 配置：</strong>如果您使用的是 Tomcat，除了上述方法，您还可以在 web.xml 文件中配置 session 会话超时，如下所示：</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上面实例中的超时时间是以分钟为单位，将覆盖 Tomcat 中默认的 30 分钟超时时间。</p><p>在一个 Servlet 中的 getMaxInactiveInterval() 方法会返回 session 会话的超时时间，以秒为单位。所以，如果在 web.xml 中配置 session 会话超时时间为 15 分钟，那么 getMaxInactiveInterval() 会返回 900。</p><h2 id="🌸Servlet数据库访问"><a href="#🌸Servlet数据库访问" class="headerlink" title="🌸Servlet数据库访问"></a>🌸Servlet数据库访问</h2><blockquote><p>在 java 项目中，只需要在 Eclipse 中引入 mysql-connector-java-5.1.39-bin.jar 就可以运行java项目。</p><p>但是在 Eclipse web 项目中，当执行 Class.forName(“com.mysql.jdbc.Driver”);时 不会去查找驱动的。所以本实例中我们需要把 mysql-connector-java-5.1.39-bin.jar 拷贝到 tomcat 下 lib 目录。</p></blockquote><h3 id="🍁创建测试数据"><a href="#🍁创建测试数据" class="headerlink" title="🍁创建测试数据"></a>🍁创建测试数据</h3><p>接下来我们在 MySQL 中创建 RUNOOB 数据库，并创建 websites 数据表，表结构如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`websites`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'站点名称'</span>,</span><br><span class="line">  <span class="string">`url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`alexa`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'Alexa 排名'</span>,</span><br><span class="line">  <span class="string">`country`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'国家'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">10</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></tbody></table></figure><p>插入一些数据：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`websites`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'Google'</span>, <span class="string">'https://www.google.cm/'</span>, <span class="string">'1'</span>, <span class="string">'USA'</span>), (<span class="string">'2'</span>, <span class="string">'淘宝'</span>, <span class="string">'https://www.taobao.com/'</span>, <span class="string">'13'</span>, <span class="string">'CN'</span>), (<span class="string">'3'</span>, <span class="string">'菜鸟教程'</span>, <span class="string">'http://www.runoob.com'</span>, <span class="string">'5892'</span>, <span class="string">''</span>), (<span class="string">'4'</span>, <span class="string">'微博'</span>, <span class="string">'http://weibo.com/'</span>, <span class="string">'20'</span>, <span class="string">'CN'</span>), (<span class="string">'5'</span>, <span class="string">'Facebook'</span>, <span class="string">'https://www.facebook.com/'</span>, <span class="string">'3'</span>, <span class="string">'USA'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁访问数据库"><a href="#🍁访问数据库" class="headerlink" title="🍁访问数据库"></a>🍁访问数据库</h3><p>下面的实例演示了如何使用 Servlet 访问 RUNOOB 数据库。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class DatabaseAccess</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/DatabaseAccess"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseAccess</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">// JDBC 驱动名及数据库 URL</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">"jdbc:mysql://localhost:3306/RUNOOB"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">"123456"</span>; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseAccess</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"Servlet Mysql 测试 - 菜鸟教程"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">        <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span>);</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            <span class="comment">// 注册 JDBC 驱动器</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 打开一个连接</span></span><br><span class="line">            conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行 SQL 查询</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            String sql;</span><br><span class="line">            sql = <span class="string">"SELECT id, name, url FROM websites"</span>;</span><br><span class="line">            ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 展开结果集数据库</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next()){</span><br><span class="line">                <span class="comment">// 通过字段检索</span></span><br><span class="line">                <span class="keyword">int</span> id  = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">                String url = rs.getString(<span class="string">"url"</span>);</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// 输出数据</span></span><br><span class="line">                out.println(<span class="string">"ID: "</span> + id);</span><br><span class="line">                out.println(<span class="string">", 站点名称: "</span> + name);</span><br><span class="line">                out.println(<span class="string">", 站点 URL: "</span> + url);</span><br><span class="line">                out.println(<span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line">            }</span><br><span class="line">            out.println(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 完成后关闭</span></span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        } <span class="keyword">catch</span>(SQLException se) {</span><br><span class="line">            <span class="comment">// 处理 JDBC 错误</span></span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span>(Exception e) {</span><br><span class="line">            <span class="comment">// 处理 Class.forName 错误</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }<span class="keyword">finally</span>{</span><br><span class="line">            <span class="comment">// 最后是用于关闭资源的块</span></span><br><span class="line">            <span class="keyword">try</span>{</span><br><span class="line">                <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)</span><br><span class="line">                stmt.close();</span><br><span class="line">            }<span class="keyword">catch</span>(SQLException se2){</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">try</span>{</span><br><span class="line">                <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">            }<span class="keyword">catch</span>(SQLException se){</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">       </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在让我们来编译上面的 Servlet，并在 web.xml 文件中创建以下条目：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DatabaseAccess<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.DatabaseAccess<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DatabaseAccess<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/DatabaseAccess<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="🍁笔记"><a href="#🍁笔记" class="headerlink" title="🍁笔记"></a>🍁笔记</h3><p>进行数据库插入操作的时候使用 PreparedStatement 更好，好处如下：</p><ul><li>1.PreparedStatement可以写动态参数化的查询；</li><li>2.PreparedStatement比 Statement 更快；</li><li>3.PreparedStatement可以防止SQL注入式攻击</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写预处理 SQL 语句</span></span><br><span class="line">String sql= <span class="string">"INSERT INTO websites1 VALUES(?,?,?,?,?)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化 PreparedStatement</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入参数，这里的参数来自于一个带有表单的jsp文件，很容易实现</span></span><br><span class="line">ps.setString(<span class="number">1</span>, request.getParameter(<span class="string">"id"</span>));</span><br><span class="line">ps.setString(<span class="number">2</span>, request.getParameter(<span class="string">"name"</span>));</span><br><span class="line">ps.setString(<span class="number">3</span>, request.getParameter(<span class="string">"url"</span>));</span><br><span class="line">ps.setString(<span class="number">4</span>, request.getParameter(<span class="string">"alexa"</span>));</span><br><span class="line">ps.setString(<span class="number">5</span>, request.getParameter(<span class="string">"country"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行数据库更新操作，不需要SQL语句</span></span><br><span class="line">ps.executeUpdate();</span><br><span class="line">sql = <span class="string">"SELECT id, name, url FROM websites1"</span>;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取查询结果</span></span><br><span class="line">ResultSet rs = ps.executeQuery();</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁注意"><a href="#🍁注意" class="headerlink" title="🍁注意"></a>🍁注意</h3><p>由于更新的 MySQL8.0，所以本网站提供的 jar 包：<strong>mysql-connector-java-5.1.39-bin.jar</strong> 就不能用了，连接时会报：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server</span><br></pre></td></tr></tbody></table></figure><p>这个异常。</p><p>需要重新下载，下载地址 <a href="https://dev.mysql.com/downloads/file/?id=484819，暂时我下载到的是" target="_blank" rel="noopener">https://dev.mysql.com/downloads/file/?id=484819，暂时我下载到的是</a> <strong>mysql-connector-java-8.0.15</strong> 替换这个 jar 包后，又出现异常 <strong>java.sql.SQLException: The server time zone value</strong>，只需在数据库地址后边添加 <strong>serverTimezone=UTC</strong> 即可，例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DB_URL = <span class="string">"jdbc:mysql://localhost:3306/servlet_db?serverTimezone=UTC"</span>;</span><br></pre></td></tr></tbody></table></figure><p>还有注册 jdbc 的驱动也换了。</p><p>注册 JDBC 驱动器：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸Servlet-文件上传"><a href="#🌸Servlet-文件上传" class="headerlink" title="🌸Servlet 文件上传"></a>🌸Servlet 文件上传</h2><p>Servlet 可以与 HTML form 标签一起使用，来允许用户上传文件到服务器。上传的文件可以是文本文件或图像文件或任何文档。</p><p>本文使用到的文件有：</p><ul><li>upload.jsp : 文件上传表单。</li><li>message.jsp : 上传成功后跳转页面。</li><li>UploadServlet.java : 上传处理 Servlet。</li><li>需要引入的 jar 文件：commons-fileupload-1.4、commons-io-2.8.jar。</li><li><em>Servlet3.0 已经内置了文件上传这一特性，开发者不再需要将 Commons FileUpload 组件导入到工程中去。</em></li></ul><h3 id="🍁创建一个文件上传表单"><a href="#🍁创建一个文件上传表单" class="headerlink" title="🍁创建一个文件上传表单"></a>🍁创建一个文件上传表单</h3><p>下面的 HTML 代码创建了一个文件上传表单。以下几点需要注意：</p><ul><li>表单 <strong>method</strong> 属性应该设置为 <strong>POST</strong> 方法，不能使用 GET 方法。</li><li>表单 <strong>enctype</strong> 属性应该设置为 <strong>multipart/form-data</strong>.</li><li>表单 <strong>action</strong> 属性应该设置为在后端服务器上处理文件上传的 Servlet 文件。下面的实例使用了 <strong>UploadServlet</strong> Servlet 来上传文件。</li><li>上传单个文件，您应该使用单个带有属性 type=”file” 的 &lt;input …/&gt; 标签。为了允许多个文件上传，请包含多个 name 属性值不同的 input 标签。输入标签具有不同的名称属性的值。浏览器会为每个 input 标签关联一个浏览按钮。</li></ul><p>upload.jsp 文件代码如下：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;文件上传实例 - 云澈&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;文件上传实例 - 云澈&lt;/h1&gt;</span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"/TomcatTest/UploadServlet"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    选择一个文件:</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span> /&gt;</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁编写后台-Servlet"><a href="#🍁编写后台-Servlet" class="headerlink" title="🍁编写后台 Servlet"></a>🍁编写后台 Servlet</h3><p>以下是 UploadServlet 的源代码，同于处理文件上传，在这之前我们先确保依赖包已经引入到项目的 WEB-INF/lib 目录下：</p><ul><li>下面的实例依赖于 FileUpload，所以一定要确保在您的 classpath 中有最新版本的 <strong>commons-fileupload.x.x.jar</strong>文件。可以从 <a href="http://commons.apache.org/proper/commons-fileupload/" target="_blank" rel="noopener">http://commons.apache.org/proper/commons-fileupload/</a> 下载。</li><li>FileUpload 依赖于 Commons IO，所以一定要确保在您的 classpath 中有最新版本的 <strong>commons-io-x.x.jar</strong> 文件。可以从 <a href="http://commons.apache.org/proper/commons-io/" target="_blank" rel="noopener">http://commons.apache.org/proper/commons-io/</a> 下载。</li></ul><p>UploadServlet 的源代码 如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class UploadServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/UploadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 上传文件存储目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UPLOAD_DIRECTORY = <span class="string">"upload"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 上传配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MEMORY_THRESHOLD   = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">3</span>;  <span class="comment">// 3MB</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_FILE_SIZE      = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">40</span>; <span class="comment">// 40MB</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_REQUEST_SIZE   = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span>; <span class="comment">// 50MB</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传数据及保存文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// 检测是否为多媒体上传</span></span><br><span class="line">        <span class="keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) {</span><br><span class="line">            <span class="comment">// 如果不是则停止</span></span><br><span class="line">            PrintWriter writer = response.getWriter();</span><br><span class="line">            writer.println(<span class="string">"Error: 表单必须包含 enctype=multipart/form-data"</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 配置上传参数</span></span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">        <span class="comment">// 设置内存临界值 - 超过后将产生临时文件并存储于临时目录中</span></span><br><span class="line">        factory.setSizeThreshold(MEMORY_THRESHOLD);</span><br><span class="line">        <span class="comment">// 设置临时存储目录</span></span><br><span class="line">        factory.setRepository(<span class="keyword">new</span> File(System.getProperty(<span class="string">"java.io.tmpdir"</span>)));</span><br><span class="line"> </span><br><span class="line">        ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 设置最大文件上传值</span></span><br><span class="line">        upload.setFileSizeMax(MAX_FILE_SIZE);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 设置最大请求值 (包含文件和表单数据)</span></span><br><span class="line">        upload.setSizeMax(MAX_REQUEST_SIZE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中文处理</span></span><br><span class="line">        upload.setHeaderEncoding(<span class="string">"UTF-8"</span>); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造临时路径来存储上传的文件</span></span><br><span class="line">        <span class="comment">// 这个路径相对当前应用的目录</span></span><br><span class="line">        String uploadPath = request.getServletContext().getRealPath(<span class="string">"./"</span>) + File.separator + UPLOAD_DIRECTORY;</span><br><span class="line">       </span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 如果目录不存在则创建</span></span><br><span class="line">        File uploadDir = <span class="keyword">new</span> File(uploadPath);</span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists()) {</span><br><span class="line">            uploadDir.mkdir();</span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 解析请求的内容提取文件数据</span></span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            List&lt;FileItem&gt; formItems = upload.parseRequest(request);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (formItems != <span class="keyword">null</span> &amp;&amp; formItems.size() &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// 迭代表单数据</span></span><br><span class="line">                <span class="keyword">for</span> (FileItem item : formItems) {</span><br><span class="line">                    <span class="comment">// 处理不在表单中的字段</span></span><br><span class="line">                    <span class="keyword">if</span> (!item.isFormField()) {</span><br><span class="line">                        String fileName = <span class="keyword">new</span> File(item.getName()).getName();</span><br><span class="line">                        String filePath = uploadPath + File.separator + fileName;</span><br><span class="line">                        File storeFile = <span class="keyword">new</span> File(filePath);</span><br><span class="line">                        <span class="comment">// 在控制台输出文件的上传路径</span></span><br><span class="line">                        System.out.println(filePath);</span><br><span class="line">                        <span class="comment">// 保存文件到硬盘</span></span><br><span class="line">                        item.write(storeFile);</span><br><span class="line">                        request.setAttribute(<span class="string">"message"</span>,</span><br><span class="line">                            <span class="string">"文件上传成功!"</span>);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Exception ex) {</span><br><span class="line">            request.setAttribute(<span class="string">"message"</span>,</span><br><span class="line">                    <span class="string">"错误信息: "</span> + ex.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 跳转到 message.jsp</span></span><br><span class="line">        request.getServletContext().getRequestDispatcher(<span class="string">"/message.jsp"</span>).forward(</span><br><span class="line">                request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>message.jsp 文件代码如下：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;文件上传结果&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">        &lt;h2&gt;${message}&lt;/h2&gt;</span><br><span class="line">    &lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁编译和运行-Servlet"><a href="#🍁编译和运行-Servlet" class="headerlink" title="🍁编译和运行 Servlet"></a>🍁编译和运行 Servlet</h3><p>编译上面的 Servlet UploadServlet，并在 web.xml 文件中创建所需的条目，如下所示：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee   </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">     <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.UploadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/UploadServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="🌸Servlet-处理日期"><a href="#🌸Servlet-处理日期" class="headerlink" title="🌸Servlet 处理日期"></a>🌸Servlet 处理日期</h2><p>Date 类支持两个构造函数。第一个构造函数初始化当前日期和时间的对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date( )</span><br></pre></td></tr></tbody></table></figure><p>下面的构造函数接受一个参数，该参数等于 1970 年 1 月 1 日午夜以来经过的毫秒数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date(<span class="keyword">long</span> millisec)</span><br></pre></td></tr></tbody></table></figure><p>一旦您有一个可用的 Date 对象，您可以调用下列任意支持的方法来使用日期：</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>boolean after(Date date)</strong> 如果调用的 Date 对象中包含的日期在 date 指定的日期之后，则返回 true，否则返回 false。</td></tr><tr><td align="left">2</td><td align="left"><strong>boolean before(Date date)</strong> 如果调用的 Date 对象中包含的日期在 date 指定的日期之前，则返回 true，否则返回 false。</td></tr><tr><td align="left">3</td><td align="left"><strong>Object clone( )</strong> 重复调用 Date 对象。</td></tr><tr><td align="left">4</td><td align="left"><strong>int compareTo(Date date)</strong> 把调用对象的值与 date 的值进行比较。如果两个值是相等的，则返回 0。如果调用对象在 date 之前，则返回一个负值。如果调用对象在 date 之后，则返回一个正值。</td></tr><tr><td align="left">5</td><td align="left"><strong>int compareTo(Object obj)</strong> 如果 obj 是 Date 类，则操作等同于 compareTo(Date)。否则，它会抛出一个 ClassCastException。</td></tr><tr><td align="left">6</td><td align="left"><strong>boolean equals(Object date)</strong> 如果调用的 Date 对象中包含的时间和日期与 date 指定的相同，则返回 true，否则返回 false。</td></tr><tr><td align="left">7</td><td align="left"><strong>long getTime( )</strong> 返回 1970 年 1 月 1 日以来经过的毫秒数。</td></tr><tr><td align="left">8</td><td align="left"><strong>int hashCode( )</strong> 为调用对象返回哈希代码。</td></tr><tr><td align="left">9</td><td align="left"><strong>void setTime(long time)</strong> 设置 time 指定的时间和日期，这表示从 1970 年 1 月 1 日午夜以来经过的时间（以毫秒为单位）。</td></tr><tr><td align="left">10</td><td align="left"><strong>String toString( )</strong> 转换调用的 Date 对象为一个字符串，并返回结果。</td></tr></tbody></table><h3 id="🍁获取当前的日期和时间"><a href="#🍁获取当前的日期和时间" class="headerlink" title="🍁获取当前的日期和时间"></a>🍁获取当前的日期和时间</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class CurrentDate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CurrentDate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentDate</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentDate</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">          String title = <span class="string">"显示当前的日期和时间"</span>;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">          out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h2 align=\"center\"&gt;"</span> + date.toString() + <span class="string">"&lt;/h2&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CurrentDate<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.CurrentDate<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CurrentDate<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/CurrentDate<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="🍁日期比较"><a href="#🍁日期比较" class="headerlink" title="🍁日期比较"></a>🍁日期比较</h3><ul><li>可以使用 getTime() 来获取两个对象自 1970 年 1 月 1 日午夜以来经过的时间（以毫秒为单位），然后对这两个值进行比较。</li><li>可以使用方法 before( )、after( ) 和 equals( )。由于一个月里 12 号在 18 号之前，例如，new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回 true。</li><li>可以使用 compareTo( ) 方法，该方法由 Comparable 接口定义，由 Date 实现。</li></ul><h3 id="🍁使用-SimpleDateFormat-格式化日期"><a href="#🍁使用-SimpleDateFormat-格式化日期" class="headerlink" title="🍁使用 SimpleDateFormat 格式化日期"></a>🍁使用 SimpleDateFormat 格式化日期</h3><p>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和解析日期的具体类。 SimpleDateFormat 允许您选择任何用户定义的日期时间格式化的模式。</p><p>让我们修改上面的实例，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class CurrentDate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CurrentDate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentDate</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentDate</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"显示当前的日期和时间"</span>;</span><br><span class="line">        Date dNow = <span class="keyword">new</span> Date( );</span><br><span class="line">        SimpleDateFormat ft = </span><br><span class="line">                <span class="keyword">new</span> SimpleDateFormat (<span class="string">"yyyy.MM.dd  hh:mm:ss E a "</span>);</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h2 align=\"center\"&gt;"</span> + ft.format(dNow) + <span class="string">"&lt;/h2&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁简单的日期格式的格式代码"><a href="#🍁简单的日期格式的格式代码" class="headerlink" title="🍁简单的日期格式的格式代码"></a>🍁简单的日期格式的格式代码</h3><p>使用事件模式字符串来指定时间格式。在这种模式下，所有的 ASCII 字母被保留为模式字母，这些字母定义如下：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">G</td><td align="left">Era 指示器</td><td align="left">AD</td></tr><tr><td align="left">y</td><td align="left">四位数表示的年</td><td align="left">2001</td></tr><tr><td align="left">M</td><td align="left">一年中的月</td><td align="left">July 或 07</td></tr><tr><td align="left">d</td><td align="left">一月中的第几天</td><td align="left">10</td></tr><tr><td align="left">h</td><td align="left">带有 A.M./P.M. 的小时（1~12）</td><td align="left">12</td></tr><tr><td align="left">H</td><td align="left">一天中的第几小时（0~23）</td><td align="left">22</td></tr><tr><td align="left">m</td><td align="left">一小时中的第几分</td><td align="left">30</td></tr><tr><td align="left">s</td><td align="left">一分中的第几秒</td><td align="left">55</td></tr><tr><td align="left">S</td><td align="left">毫秒</td><td align="left">234</td></tr><tr><td align="left">E</td><td align="left">一周中的星期几</td><td align="left">Tuesday</td></tr><tr><td align="left">D</td><td align="left">一年中的第几天</td><td align="left">360</td></tr><tr><td align="left">F</td><td align="left">所在的周是这个月的第几周</td><td align="left">2 (second Wed. in July)</td></tr><tr><td align="left">w</td><td align="left">一年中的第几周</td><td align="left">40</td></tr><tr><td align="left">W</td><td align="left">一月中的第几周</td><td align="left">1</td></tr><tr><td align="left">a</td><td align="left">A.M./P.M. 标记</td><td align="left">PM</td></tr><tr><td align="left">k</td><td align="left">一天中的第几小时（1~24）</td><td align="left">24</td></tr><tr><td align="left">K</td><td align="left">带有 A.M./P.M. 的小时（0~11）</td><td align="left">10</td></tr><tr><td align="left">z</td><td align="left">时区</td><td align="left">Eastern Standard Time</td></tr><tr><td align="left">‘</td><td align="left">Escape for text</td><td align="left">Delimiter</td></tr><tr><td align="left">“</td><td align="left">单引号</td><td align="left">`</td></tr></tbody></table><h2 id="🌸"><a href="#🌸" class="headerlink" title="🌸"></a>🌸</h2><p>当文档移动到新的位置，我们需要向客户端发送这个新位置时，我们需要用到网页重定向。当然，也可能是为了负载均衡，或者只是为了简单的随机，这些情况都有可能用到网页重定向。</p><p>重定向请求到另一个网页的最简单的方式是使用 response 对象的 sendRedirect() 方法。下面是该方法的定义：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> HttpServletResponse.sendRedirect(String location)</span><br><span class="line"><span class="keyword">throws</span> IOException</span><br></pre></td></tr></tbody></table></figure><p>该方法把响应连同状态码和新的网页位置发送回浏览器。您也可以通过把 setStatus() 和 setHeader() 方法一起使用来达到同样的效果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">String site = <span class="string">"http://www.runoob.com"</span> ;</span><br><span class="line">response.setStatus(response.SC_MOVED_TEMPORARILY);</span><br><span class="line">response.setHeader(<span class="string">"Location"</span>, site); </span><br><span class="line">....</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁实例-1"><a href="#🍁实例-1" class="headerlink" title="🍁实例"></a>🍁实例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class PageRedirect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/PageRedirect"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageRedirect</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"static-access"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 要重定向的新位置</span></span><br><span class="line">      String site = <span class="keyword">new</span> String(<span class="string">"http://liudufu.gihub.io"</span>);</span><br><span class="line"></span><br><span class="line">      response.setStatus(response.SC_MOVED_TEMPORARILY);</span><br><span class="line">      response.setHeader(<span class="string">"Location"</span>, site);    </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PageRedirect<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>PageRedirect<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PageRedirect<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/PageRedirect<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在通过访问 URL <a href="http://localhost:8080/PageRedirect" target="_blank" rel="noopener">http://localhost:8080/PageRedirect</a> 来调用这个 Servlet</p><h2 id="🌸Servlet-点击计数器"><a href="#🌸Servlet-点击计数器" class="headerlink" title="🌸Servlet 点击计数器"></a>🌸Servlet 点击计数器</h2><p>很多时候，您可能有兴趣知道网站的某个特定页面上的总点击量。使用 Servlet 来计算这些点击量是非常简单的，因为一个 Servlet 的生命周期是由它运行所在的容器控制的。</p><p>以下是实现一个简单的基于 Servlet 生命周期的网页点击计数器需要采取的步骤：</p><ul><li>在 init() 方法中初始化一个全局变量。</li><li>每次调用 doGet() 或 doPost() 方法时，都增加全局变量。</li><li>如果需要，您可以使用一个数据库表来存储全局变量的值在 destroy() 中。在下次初始化 Servlet 时，该值可在 init() 方法内被读取。这一步是可选的。</li><li>如果您只想对一个 session 会话计数一次页面点击，那么请使用 isNew() 方法来检查该 session 会话是否已点击过相同页面。这一步是可选的。</li><li>您可以通过显示全局计数器的值，来在网站上展示页面的总点击量。这一步是可选的。</li></ul><p>在这里，我们假设 Web 容器将无法重新启动。如果是重新启动或 Servlet 被销毁，计数器将被重置。</p><h3 id="🍁实例-2"><a href="#🍁实例-2" class="headerlink" title="🍁实例"></a>🍁实例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class PageHitCounter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/PageHitCounter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageHitCounter</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hitCount; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>{ </span><br><span class="line">        <span class="comment">// 重置点击计数器</span></span><br><span class="line">        hitCount = <span class="number">0</span>;</span><br><span class="line">    } </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 增加 hitCount </span></span><br><span class="line">        hitCount++; </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"总点击量"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h2 align=\"center\"&gt;"</span> + hitCount + <span class="string">"&lt;/h2&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>{ </span><br><span class="line">        <span class="comment">// 这一步是可选的，但是如果需要，您可以把 hitCount 的值写入到数据库</span></span><br><span class="line">    } </span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PageHitCounter<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.PageHitCounter<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PageHitCounter<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/PageHitCounter<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="🍁网站点击计数器"><a href="#🍁网站点击计数器" class="headerlink" title="🍁网站点击计数器"></a>🍁网站点击计数器</h3><p>很多时候，您可能有兴趣知道整个网站的总点击量。在 Servlet 中，这也是非常简单的，我们可以使用过滤器做到这一点。</p><p>以下是实现一个简单的基于过滤器生命周期的网站点击计数器需要采取的步骤：</p><ul><li>在过滤器的 init() 方法中初始化一个全局变量。</li><li>每次调用 doFilter 方法时，都增加全局变量。</li><li>如果需要，您可以在过滤器的 destroy() 中使用一个数据库表来存储全局变量的值。在下次初始化过滤器时，该值可在 init() 方法内被读取, 这一步是可选的。</li></ul><p>在这里，我们假设 Web 容器将无法重新启动。如果是重新启动或 Servlet 被销毁，点击计数器将被重置。</p><h3 id="🍁实例-3"><a href="#🍁实例-3" class="headerlink" title="🍁实例"></a>🍁实例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SiteHitCounter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> hitCount; </span><br><span class="line">               </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">(FilterConfig config)</span> </span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> ServletException</span>{</span><br><span class="line">     <span class="comment">// 重置点击计数器</span></span><br><span class="line">     hitCount = <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">doFilter</span><span class="params">(ServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">              ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">              FilterChain chain)</span> </span></span><br><span class="line"><span class="function">              <span class="keyword">throws</span> java.io.IOException, ServletException </span>{</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把计数器的值增加 1</span></span><br><span class="line">      hitCount++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 输出计数器</span></span><br><span class="line">      System.out.println(<span class="string">"网站访问统计："</span>+ hitCount );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把请求传回到过滤器链</span></span><br><span class="line">      chain.doFilter(request,response);</span><br><span class="line">  }</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">  </span>{ </span><br><span class="line">      <span class="comment">// 这一步是可选的，但是如果需要，您可以把 hitCount 的值写入到数据库</span></span><br><span class="line">  } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SiteHitCounter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>SiteHitCounter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SiteHitCounter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在访问网站的任意页面，比如 <a href="http://localhost:8080/。这将会在每次任意页面被点击时，把计数器的值增加" target="_blank" rel="noopener">http://localhost:8080/。这将会在每次任意页面被点击时，把计数器的值增加</a> 1，它会在日志中显示以下消息：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">网站访问统计： 1</span><br><span class="line">网站访问统计： 2</span><br><span class="line">网站访问统计： 3</span><br><span class="line">网站访问统计： 4</span><br><span class="line">网站访问统计： 5</span><br><span class="line">..................</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸Servlet-自动刷新页面"><a href="#🌸Servlet-自动刷新页面" class="headerlink" title="🌸Servlet 自动刷新页面"></a>🌸Servlet 自动刷新页面</h2><p>假设有一个网页，它是显示现场比赛成绩或股票市场状况或货币兑换率。对于所有这些类型的页面，您需要定期刷新网页。</p><p>Java Servlet 提供了一个机制，使得网页会在给定的时间间隔自动刷新。</p><p>刷新网页的最简单的方式是使用响应对象的方法 <strong>setIntHeader()</strong>。以下是这种方法的定义：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void setIntHeader(String header, int headerValue)</span><br></pre></td></tr></tbody></table></figure><p>此方法把头信息 “Refresh” 连同一个表示时间间隔的整数值（以秒为单位）发送回浏览器。</p><h3 id="🍁自动刷新页面实例"><a href="#🍁自动刷新页面实例" class="headerlink" title="🍁自动刷新页面实例"></a>🍁自动刷新页面实例</h3><p>本实例演示了 Servlet 如何使用 <strong>setIntHeader()</strong> 方法来设置 <strong>Refresh</strong> 头信息，从而实现自动刷新页面。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class Refresh</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/Refresh"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Refresh</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置刷新自动加载的事件间隔为 5 秒</span></span><br><span class="line">        response.setIntHeader(<span class="string">"Refresh"</span>, <span class="number">5</span>);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 获取当前的时间</span></span><br><span class="line">        Calendar calendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        String am_pm;</span><br><span class="line">        <span class="keyword">int</span> hour = calendar.get(Calendar.HOUR);</span><br><span class="line">        <span class="keyword">int</span> minute = calendar.get(Calendar.MINUTE);</span><br><span class="line">        <span class="keyword">int</span> second = calendar.get(Calendar.SECOND);</span><br><span class="line">        <span class="keyword">if</span>(calendar.get(Calendar.AM_PM) == <span class="number">0</span>)</span><br><span class="line">            am_pm = <span class="string">"AM"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            am_pm = <span class="string">"PM"</span>;</span><br><span class="line">     </span><br><span class="line">        String CT = hour+<span class="string">":"</span>+ minute +<span class="string">":"</span>+ second +<span class="string">" "</span>+ am_pm;</span><br><span class="line">        </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"使用 Servlet 自动刷新页面"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;p&gt;当前时间是："</span> + CT + <span class="string">"&lt;/p&gt;\n"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.Refresh<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/Refresh<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="🌸Servlet-发送电子邮件"><a href="#🌸Servlet-发送电子邮件" class="headerlink" title="🌸Servlet 发送电子邮件"></a>🌸Servlet 发送电子邮件</h2><p>使用 Servlet 发送一封电子邮件是很简单的，但首先您必须在您的计算机上安装 <strong>JavaMail API</strong> 和 <strong>Java Activation Framework）JAF）</strong>。</p><ul><li>您可以从 Java 网站下载最新版本的 <a href="http://www.oracle.com/technetwork/java/javamail/index.html" target="_blank" rel="noopener">JavaMail</a>，打开网页右侧有个 <strong>Downloads</strong> 链接，点击它下载。</li><li>您可以从 Java 网站下载最新版本的 <a href="http://www.oracle.com/technetwork/articles/java/index-135046.html" target="_blank" rel="noopener">JAF（）</a>。</li></ul><p>下载并解压缩这些文件，在新创建的顶层目录中，您会发现这两个应用程序的一些 jar 文件。您需要把 <strong>mail.jar</strong> 和 <strong>activation.jar</strong> 文件添加到您的 CLASSPATH 中。</p><h3 id="🍁发送一封简单的电子邮件"><a href="#🍁发送一封简单的电子邮件" class="headerlink" title="🍁发送一封简单的电子邮件"></a>🍁发送一封简单的电子邮件</h3><p>下面的实例将从您的计算机上发送一封简单的电子邮件。这里假设您的<strong>本地主机</strong>已连接到互联网，并支持发送电子邮件。同时确保 Java Email API 包和 JAF 包的所有的 jar 文件在 CLASSPATH 中都是可用的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名 SendEmail.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.*;</span><br><span class="line"><span class="keyword">import</span> javax.activation.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmail</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 收件人的电子邮件 ID</span></span><br><span class="line">      String to = <span class="string">"abcd@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 发件人的电子邮件 ID</span></span><br><span class="line">      String from = <span class="string">"web@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 假设您是从本地主机发送电子邮件</span></span><br><span class="line">      String host = <span class="string">"localhost"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取系统的属性</span></span><br><span class="line">      Properties properties = System.getProperties();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 设置邮件服务器</span></span><br><span class="line">      properties.setProperty(<span class="string">"mail.smtp.host"</span>, host);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取默认的 Session 对象</span></span><br><span class="line">      Session session = Session.getDefaultInstance(properties);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>{</span><br><span class="line">         <span class="comment">// 创建一个默认的 MimeMessage 对象</span></span><br><span class="line">         MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">         <span class="comment">// 设置 From: header field of the header.</span></span><br><span class="line">         message.setFrom(<span class="keyword">new</span> InternetAddress(from));</span><br><span class="line">         <span class="comment">// 设置 To: header field of the header.</span></span><br><span class="line">         message.addRecipient(Message.RecipientType.TO,</span><br><span class="line">                                  <span class="keyword">new</span> InternetAddress(to));</span><br><span class="line">         <span class="comment">// 设置 Subject: header field</span></span><br><span class="line">         message.setSubject(<span class="string">"This is the Subject Line!"</span>);</span><br><span class="line">         <span class="comment">// 现在设置实际消息</span></span><br><span class="line">         message.setText(<span class="string">"This is actual message"</span>);</span><br><span class="line">         <span class="comment">// 发送消息</span></span><br><span class="line">         Transport.send(message);</span><br><span class="line">         String title = <span class="string">"发送电子邮件"</span>;</span><br><span class="line">         String res = <span class="string">"成功发送消息..."</span>;</span><br><span class="line">         String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">         out.println(docType +</span><br><span class="line">         <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;p align=\"center\"&gt;"</span> + res + <span class="string">"&lt;/p&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">      }<span class="keyword">catch</span> (MessagingException mex) {</span><br><span class="line">         mex.printStackTrace();</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SendEmail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>SendEmail<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SendEmail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/SendEmail<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在通过访问 URL <a href="http://localhost:8080/SendEmail" target="_blank" rel="noopener">http://localhost:8080/SendEmail</a> 来调用这个 Servlet。这将会发送一封电子邮件到给定的电子邮件 ID <em><a href="mailto:abcd@gmail.com">abcd@gmail.com</a></em>，并将显示下面所示的响应：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">发送电子邮件</span><br><span class="line">成功发送消息...</span><br></pre></td></tr></tbody></table></figure><p>如果您想要发送一封电子邮件给多个收件人，那么请使用下面的方法来指定多个电子邮件 ID：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addRecipients</span><span class="params">(Message.RecipientType type, </span></span></span><br><span class="line"><span class="function"><span class="params">                   Address[] addresses)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> MessagingException</span></span><br></pre></td></tr></tbody></table></figure><p>下面是对参数的描述：</p><ul><li><strong>type：</strong>这将被设置为 TO、CC 或 BCC。在这里，CC 代表抄送，BCC 代表密件抄送。例如 <em>Message.RecipientType.TO</em>。</li><li><strong>addresses：</strong>这是电子邮件 ID 的数组。当指定电子邮件 ID 时，您需要使用 InternetAddress() 方法。</li></ul><h3 id="🍁发送一封-HTML-电子邮件"><a href="#🍁发送一封-HTML-电子邮件" class="headerlink" title="🍁发送一封 HTML 电子邮件"></a>🍁发送一封 HTML 电子邮件</h3><p>下面的实例将从您的计算机上发送一封 HTML 格式的电子邮件。这里假设您的<strong>本地主机</strong>已连接到互联网，并支持发送电子邮件。同时确保 Java Email API 包和 JAF 包的所有的 jar 文件在 CLASSPATH 中都是可用的。</p><p>本实例与上一个实例很类似，但是这里我们使用 setContent() 方法来设置第二个参数为 “text/html” 的内容，该参数用来指定 HTML 内容是包含在消息中的。</p><p>使用这个实例，您可以发送内容大小不限的 HTML 内容。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名 SendEmail.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.*;</span><br><span class="line"><span class="keyword">import</span> javax.activation.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmail</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 收件人的电子邮件 ID</span></span><br><span class="line">      String to = <span class="string">"abcd@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 发件人的电子邮件 ID</span></span><br><span class="line">      String from = <span class="string">"web@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 假设您是从本地主机发送电子邮件</span></span><br><span class="line">      String host = <span class="string">"localhost"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取系统的属性</span></span><br><span class="line">      Properties properties = System.getProperties();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 设置邮件服务器</span></span><br><span class="line">      properties.setProperty(<span class="string">"mail.smtp.host"</span>, host);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取默认的 Session 对象</span></span><br><span class="line">      Session session = Session.getDefaultInstance(properties);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>{</span><br><span class="line">         <span class="comment">// 创建一个默认的 MimeMessage 对象</span></span><br><span class="line">         MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">         <span class="comment">// 设置 From: header field of the header.</span></span><br><span class="line">         message.setFrom(<span class="keyword">new</span> InternetAddress(from));</span><br><span class="line">         <span class="comment">// 设置 To: header field of the header.</span></span><br><span class="line">         message.addRecipient(Message.RecipientType.TO,</span><br><span class="line">                                  <span class="keyword">new</span> InternetAddress(to));</span><br><span class="line">         <span class="comment">// 设置 Subject: header field</span></span><br><span class="line">         message.setSubject(<span class="string">"This is the Subject Line!"</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 设置实际的 HTML 消息，内容大小不限</span></span><br><span class="line">         message.setContent(<span class="string">"&lt;h1&gt;This is actual message&lt;/h1&gt;"</span>,</span><br><span class="line">                            <span class="string">"text/html"</span> );</span><br><span class="line">         <span class="comment">// 发送消息</span></span><br><span class="line">         Transport.send(message);</span><br><span class="line">         String title = <span class="string">"发送电子邮件"</span>;</span><br><span class="line">         String res = <span class="string">"成功发送消息..."</span>;</span><br><span class="line">         String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">         out.println(docType +</span><br><span class="line">         <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;p align=\"center\"&gt;"</span> + res + <span class="string">"&lt;/p&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">      }<span class="keyword">catch</span> (MessagingException mex) {</span><br><span class="line">         mex.printStackTrace();</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译并运行上面的 Servlet ，在给定的电子邮件 ID 上发送 HTML 消息。</p><h3 id="🍁在电子邮件中发送附件"><a href="#🍁在电子邮件中发送附件" class="headerlink" title="🍁在电子邮件中发送附件"></a>🍁在电子邮件中发送附件</h3><p>下面的实例将从您的计算机上发送一封带有附件的电子邮件。这里假设您的<strong>本地主机</strong>已连接到互联网，并支持发送电子邮件。同时确保 Java Email API 包和 JAF 包的所有的 jar 文件在 CLASSPATH 中都是可用的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名 SendEmail.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.*;</span><br><span class="line"><span class="keyword">import</span> javax.activation.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmail</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 收件人的电子邮件 ID</span></span><br><span class="line">      String to = <span class="string">"abcd@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 发件人的电子邮件 ID</span></span><br><span class="line">      String from = <span class="string">"web@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 假设您是从本地主机发送电子邮件</span></span><br><span class="line">      String host = <span class="string">"localhost"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取系统的属性</span></span><br><span class="line">      Properties properties = System.getProperties();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 设置邮件服务器</span></span><br><span class="line">      properties.setProperty(<span class="string">"mail.smtp.host"</span>, host);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取默认的 Session 对象</span></span><br><span class="line">      Session session = Session.getDefaultInstance(properties);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span>{</span><br><span class="line">         <span class="comment">// 创建一个默认的 MimeMessage 对象</span></span><br><span class="line">         MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 设置 From: header field of the header.</span></span><br><span class="line">         message.setFrom(<span class="keyword">new</span> InternetAddress(from));</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 设置 To: header field of the header.</span></span><br><span class="line">         message.addRecipient(Message.RecipientType.TO,</span><br><span class="line">                                  <span class="keyword">new</span> InternetAddress(to));</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 设置 Subject: header field</span></span><br><span class="line">         message.setSubject(<span class="string">"This is the Subject Line!"</span>);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 创建消息部分 </span></span><br><span class="line">         BodyPart messageBodyPart = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 填写消息</span></span><br><span class="line">         messageBodyPart.setText(<span class="string">"This is message body"</span>);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 创建一个多部分消息</span></span><br><span class="line">         Multipart multipart = <span class="keyword">new</span> MimeMultipart();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 设置文本消息部分</span></span><br><span class="line">         multipart.addBodyPart(messageBodyPart);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 第二部分是附件</span></span><br><span class="line">         messageBodyPart = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">         String filename = <span class="string">"file.txt"</span>;</span><br><span class="line">         DataSource source = <span class="keyword">new</span> FileDataSource(filename);</span><br><span class="line">         messageBodyPart.setDataHandler(<span class="keyword">new</span> DataHandler(source));</span><br><span class="line">         messageBodyPart.setFileName(filename);</span><br><span class="line">         multipart.addBodyPart(messageBodyPart);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 发送完整的消息部分</span></span><br><span class="line">         message.setContent(multipart );</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 发送消息</span></span><br><span class="line">         Transport.send(message);</span><br><span class="line">         String title = <span class="string">"发送电子邮件"</span>;</span><br><span class="line">         String res = <span class="string">"成功发送电子邮件..."</span>;</span><br><span class="line">         String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">         out.println(docType +</span><br><span class="line">         <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;p align=\"center\"&gt;"</span> + res + <span class="string">"&lt;/p&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">      }<span class="keyword">catch</span> (MessagingException mex) {</span><br><span class="line">         mex.printStackTrace();</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译并运行上面的 Servlet ，在给定的电子邮件 ID 上发送带有文件附件的消息。</p><h3 id="🍁用户身份认证部分"><a href="#🍁用户身份认证部分" class="headerlink" title="🍁用户身份认证部分"></a>🍁用户身份认证部分</h3><p>如果需要向电子邮件服务器提供用户 ID 和密码进行身份认证，那么您可以设置如下属性：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">props.setProperty(<span class="string">"mail.user"</span>, <span class="string">"myuser"</span>);</span><br><span class="line">props.setProperty(<span class="string">"mail.password"</span>, <span class="string">"mypwd"</span>);</span><br></pre></td></tr></tbody></table></figure><p>电子邮件发送机制的其余部分与上面讲解的保持一致。</p><h2 id="🌸Servlet包"><a href="#🌸Servlet包" class="headerlink" title="🌸Servlet包"></a>🌸Servlet包</h2><p>涉及到 WEB-INF 子目录的 Web 应用程序结构是所有的 Java web 应用程序的标准，并由 Servlet API 规范指定。给定一个顶级目录名 myapp，目录结构如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/myapp</span><br><span class="line">    /images</span><br><span class="line">    /WEB-INF</span><br><span class="line">        /classes</span><br><span class="line">        /lib</span><br></pre></td></tr></tbody></table></figure><p>WEB-INF 子目录中包含应用程序的部署描述符，名为 web.xml。所有的 HTML 文件都位于顶级目录 <em>myapp</em> 下。对于 admin 用户，您会发现 ROOT 目录是 myApp 的父目录。</p><h3 id="🍁创建包中的-Servlet"><a href="#🍁创建包中的-Servlet" class="headerlink" title="🍁创建包中的 Servlet"></a>🍁创建包中的 Servlet</h3><p>WEB-INF/classes 目录包含了所有的 Servlet 类和其他类文件，类文件所在的目录结构与他们的包名称匹配。例如，如果您有一个完全合格的类名称 <strong>com.myorg.MyServlet</strong>，那么这个 Servlet 类必须位于以下目录中：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/myapp/WEB-INF/classes/com/myorg/MyServlet.class</span><br></pre></td></tr></tbody></table></figure><p>下面的例子创建包名为 <em>com.myorg</em> 的 MyServlet 类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为包命名</span></span><br><span class="line"><span class="keyword">package</span> com.myorg;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/MyServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> String message;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 执行必需的的初始化</span></span><br><span class="line">      message = <span class="string">"Hello World"</span>;</span><br><span class="line">  }</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 实际的逻辑是在这里</span></span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;"</span> + message + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 什么也不做</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁编译包中的-Servlet"><a href="#🍁编译包中的-Servlet" class="headerlink" title="🍁编译包中的 Servlet"></a>🍁编译包中的 Servlet</h3><p>编译包中的类与编译其他的类没有什么大的不同。最简单的方法是让您的 java 文件保留完全限定路径，如上面提到的类，将被保留在 com.myorg 中。您还需要在 CLASSPATH 中添加该目录。</p><p>假设您的环境已正确设置，进入 <strong><tomcat-installation-directory>/webapps/ROOT/WEB-INF/classes</tomcat-installation-directory></strong> 目录，并编译 MyServlet.java，如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ javac MyServlet.java</span><br></pre></td></tr></tbody></table></figure><p>如果 Servlet 依赖于其他库，那么您必须在 CLASSPATH 中也要引用那些 JAR 文件。这里我只引用了 servlet-api.jar JAR 文件，因为我在 Hello World 程序中并没有使用任何其他库。</p><p>该命令行使用内置的 javac 编译器，它是 Sun Microsystems Java 软件开发工具包（JDK，全称 Java Software Development Kit）附带的。 Microsystems的Java软件开发工具包（JDK）。为了让该命令正常工作，必须包括您在 PATH 环境变量中所使用的 Java SDK 的位置。</p><p>如果一切顺利，上述编译会在同一目录下生成 <strong>MyServlet.class</strong> 文件。下一节将解释如何把一个已编译的 Servlet 部署到生产中。</p><h3 id="🍁Servlet-打包部署"><a href="#🍁Servlet-打包部署" class="headerlink" title="🍁Servlet 打包部署"></a>🍁Servlet 打包部署</h3><p>默认情况下，Servlet 应用程序位于路径 <tomcat-installation-directory>/webapps/ROOT 下，且类文件放在 <tomcat-installation-directory>/webapps/ROOT/WEB-INF/classes 中。</tomcat-installation-directory></tomcat-installation-directory></p><p>如果您有一个完全合格的类名称 <strong>com.myorg.MyServlet</strong>，那么这个 Servlet 类必须位于 WEB-INF/classes/com/myorg/MyServlet.class 中，您需要在位于 <tomcat-installation-directory>/webapps/ROOT/WEB-INF/ 的 web.xml 文件中创建以下条目：</tomcat-installation-directory></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.myorg.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上面的条目要被创建在 web.xml 文件中的 <web-app>…</web-app> 标签内。在该文件中可能已经有各种可用的条目，但不要在意。</p><p>到这里，您基本上已经完成了，现在让我们使用 <tomcat-installation-directory>\bin\startup.bat（在 Windows 上）或 <tomcat-installation-directory>/bin/startup.sh（在 Linux/Solaris 等上）启动 tomcat 服务器，最后在浏览器的地址栏中输入 <strong><a href="http://localhost:8080/MyServlet" target="_blank" rel="noopener">http://localhost:8080/MyServlet</a></strong>。</tomcat-installation-directory></tomcat-installation-directory></p><h2 id="🌸Servlet-调试"><a href="#🌸Servlet-调试" class="headerlink" title="🌸Servlet 调试"></a>🌸Servlet 调试</h2><p>测试/调试 Servlet 始终是开发使用过程中的难点。Servlet 往往涉及大量的客户端/服务器交互，可能会出现错误但又难以重现。</p><p>这里有一些提示和建议，可以帮助您调试。</p><h3 id="🍁System-out-println"><a href="#🍁System-out-println" class="headerlink" title="🍁System.out.println()"></a>🍁System.out.println()</h3><p>System.out.println() 是作为一个标记来使用的，用来测试一段特定的代码是否被执行。我们也可以打印出变量的值。此外：</p><ul><li>由于 System 对象是核心 Java 对象的一部分，它可以在不需要安装任何额外类的情况下被用于任何地方。这包括 Servlet、JSP、RMI、EJB’s、普通的 Beans 和类，以及独立的应用程序。</li><li>与在断点处停止不同，写入到 System.out 不会干扰到应用程序的正常执行流程，这使得它在时序是至关重要的时候显得尤为有价值。</li></ul><p>下面是使用 System.out.println() 的语法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println("Debugging message");</span><br></pre></td></tr></tbody></table></figure><p>通过上面的语法生成的所有消息将被记录在 Web 服务器日志文件中。</p><h3 id="🍁消息日志"><a href="#🍁消息日志" class="headerlink" title="🍁消息日志"></a>🍁消息日志</h3><p>使用适当的日志记录方法来记录所有调试、警告和错误消息，这是非常好的想法，推荐使用 <a href="https://logging.apache.org/log4j/2.0/download.html" target="_blank" rel="noopener">log4J</a> 来记录所有的消息。</p><p>Servlet API 还提供了一个简单的输出信息的方式，使用 log() 方法，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLog</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException,</span></span><br><span class="line"><span class="function">         java.io.IOException </span>{</span><br><span class="line">    </span><br><span class="line">      String par = request.getParameter(<span class="string">"par1"</span>);</span><br><span class="line">      <span class="comment">// 调用两个 ServletContext.log 方法</span></span><br><span class="line">      ServletContext context = getServletContext( );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (par == <span class="keyword">null</span> || par.equals(<span class="string">""</span>))</span><br><span class="line">      <span class="comment">// 通过 Throwable 参数记录版本</span></span><br><span class="line">      context.log(<span class="string">"No message received:"</span>,</span><br><span class="line">          <span class="keyword">new</span> IllegalStateException(<span class="string">"Missing parameter"</span>));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          context.log(<span class="string">"Here is the visitor's message: "</span> + par);</span><br><span class="line">      </span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      java.io.PrintWriter out = response.getWriter( );</span><br><span class="line">      String title = <span class="string">"Context Log"</span>;</span><br><span class="line">      String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">        <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;h2 align=\"center\"&gt;Messages sent&lt;/h2&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    } <span class="comment">//doGet</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ServletContext 把它的文本消息记录到 Servlet 容器的日志文件中。对于 Tomcat，这些日志可以在 <tomcat-installation-directory>/logs 目录中找到。</tomcat-installation-directory></p><p>这些日志文件确实对新出现的错误或问题的频率给出指示。正因为如此，建议在通常不会发生的异常的 catch 子句中使用 log() 函数。</p><h3 id="🍁使用-JDB-调试器"><a href="#🍁使用-JDB-调试器" class="headerlink" title="🍁使用 JDB 调试器"></a>🍁使用 JDB 调试器</h3><p>可以使用调试 applet 或应用程序的 jdb 命令来调试 Servlet。</p><p>为了调试一个 Servlet，我们可以调试 sun.servlet.http.HttpServer，然后把它看成是 HttpServer 执行 Servlet 来响应浏览器端的 HTTP 请求。这与调试 applet 小程序非常相似。与调试 applet 不同的是，实际被调试的程序是 sun.applet.AppletViewer。</p><p>大多数调试器会自动隐藏如何调试 applet 的细节。同样的，对于 servlet，您必须帮调试器执行以下操作：</p><ul><li>设置您的调试器的类路径 classpath，以便它可以找到 sun.servlet.http.Http-Server 和相关的类。</li><li>设置您的调试器的类路径 classpath，以便它可以找到您的 servlet 和支持的类，通常是在 server_root/servlets 和 server_root/classes 中。</li></ul><p>您通常不会希望 server_root/servlets 在您的 classpath 中，因为它会禁用 servlet 的重新加载。但是这种包含规则对于调试是非常有用的。它允许您的调试器在 HttpServer 中的自定义 Servlet 加载器加载 Servlet 之前在 Servlet 中设置断点。</p><p>如果您已经设置了正确的类路径 classpath，就可以开始调试 sun.servlet.http.HttpServer。可以在您想要调试的 Servlet 代码中设置断点，然后通过 Web 浏览器使用给定的 Servlet（<a href="http://localhost:8080/servlet/ServletToDebug）向" target="_blank" rel="noopener">http://localhost:8080/servlet/ServletToDebug）向</a> HttpServer 发出请求。您会看到程序执行到断点处会停止。</p><h3 id="🍁使用注释"><a href="#🍁使用注释" class="headerlink" title="🍁使用注释"></a>🍁使用注释</h3><p>代码中的注释有助于以各种方式进行调试。注释可用于调试过程的很多其他方式中。</p><p>该 Servlet 使用 Java 注释和单行注释（//…），多行注释（/* …*/）可用于暂时移除部分 Java 代码。如果 bug 消失，仔细看看您刚才注释的代码并找出问题所在。</p><h3 id="🍁客户端和服务器端头信息"><a href="#🍁客户端和服务器端头信息" class="headerlink" title="🍁客户端和服务器端头信息"></a>🍁客户端和服务器端头信息</h3><p>有时，当一个 Servlet 并没有像预期那样时，查看原始的 HTTP 请求和响应是非常有用的。如果您熟悉 HTTP 结构，您可以阅读请求和响应，看看这些头信息究竟是什么。</p><h3 id="🍁重要的调试技巧"><a href="#🍁重要的调试技巧" class="headerlink" title="🍁重要的调试技巧"></a>🍁重要的调试技巧</h3><p>下面列出了一些 Servlet 调试的技巧：</p><ul><li>请注意，server_root/classes 不会重载，而 server_root/servlets 可能会。</li><li>要求浏览器显示它所显示的页面的原始内容。这有助于识别格式的问题。它通常是”视图”菜单下的一个选项。</li><li>通过强制执行完全重新加载页面来确保浏览器还没有缓存前一个请求的输出。在 Netscape Navigator 中，请使用 Shift-Reload，在 Internet Explorer 中，请使用 Shift-Refresh。</li><li>请确认 servlet 的 init() 方法接受一个 ServletConfig 参数，并调用 super.init(config)。</li></ul><h2 id="🌸servlet国际化"><a href="#🌸servlet国际化" class="headerlink" title="🌸servlet国际化"></a>🌸servlet国际化</h2><p>在我们开始之前，先来看看三个重要术语：</p><ul><li><strong>国际化（i18n）：</strong>这意味着一个网站提供了不同版本的翻译成访问者的语言或国籍的内容。</li><li><strong>本地化（l10n）：</strong>这意味着向网站添加资源，以使其适应特定的地理或文化区域，例如网站翻译成印地文（Hindi）。</li><li><strong>区域设置（locale）：</strong>这是一个特殊的文化或地理区域。它通常指语言符号后跟一个下划线和一个国家符号。例如 “en_US” 表示针对 US 的英语区域设置。</li></ul><p>当建立一个全球性的网站时有一些注意事项。本教程不会讲解这些注意事项的完整细节，但它会通过一个很好的实例向您演示如何通过差异化定位（即区域设置）来让网页以不同语言呈现。</p><p>Servlet 可以根据请求者的区域设置拾取相应版本的网站，并根据当地的语言、文化和需求提供相应的网站版本。以下是 request 对象中返回 Locale 对象的方法。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.Locale request.getLocale()</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁检测区域设置"><a href="#🍁检测区域设置" class="headerlink" title="🍁检测区域设置"></a>🍁检测区域设置</h3><p>下面列出了重要的区域设置方法，您可以使用它们来检测请求者的地理位置、语言和区域设置。下面所有的方法都显示了请求者浏览器中设置的国家名称和语言名称。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>String getCountry()</strong> 该方法以 2 个大写字母形式的 ISO 3166 格式返回该区域设置的国家/地区代码。</td></tr><tr><td align="left">2</td><td align="left"><strong>String getDisplayCountry()</strong> 该方法返回适合向用户显示的区域设置的国家的名称。</td></tr><tr><td align="left">3</td><td align="left"><strong>String getLanguage()</strong> 该方法以小写字母形式的 ISO 639 格式返回该区域设置的语言代码。</td></tr><tr><td align="left">4</td><td align="left"><strong>String getDisplayLanguage()</strong> 该方法返回适合向用户显示的区域设置的语言的名称。</td></tr><tr><td align="left">5</td><td align="left"><strong>String getISO3Country()</strong> 该方法返回该区域设置的国家的三个字母缩写。</td></tr><tr><td align="left">6</td><td align="left"><strong>String getISO3Language()</strong> 该方法返回该区域设置的语言的三个字母的缩写。</td></tr></tbody></table><h3 id="🍁实例-4"><a href="#🍁实例-4" class="headerlink" title="🍁实例"></a>🍁实例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetLocale</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 获取客户端的区域设置</span></span><br><span class="line">      Locale locale = request.getLocale();</span><br><span class="line">      String language = locale.getLanguage();</span><br><span class="line">      String country = locale.getCountry();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">      String title = <span class="string">"检测区域设置"</span>;</span><br><span class="line">      String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">        <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + language + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;h2 align=\"center\"&gt;"</span> + country + <span class="string">"&lt;/h2&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁语言设置"><a href="#🍁语言设置" class="headerlink" title="🍁语言设置"></a>🍁语言设置</h3><p>Servlet 可以输出以西欧语言（如英语、西班牙语、德语、法语、意大利语、荷兰语等）编写的页面。在这里，为了能正确显示所有的字符，设置 Content-Language 头是非常重要的。</p><p>第二点是使用 HTML 实体显示所有的特殊字符，例如，”ñ” 表示 “ñ”，”¡” 表示 “¡”，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplaySpanish</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="comment">// 设置响应内容类型</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">// 设置西班牙语言代码</span></span><br><span class="line">    response.setHeader(<span class="string">"Content-Language"</span>, <span class="string">"es"</span>);</span><br><span class="line"></span><br><span class="line">    String title = <span class="string">"En Espa&amp;ntilde;ol"</span>;</span><br><span class="line">    String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">     out.println(docType +</span><br><span class="line">     <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">     <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">     <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">     <span class="string">"&lt;h1&gt;"</span> + <span class="string">"En Espa&amp;ntilde;ol:"</span> + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">     <span class="string">"&lt;h1&gt;"</span> + <span class="string">"&amp;iexcl;Hola Mundo!"</span> + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">     <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁特定于区域设置的日期"><a href="#🍁特定于区域设置的日期" class="headerlink" title="🍁特定于区域设置的日期"></a>🍁特定于区域设置的日期</h3><p>可以使用 java.text.DateFormat 类及其静态方法 getDateTimeInstance() 来格式化特定于区域设置的日期和时间。下面的实例演示了如何格式化特定于某个给定的区域设置的日期：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateLocale</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="comment">// 设置响应内容类型</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">// 获取客户端的区域设置</span></span><br><span class="line">    Locale locale = request.getLocale( );</span><br><span class="line">    String date = DateFormat.getDateTimeInstance(</span><br><span class="line">                                  DateFormat.FULL, </span><br><span class="line">                                  DateFormat.SHORT, </span><br><span class="line">                                  locale).format(<span class="keyword">new</span> Date( ));</span><br><span class="line"></span><br><span class="line">    String title = <span class="string">"特定于区域设置的日期"</span>;</span><br><span class="line">    String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">      <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + date + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁特定于区域设置的货币"><a href="#🍁特定于区域设置的货币" class="headerlink" title="🍁特定于区域设置的货币"></a>🍁特定于区域设置的货币</h3><p>可以使用 java.text.NumberFormat 类及其静态方法 getCurrencyInstance() 来格式化数字（比如 long 类型或 double 类型）为特定于区域设置的货币。下面的实例演示了如何格式化特定于某个给定的区域设置的货币：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">javaimport java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrencyLocale</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="comment">// 设置响应内容类型</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">// 获取客户端的区域设置</span></span><br><span class="line">    Locale locale = request.getLocale( );</span><br><span class="line">    NumberFormat nft = NumberFormat.getCurrencyInstance(locale);</span><br><span class="line">    String formattedCurr = nft.format(<span class="number">1000000</span>);</span><br><span class="line"></span><br><span class="line">    String title = <span class="string">"特定于区域设置的货币"</span>;</span><br><span class="line">    String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">      <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + formattedCurr + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁特特定于区域设置的百分比"><a href="#🍁特特定于区域设置的百分比" class="headerlink" title="🍁特特定于区域设置的百分比"></a>🍁特特定于区域设置的百分比</h3><p>可以使用 java.text.NumberFormat 类及其静态方法 getPercentInstance() 来格式化特定于区域设置的百分比。下面的实例演示了如何格式化特定于某个给定的区域设置的百分比：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PercentageLocale</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="comment">// 设置响应内容类型</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">// 获取客户端的区域设置</span></span><br><span class="line">    Locale locale = request.getLocale( );</span><br><span class="line">    NumberFormat nft = NumberFormat.getPercentInstance(locale);</span><br><span class="line">    String formattedPerc = nft.format(<span class="number">0.51</span>);</span><br><span class="line"></span><br><span class="line">    String title = <span class="string">"特定于区域设置的百分比"</span>;</span><br><span class="line">    String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">      <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + formattedPerc + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://liudufu.github.io/tags/java/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Servlet" scheme="https://liudufu.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JPA与JDBC的区别和基本用法</title>
    <link href="https://liudufu.github.io/The_difference_and_basic_usage_of_JPA_and_JDBC/"/>
    <id>https://liudufu.github.io/The_difference_and_basic_usage_of_JPA_and_JDBC/</id>
    <published>2020-12-08T10:43:05.000Z</published>
    <updated>2020-12-08T10:44:37.057Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JPA（Java Persistence API）用于对象持久化的 API，是 Java EE 5.0 平台标准的 ORM 规范，使得应用程序以统一的方式访问持久层。</p></blockquote><a id="more"></a><h1 id="JPA-与-JDBC-的区别和基本用法"><a href="#JPA-与-JDBC-的区别和基本用法" class="headerlink" title="JPA 与 JDBC 的区别和基本用法"></a>JPA 与 JDBC 的区别和基本用法</h1><p><a href="https://www.cnblogs.com/yunche/p/10279324.html" target="_blank" rel="noopener">原文地址</a></p><h2 id="JPA-概念"><a href="#JPA-概念" class="headerlink" title="JPA 概念"></a>JPA 概念</h2><p>JPA（Java Persistence API）用于对象持久化的 API，是 Java EE 5.0 平台标准的 ORM 规范，使得应用程序以统一的方式访问持久层。</p><h3 id="与-JDBC-的对比"><a href="#与-JDBC-的对比" class="headerlink" title="与 JDBC 的对比"></a>与 JDBC 的对比</h3><p>JDBC 也是一种规范和接口，不过 JDBC 是面向 SQL 的，使用起来比较繁琐。所以就有了 ORM 框架，建立了 Java 对象与数据库表之间的映射关系，可以通过直接操作对象来实现持久化，简化了操作的繁杂度。而 JPA 就是 ORM 框架的规范，值得一提的是 Hibernate 是符合 JPA 规范的，而 MyBatis 却不符合，因为 MyBatis 还是需要写 SQL 的。</p><p>JDBC 示意图：</p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_jdbc.png" alt="img"></p><p>JPA 示意图：</p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_JPA.png" alt="img"></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>在 IDEA 下创建一个 JPA 项目，并实现基本的 CRUD。</p><p>1、创建一个 JavaEE Persistence 项目，具体如下所示</p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_1.png" alt="img"></p><p>采用 Hibernate 实现 JPA。</p><p>2、导入相应的 Maven 依赖</p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_2.1.png" alt="img"></p><p>添加 Maven 支持。</p><p>pom.xml:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>groupId<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jpa-helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-entitymanager --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3、配置数据库（MySQL 8）相关内容 persistence.xml</p><p>注意此文件要位于类路径下，这里放在 resources/META-INF 下。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/persistence"</span> <span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">"jpa-1"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--是 PersistenceProvider 接口的实现类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--添加持久化类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.yunche.helloworld.Customer<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/jpa?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.archive.autodetection"</span> <span class="attr">value</span>=<span class="string">"class"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--注意这个属性，自动生成的文件前面没有 hibernate，要加上 hibernate --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span> <span class="attr">value</span>=<span class="string">"update"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用 MySQL8Dialect --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.dialect.MySQL8Dialect"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>4、新建一个持久化对象类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yunche.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Customer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: yunche</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/01/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"customers"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>并在 persistence.xml 中的 persistence-unit 节点下加入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--添加持久化类--&gt;</span><br><span class="line">&lt;!--后来发现：似乎可以不加--&gt;</span><br><span class="line">&lt;class&gt;com.yunche.helloworld.Customer&lt;/class&gt;</span><br></pre></td></tr></tbody></table></figure><p>5、Main 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yunche.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityTransaction;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Persistence;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Main</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: yunche</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/01/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//persistence.xml 中的 persistence-unit</span></span><br><span class="line">        String persistenceUnitName = <span class="string">"jpa-1"</span>;</span><br><span class="line">        <span class="comment">//1、创建 EntityManagerFactory</span></span><br><span class="line">        EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory(persistenceUnitName);</span><br><span class="line">        <span class="comment">//2、创建 EntityManager</span></span><br><span class="line">        EntityManager entityManager = entityManagerFactory.createEntityManager();</span><br><span class="line">        <span class="comment">//3、开启事务</span></span><br><span class="line">        EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">        transaction.begin();</span><br><span class="line">        <span class="comment">//4、进行持久化操作</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setAge(<span class="number">13</span>);</span><br><span class="line">        customer.setLastName(<span class="string">"li"</span>);</span><br><span class="line">        customer.setEmail(<span class="string">"123@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">        entityManager.persist(customer);</span><br><span class="line">        <span class="comment">//5、提交事务</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">        <span class="comment">//6、关闭 EntityManager</span></span><br><span class="line">        entityManager.close();</span><br><span class="line">        <span class="comment">//7、关闭 EntityManagerFactory</span></span><br><span class="line">        entityManagerFactory.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>6、结果</p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_output.png" alt="img"></p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_result.png" alt="img"></p><p>7、注意事项<br>我后来发现了一点问题，关于包 javax.persistence-api 的，我创建项目的时候选中了 persistence 2.0 , IDEA 自动导入了 javax.persistence-api-2.0.jar，而 maven 下的 hibernate-entitymanager 依赖含有 javax.persistence-api-2.2.jar ，所以 jar 包重复了，并且我发现2.0版本的有些方法没有，所以还是将2.0版本的jar包删除，用 2.2 版本的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JPA（Java Persistence API）用于对象持久化的 API，是 Java EE 5.0 平台标准的 ORM 规范，使得应用程序以统一的方式访问持久层。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://liudufu.github.io/tags/java/"/>
    
      <category term="JPA" scheme="https://liudufu.github.io/tags/JPA/"/>
    
      <category term="JDBC" scheme="https://liudufu.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>关于数据库和mybatis的mapper关系</title>
    <link href="https://liudufu.github.io/Mapper_relation_of_mybatis/"/>
    <id>https://liudufu.github.io/Mapper_relation_of_mybatis/</id>
    <published>2020-12-08T10:39:42.000Z</published>
    <updated>2020-12-08T10:42:24.493Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。</p></blockquote><a id="more"></a><h1 id="关于数据库mybatis的mapper关系"><a href="#关于数据库mybatis的mapper关系" class="headerlink" title="关于数据库mybatis的mapper关系"></a>关于数据库mybatis的mapper关系</h1><p><a href="https://blog.csdn.net/weixin_42603009/article/details/91981037" target="_blank" rel="noopener">原文地址</a></p><p>这里说明一下关于数据库，数据库对应实体各种复杂情况关系映射。<br>最基本的实体：<br>比如：（这里面不涉及复杂map,list,set等）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer testUserNo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String testUserName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String testUserSex;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>数据库：<br><img src="https://img-blog.csdnimg.cn/20190614160536245.png" alt="在这里插入图片描述"><br>resultMap最终将数据库查出的结果，映射到pojo（实体）上<br>type是指定映射到哪一个实体；id是相对应的resultMap的id</p><p>这里有两种属性，主键属性和普通属性<br>1,主键属性方式（是主键）<br>user_no是主键：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;id property=<span class="string">"testUserNo"</span> column=<span class="string">"user_no"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><p>2,普通属性（即不是主键）<br>user_name不是主键</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;result property=<span class="string">"testUserName"</span> column=<span class="string">"user_name"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><p>完整的mapper.xml</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://www.mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!-- namespace是对应的定义方法mapper，会去拿到对应的geTestUsers方法。这样才建立起了输入，返回的对应的关系 --&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.cun.mapper.TestUserMapper"</span>&gt;</span><br><span class="line">&lt;resultMap type=<span class="string">"com.cun.entity.TestUser"</span> id=<span class="string">"TestUser"</span>&gt;</span><br><span class="line">&lt;!-- property是对应的实体属性，column是对应的数据库column项--&gt;</span><br><span class="line">&lt;id property=<span class="string">"testUserNo"</span> column=<span class="string">"user_no"</span>/&gt; </span><br><span class="line">&lt;result property=<span class="string">"testUserName"</span> column=<span class="string">"user_name"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"testUserSex"</span> column=<span class="string">"user_sex"</span>/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"geTestUsers"</span> resultMap=<span class="string">"TestUser"</span>&gt;</span><br><span class="line">    select * from test_user</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></tbody></table></figure><p>在我们深入更加复杂情况前，我们需要了解mapper3.0下常用的标签。我们从mapper开始讲起。<br>mapper: 是总标签，所有标签都包含在内。<br>namespace：命名空间。如果采用的是Mapper接口代理的方式开发，Mapper的映射文件中namespace必须为接口的全名，比如这里namespace=“com.cun.mapper.TestUserMapper”。<br><img src="https://img-blog.csdnimg.cn/2019061420233673.png" alt="在这里插入图片描述"><br>最常见的增删改查select，insert，update，delete。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"Mapper.EmpMapper"</span>&gt;</span><br><span class="line"><span class="comment">// CURD操作标签</span></span><br><span class="line"><span class="comment">// 查  parameterType入参类型   resultType返回类型  id是唯一标识符</span></span><br><span class="line">&lt;select id="" parameterType="" resultType=""&gt; &lt;/select&gt;</span><br><span class="line">&lt;insert id="" parameterType=""&gt; &lt;/insert&gt;</span><br><span class="line">&lt;delete id="" parameterType=""&gt; &lt;/delete&gt;</span><br><span class="line">&lt;update id="" parameterType=""&gt; &lt;/update&gt;</span><br><span class="line">    <span class="comment">// if片段</span></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></tbody></table></figure><p>每一个其中的内含标签：<br><img src="https://img-blog.csdnimg.cn/20190614212707731.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190614212756788.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190614212942527.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190614213051667.png" alt="在这里插入图片描述"><br>下面逐一介绍其中的Content Model(内容模型)<br>selectKey : 标签表示子查询中主键的提取问题<br>它其中的标记：<br>keyColumn表示查询语句返回结果的列名<br>keyProperty表示将属性设置到某个列中<br>order=”BEFORE表示在插入语句之前执行<br>resultType=”int”表示返回值得类型为int类型<br><img src="https://img-blog.csdnimg.cn/20190614222555214.png" alt="在这里插入图片描述"><br>include：引入定义号的公共sql<br>这里不得不的引入另一个标签sql,因为这两者搭配使用。<br>例子：（通常用于有一段sql文，很长而且重复多次使用，我们把它抽象出来，之后直接引用）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="number">1</span>、首先定义一个sql标签，一定要定义唯一id。（name,age是要查询的字段）--&gt;</span><br><span class="line">&lt;sql id="Base_Column_List" &gt;name,age&lt;/sql&gt;</span><br><span class="line">&lt;!--<span class="number">2</span>、然后通过id引用--&gt;</span><br><span class="line">&lt;select id=<span class="string">"selectAll"</span>&gt;</span><br><span class="line">select </span><br><span class="line">&lt;include refid=<span class="string">"Base_Column_List"</span> /&gt;</span><br><span class="line">from student</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;!--这个&lt;include refid=<span class="string">"Base_Column_List"</span> /&gt;会自动把上面的代码贴过来。--&gt;</span><br></pre></td></tr></tbody></table></figure><p>trim : （这个不常用）<br>prefix：前缀；suffix：后缀<br>prefixOverrides：忽略第一个指定分隔符；suffixOverrides：会略最后一个分隔符。</p><p>如果id为null执行的sql语句为:<br>select * from user where name=“xxx” and gender=“xxx”<br>where : 主要是用来简化 sql 语句中 where 条件判断，自动地处理 AND/OR 条件。<br>例子：（并自动地把首个 and / or 给忽略。）</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"geTestUsers"</span> parameterType=<span class="string">"com.cun.entity.TestUser"</span> resultMap=<span class="string">"TestUser"</span>&gt;</span><br><span class="line">    select user_no,user_name,user_sex </span><br><span class="line">    from test_user </span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"testUserNo != null"</span>&gt;</span><br><span class="line">            user_no = #{testUserNo}</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"testUserName != null"</span>&gt;</span><br><span class="line">            and user_name = #{testUserName}</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"testUserSex != null"</span>&gt;</span><br><span class="line">            and user_sex = #{testUserSex}</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><p>set : （主要作用于update语句）时若使用if标签，如果前面的if没有执行，则可能导致有多余逗号的错误。使用set标签可以将动态的配置SET 关键字，和剔除追加到条件末尾的任何不相关的逗号。<br>例子：（这里有一个坑，写完需要加逗号）</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateByPrimaryKeySelective"</span> parameterType=<span class="string">"RecruitmentConfBanner"</span>&gt;</span><br><span class="line">    UPDATE conf_banner t</span><br><span class="line">    &lt;set&gt; </span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"bannerName != null"</span>&gt;</span><br><span class="line">            t.banner_name = #{bannerName},</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"bannerUrl != null"</span>&gt;</span><br><span class="line">            t.banner_url = #{bannerUrl},</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"bannerLogo != null"</span>&gt;</span><br><span class="line">            t.banner_logo = #{bannerLogo},</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    where t.banner_id = #{bannerId}</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></tbody></table></figure><p>foreach : 主要用于批量删除或批量插入。<br>它的6个参数说明：<br>collection：要循环的集合<br>index：循环索引；<br>item：集合中的一个元素（item和collection，按foreach循环理解）；<br>open：以什么开始；<br>close：以什么结束；<br>separator：循环内容之间以什么分隔<br>mybatis接受的参数分为：（1）基本类型；（2）对象；（3）List；（4）数组；（5）Map<br>例子：（入参为list，collection为list）</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">"deleteWorkshopByIds"</span> parameterType=<span class="string">"Integer"</span> &gt;</span><br><span class="line">update workshop set status =<span class="number">0</span></span><br><span class="line">where id in</span><br><span class="line">  &lt;foreach collection=<span class="string">"list"</span> index=<span class="string">"i"</span> item=<span class="string">"id"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">  #{id}</span><br><span class="line">  &lt;/foreach&gt;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></tbody></table></figure><p>choose : 是按顺序判断其内部when标签中的test条件出否成立，如果有一个成立，则 choose 结束。当 choose 中所有 when 的条件都不满则时，则执行 otherwise 中的sql。<br>例子：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  choose(判断参数) - 按顺序将实体类 User 第一个不为空的属性作为：where条件 --&gt;  </span><br><span class="line">&lt;select id=<span class="string">"getUserList_choose"</span> resultMap=<span class="string">"resultMap_user"</span> parameterType=<span class="string">"com.yiibai.pojo.User"</span>&gt;  </span><br><span class="line">SELECT *  </span><br><span class="line">  FROM User u   </span><br><span class="line">&lt;where&gt;  </span><br><span class="line">    &lt;choose&gt;  </span><br><span class="line">        &lt;when test=<span class="string">"username !=null "</span>&gt;  </span><br><span class="line">            u.<span class="function">username LIKE <span class="title">CONCAT</span><span class="params">(CONCAT(<span class="string">'%'</span>, #{username, jdbcType=VARCHAR})</span>,'%')  </span></span><br><span class="line"><span class="function">        &lt;/when &gt;  </span></span><br><span class="line"><span class="function">        &lt;when test</span>=<span class="string">"sex != null and sex != '' "</span>&gt;  </span><br><span class="line">            AND u.sex = #{sex, jdbcType=INTEGER}  </span><br><span class="line">        &lt;/when &gt;  </span><br><span class="line">        &lt;when test=<span class="string">"birthday != null "</span>&gt;  </span><br><span class="line">            AND u.birthday = #{birthday, jdbcType=DATE}  </span><br><span class="line">        &lt;/when &gt;  </span><br><span class="line">        &lt;otherwise&gt;  </span><br><span class="line">        &lt;/otherwise&gt;  </span><br><span class="line">    &lt;/choose&gt;  </span><br><span class="line">&lt;/where&gt;</span><br></pre></td></tr></tbody></table></figure><p>标签<br>if : 这个签前面已经涉及到了。<br>bind : 可以从 OGNL 表达式中创建一个变量并将其绑定到上下文</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectBlogsLike"</span> resultType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">&lt;bind name=<span class="string">"pattern"</span> value=<span class="string">"'%' + _parameter.getTitle() + '%'"</span> /&gt;</span><br><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE title LIKE #{pattern}</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><p>回到原先的话题映射涉及复杂map,list,set等。<br>一对多collection 例子：一个班级相关的学生。StudentEntity是学生实体。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClazzEntity</span> </span>{</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> clazzID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String clazzName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;StudentEntity&gt; studentList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>例子：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">"ClazzResultMap"</span> type=<span class="string">"com.cn.hnust.pojo.ClazzEntity"</span> &gt;</span><br><span class="line">  &lt;id column=<span class="string">"classID"</span> property=<span class="string">"clazzID"</span> jdbcType=<span class="string">"INTEGER"</span> /&gt;</span><br><span class="line"> &lt;result column=<span class="string">"className"</span> property=<span class="string">"clazzName"</span> jdbcType=<span class="string">"VARCHAR"</span> /&gt;</span><br><span class="line">&lt;collection property=<span class="string">"studentList"</span> column=<span class="string">"classID"</span> javaType=<span class="string">"ArrayList"</span> </span><br><span class="line">            ofType=<span class="string">"com.cn.hnust.pojo.StudentEntity"</span> select=<span class="string">"getStudentByClassID"</span>/&gt;</span><br><span class="line"> &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line"> &lt;resultMap id=<span class="string">"StudentResultMap"</span> type=<span class="string">"com.cn.hnust.pojo.StudentEntity"</span>&gt;  </span><br><span class="line"> &lt;id property=<span class="string">"stuID"</span> column=<span class="string">"stuID"</span> /&gt;  </span><br><span class="line">&lt;result property=<span class="string">"stuName"</span> column=<span class="string">"stuName"</span> /&gt;  </span><br><span class="line">&lt;result property=<span class="string">"stuAge"</span> column=<span class="string">"stuAge"</span> /&gt;  </span><br><span class="line">&lt;result property=<span class="string">"stuAddress"</span> column=<span class="string">"stuAddress"</span> /&gt;</span><br><span class="line">  &lt;/resultMap&gt;  </span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getClassByID"</span> resultMap=<span class="string">"ClazzResultMap"</span> parameterType=<span class="string">"java.lang.Integer"</span> &gt;</span><br><span class="line">select classID,className</span><br><span class="line">from class_t</span><br><span class="line">where classID = #{clazzID}</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getStudentByClassID"</span> resultMap=<span class="string">"StudentResultMap"</span> parameterType=<span class="string">"java.lang.Integer"</span> &gt;</span><br><span class="line">select stuID,stuName,stuAge,stuAddress,classID</span><br><span class="line"> from student_t</span><br><span class="line">where classID = #{clazzID}</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><p>一对多，一对一（association ）：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=<span class="string">"Bill"</span> id=<span class="string">"ResultBill"</span>&gt;  </span><br><span class="line">       &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;  </span><br><span class="line">       &lt;result property=<span class="string">"dh"</span> column=<span class="string">"dh"</span>  /&gt;          </span><br><span class="line">       &lt;result property=<span class="string">"rq"</span> column=<span class="string">"rq"</span>/&gt;  </span><br><span class="line">       &lt;association property=<span class="string">"author"</span>  javaType=<span class="string">"Author"</span>  &gt;  </span><br><span class="line">          &lt;id  property=<span class="string">"id"</span>  column=<span class="string">"idAutor"</span> /&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"name"</span> column=<span class="string">"authorName"</span> /&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"email"</span> column=<span class="string">"authorEmail"</span>/&gt;  </span><br><span class="line">       &lt;/association&gt;          </span><br><span class="line">       &lt;collection property=<span class="string">"det1"</span>  javaType=<span class="string">"ArrayList"</span> ofType=<span class="string">"BillDet1"</span> &gt;  </span><br><span class="line">          &lt;id property=<span class="string">"id"</span> column=<span class="string">"idDet1"</span>/&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"dh"</span> column=<span class="string">"dhDet1"</span>/&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"wlbm"</span> column=<span class="string">"wlbm"</span>/&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"wlmc"</span> column=<span class="string">"wlmc"</span>/&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"unit"</span> column=<span class="string">"unit"</span>/&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"qty"</span> column=<span class="string">"qty"</span>/&gt;  </span><br><span class="line">       &lt;/collection&gt;  </span><br><span class="line">&lt;/resultMap&gt;  </span><br><span class="line">&lt;resultMap type=<span class="string">"com.sailod.shiro.dto.HtAuthorityMenuDTO"</span> id=<span class="string">"OneMenuAuthority"</span>&gt;  </span><br><span class="line">    &lt;id property=<span class="string">"htAuthorityId"</span> column=<span class="string">"htAuthorityId"</span> javaType=<span class="string">"java.lang.Long"</span> /&gt;  </span><br><span class="line">    &lt;result property=<span class="string">"name"</span> column=<span class="string">"name"</span> javaType=<span class="string">"java.lang.String"</span> /&gt;  </span><br><span class="line">    &lt;result property=<span class="string">"currentUserId"</span> column=<span class="string">"currentUserId"</span> javaType=<span class="string">"java.lang.Long"</span> /&gt;  </span><br><span class="line">    &lt;collection property=<span class="string">"htAuthorityDTO"</span>  ofType=<span class="string">"com.sailod.shiro.dto.HtAuthorityDTO"</span>  </span><br><span class="line">     select=<span class="string">"selectAuthority"</span> column=<span class="string">"{htAuthorityId2 = htAuthorityId ,currentUserId2 = currentUserId}"</span>   &gt;  </span><br><span class="line">     &lt;/collection&gt;  </span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://liudufu.github.io/tags/java/"/>
    
      <category term="mybatis" scheme="https://liudufu.github.io/tags/mybatis/"/>
    
      <category term="mappers" scheme="https://liudufu.github.io/tags/mappers/"/>
    
      <category term="数据库" scheme="https://liudufu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>windows下如何安装redis</title>
    <link href="https://liudufu.github.io/How_to_install_redis_under_Windows/"/>
    <id>https://liudufu.github.io/How_to_install_redis_under_Windows/</id>
    <published>2020-12-08T09:59:45.000Z</published>
    <updated>2020-12-08T10:32:53.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows和Linux下Redis的安装和使用-最新"><a href="#windows和Linux下Redis的安装和使用-最新" class="headerlink" title="windows和Linux下Redis的安装和使用(最新)"></a>windows和Linux下Redis的安装和使用(最新)</h1><blockquote><p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p><p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p></blockquote><a id="more"></a><h2 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h2><p>1、到<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a>,前往下载页面</p><p><a href="https://imgchr.com/i/DvHmdS" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHmdS.png" alt="DvHmdS.png"></a></p><p>2、在下载网页中，找到最后发行的版本（此处是3.2.100）。找到Redis-x64-3.2.100.msi和Redis-x64-3.2.100.zip，点击下载。这里说明一下，第一个是msi微软格式的安装包，第二个是压缩包。</p><p><a href="https://imgchr.com/i/DvHeZ8" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHeZ8.png" alt="DvHeZ8.png"></a></p><p>3、双击刚下载好的msi格式的安装包（Redis-x64-3.2.100.msi）开始安装</p><p><a href="https://imgchr.com/i/DvHEsP" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHEsP.png" alt="DvHEsP.png"></a></p><p>4、选择“同意协议”，点击下一步继续。</p><p>5、勾选“添加Redis目录到环境变量PATH中”，这样方便系统自动识别Redis执行文件在哪里。</p><p>6、端口号可保持默认的6379，并选择防火墙例外，从而保证外部可以正常访问Redis服务</p><p>7、设定最大值为100M。作为实验和学习，100M足够了。</p><p>8、击安装后，正式的安装过程开始。稍等一会即可完成。</p><p>9、安装完毕后，需要先做一些设定工作，以便服务启动后能正常运行。使用文本编辑器，这里使用Notepad++，打开Redis服务配置文件。<strong>注意：不要找错了，通常为redis.windows-service.conf，而不是redis.windows.conf。后者是以非系统服务方式启动程序使用的配置文件。</strong></p><p>10、找到含有requirepass字样的地方，追加一行，输入requirepass 密码。这是访问Redis时所需的密码，一般测试情况下可以不用设定密码。不过，即使是作为本地访问，也建议设定一个密码。</p><p><a href="https://imgchr.com/i/DvHVqf" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHVqf.png" alt="DvHVqf.png"></a></p><p>11、点击“开始”&gt;右击“计算机”&gt;选择“管理”。在左侧栏中依次找到并点击“计算机管理（本地）”&gt;服务和应用程序&gt;服务。再在右侧找到Redis名称的服务，查看启动情况。如未启动，则手动启动之。正常情况下，服务应该正常启动并运行了,如果启动了，就点击重新启动。</p><p>12、最后来测试一下Redis是否正常提供服务。进入Redis的目录，cd D:\Redis。输入redis-cli并回车。（redis-cli是客户端程序）如图正常提示进入，并显示正确端口号，则表示服务已经启动。</p><p><a href="https://imgchr.com/i/DvHAMt" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHAMt.png" alt="DvHAMt.png"></a></p><p>13、使用服务前需要先通过密码验证。输入“auth 密码“回车（密码是之前设定的密码）。返回提示OK表示验证通过。</p><p>14、实际测试一下读写。输入set mykey1 “I love you all!”并回车，用来保存一个键值。再输入get mykey1，获取刚才保存的键值。</p><p><a href="https://imgchr.com/i/DvHnIg" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHnIg.png" alt="DvHnIg.png"></a></p><p>15、注意事项</p><ul><li>1.Windows使用的这个Redis是64位版本的，32位操作系统的同学就不要折腾了。</li><li>2.<strong>作为服务运行的Redis配置文件，通常为redis.windows-service.conf，而不是redis.windows.conf。小心不要选错了。</strong></li></ul><p>参考：<a href="https://www.cnblogs.com/liuqingzheng/p/9831331.html" target="_blank" rel="noopener">liuqingzheng</a></p><h2 id="Linux源码安装"><a href="#Linux源码安装" class="headerlink" title="Linux源码安装"></a>Linux源码安装</h2><p>下载地址：<a href="http://redis.io/download" target="_blank" rel="noopener">http://redis.io/download</a>,下载稳定最新版本</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wget http://download.redis.io/releases/redis-6.0.8.tar.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar xzf redis-6.0.8.tar.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> redis-6.0.8</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make</span></span><br></pre></td></tr></tbody></table></figure><p>执行完 <strong>make</strong> 命令后，redis-6.0.8 的 <strong>src</strong> 目录下会出现编译后的 redis 服务程序 redis-server，还有用于测试的客户端程序 redis-cli：</p><p>下面启动 redis 服务：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> src</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./redis-server</span></span><br></pre></td></tr></tbody></table></figure><p>注意这种方式启动 redis 使用的是默认配置。也可以通过启动参数告诉 redis 使用指定配置文件使用下面命令启动。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> src</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./redis-server ../redis.conf</span></span><br></pre></td></tr></tbody></table></figure><p><strong>redis.conf</strong> 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。</p><p>启动 redis 服务进程后，就可以使用测试客户端程序 redis-cli 和 redis 服务交互了。 比如：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> src</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./redis-cli</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> <span class="built_in">set</span> foo bar</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> get foo</span></span><br><span class="line">"bar"</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Ubuntu-apt-命令安装"><a href="#Ubuntu-apt-命令安装" class="headerlink" title="Ubuntu apt 命令安装"></a>Ubuntu apt 命令安装</h2><p>在 Ubuntu 系统安装 Redis 可以使用以下命令:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sudo apt update</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt install redis-server</span></span><br></pre></td></tr></tbody></table></figure><h3 id="启动-Redis"><a href="#启动-Redis" class="headerlink" title="启动 Redis"></a>启动 Redis</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> redis-server</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查看-redis-是否启动？"><a href="#查看-redis-是否启动？" class="headerlink" title="查看 redis 是否启动？"></a>查看 redis 是否启动？</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> redis-cli</span></span><br></pre></td></tr></tbody></table></figure><p>以上命令将打开以下终端：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></tbody></table></figure><p>127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></tbody></table></figure><p>以上说明我们已经成功安装了redis。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;windows和Linux下Redis的安装和使用-最新&quot;&gt;&lt;a href=&quot;#windows和Linux下Redis的安装和使用-最新&quot; class=&quot;headerlink&quot; title=&quot;windows和Linux下Redis的安装和使用(最新)&quot;&gt;&lt;/a&gt;windows和Linux下Redis的安装和使用(最新)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。&lt;/p&gt;
&lt;p&gt;Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。&lt;/p&gt;
&lt;p&gt;它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Redis" scheme="https://liudufu.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>SQLyog连接数据库报错plugin caching_sha2_password could not be loaded</title>
    <link href="https://liudufu.github.io/SQL_log_connection_database_report/"/>
    <id>https://liudufu.github.io/SQL_log_connection_database_report/</id>
    <published>2020-12-08T09:57:08.000Z</published>
    <updated>2020-12-08T09:59:22.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQLyog连接数据库报错plugin-caching-sha2-password-could-not-be-loaded"><a href="#SQLyog连接数据库报错plugin-caching-sha2-password-could-not-be-loaded" class="headerlink" title="SQLyog连接数据库报错plugin caching_sha2_password could not be loaded"></a>SQLyog连接数据库报错plugin caching_sha2_password could not be loaded</h1><a id="more"></a><p><a href="https://imgchr.com/i/Dth1yR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/24/Dth1yR.png" alt="Dth1yR.png"></a></p><h2 id="出错原因"><a href="#出错原因" class="headerlink" title="出错原因"></a>出错原因</h2><blockquote><p>MySQL新版默认使用caching_sha2_password作为身份验证插件，而旧版是使用mysql_native_password。<br>当连接MySQL时报错“plugin caching_sha2_password could not be loaded”时，可换回旧版插件。</p></blockquote><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ul><li>cmd:进入数据库，<code>mysql -uroot -p</code></li><li>依次执行<ul><li><code>mysql&gt; alter user 'root'@'localhost' identified by 'yours password' password expire never; # 重置root密码，修改密码加密规则</code></li><li><code>mysql&gt; alter user 'root'@'localhost' identified with mysql_native_password by 'yours password' # 更新用户密码;</code></li><li><code>mysql&gt; flush privileges;  # 刷新权限</code></li></ul></li><li>然后再次连接SQLyog即可成功访问</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQLyog连接数据库报错plugin-caching-sha2-password-could-not-be-loaded&quot;&gt;&lt;a href=&quot;#SQLyog连接数据库报错plugin-caching-sha2-password-could-not-be-loaded&quot; class=&quot;headerlink&quot; title=&quot;SQLyog连接数据库报错plugin caching_sha2_password could not be loaded&quot;&gt;&lt;/a&gt;SQLyog连接数据库报错plugin caching_sha2_password could not be loaded&lt;/h1&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Debug" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/Debug/"/>
    
    
      <category term="MySql" scheme="https://liudufu.github.io/tags/MySql/"/>
    
      <category term="Debug" scheme="https://liudufu.github.io/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>git教程</title>
    <link href="https://liudufu.github.io/Git_tutorial/"/>
    <id>https://liudufu.github.io/Git_tutorial/</id>
    <published>2020-12-08T09:47:32.000Z</published>
    <updated>2020-12-08T09:51:04.509Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p></blockquote><a id="more"></a><h1 id="Git教程"><a href="#Git教程" class="headerlink" title="Git教程"></a>Git教程</h1><p>注明：学习自<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰老师</a></p><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><ol><li><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ul><li><h5 id="在Linux上安装Git"><a href="#在Linux上安装Git" class="headerlink" title="在Linux上安装Git"></a>在Linux上安装Git</h5><p>首先，你可以试着输入<code>git</code>，看看系统有没有安装Git：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git</span><br><span class="line">The program 'git' is currently not installed. You can install it by typing:</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></tbody></table></figure><p>像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。</p><p>如果你碰巧用Debian或Ubuntu Linux，通过一条<code>sudo apt-get install git</code>就可以直接完成Git的安装，非常简单。</p><p>老一点的Debian或Ubuntu Linux，要把命令改为<code>sudo apt-get install git-core</code>，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫<code>git-core</code>了。由于Git名气实在太大，后来就把GNU Interactive Tools改成<code>gnuit</code>，<code>git-core</code>正式改为<code>git</code>。</p><p>如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：<code>./config</code>，<code>make</code>，<code>sudo make install</code>这几个命令安装就好了。</p></li><li><h5 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h5><p>如果你正在使用Mac做开发，有两种安装Git的方法。</p><p>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/。" target="_blank" rel="noopener">http://brew.sh/。</a></p><p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p></li><li><h5 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h5><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载安装程序</a>，然后按默认选项安装即可。</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name "Your Name"</span><br><span class="line">$ git config --global user.email "email@example.com"</span><br></pre></td></tr></tbody></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></li></ul></li><li><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br><span class="line">/Users/michael/learngit</span><br></pre></td></tr></tbody></table></figure><p><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/michael/learngit</code>。</p><p>第二步，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/michael/learngit/.git/</span><br></pre></td></tr></tbody></table></figure><p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><p>也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。不过，不建议你使用自己正在开发的公司项目来学习Git，否则造成的一切后果概不负责。</p><h5 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h5><p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p><p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p><p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p><p>使用Windows的童鞋要特别注意：</p><p>千万不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载<a href="http://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可</p><p>言归正传，现在我们编写一个<code>readme.txt</code>文件，内容如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></tbody></table></figure><p>一定要放到<code>learngit</code>目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p><p>和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。</p><p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></tbody></table></figure><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p><p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m "wrote a readme file"</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></tbody></table></figure><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>嫌麻烦不想输入<code>-m "xxx"</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m "add 3 files."</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>现在总结一下今天学的两点内容：</p><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li></ol></li></ol><h2 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h2><ol><li><p>版本回退</p><ul><li><code>HEAD</code>指向的版本就是当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。因此，Git允许我们在版本的历史之间穿梭，还可以写成使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul></li><li><p>工作区和暂存区</p><ul><li><p>工作区：电脑里能看到的目录，前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。（所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。）</p></li><li><p>Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master(仓库)</p><p>工作区&gt;&gt;&gt;&gt;暂存区&gt;&gt;&gt;&gt;仓库</p><p><code>git add</code>把文件从工作区&gt;&gt;&gt;&gt;暂存区，``git commit`把文件从暂存区&gt;&gt;&gt;&gt;仓库，</p><p><code>git diff</code>查看工作区和暂存区差异，</p><p><code>git diff</code> –cached查看暂存区和仓库差异，</p><p><code>git diff HEAD</code>查看工作区和仓库的差异，</p><p><code>git add</code>的反向命令<code>git checkout</code>，撤销工作区修改，即把暂存区最新版本转移到工作区，</p><p><code>git commit</code>的反向命令``git reset HEAD`，就是把仓库最新版本转移到暂存区。</p></li></ul></li><li><p>管理修改</p><ul><li>理解了Git是如何跟踪修改的，每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</li></ul></li><li><p>撤销修改</p><ul><li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</li><li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</li><li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192" target="_blank" rel="noopener">版本回退</a>一节，不过前提是没有推送到远程库。</li></ul></li><li><p>删除文件</p><ul><li><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：<code>$ rm test.txt</code></p></li><li><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200602163313271.png" alt="image-20200602163313271"></p></li><li><p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：<code>$ git rm test.txt</code> <code>rm 'test.txt'</code> 现在，文件就从版本库中被删除了</p></li><li><p>小提示：先手动删除文件，然后使用<code>git rm &lt;file&gt;</code>和<code>git add&lt;file&gt;</code>效果是一样的。</p></li><li><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：<code>$ git checkout -- test.txt</code>。<code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。但是，<u><strong>从来没有被添加到版本库就被删除的文件，是无法恢复的！</strong></u></p></li><li><p>小结：命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p></li></ul></li></ol><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ol><li><p>添加远程库</p><ul><li><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；以<code>github</code>为例子：<code>git remote add origin git@github.com:liudufu/First_Git_Text.git</code></p></li><li><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p></li><li><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而<code>SVN</code>在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了</p></li></ul></li><li><p>从远程库克隆</p><ul><li><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。例如：<code>git clone git@github.com:michaelliao/gitskills.git</code></p></li><li><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。你也许还注意到，<code>GitHub</code>给出的地址不止一个，还可以用<code>https://github.com/michaelliao/gitskills.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p><p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放<code>http</code>端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p></li><li><p>Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快。</p></li></ul></li></ol><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><ol><li><p>简介：分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p></li><li><p>创建与合并分支</p><ul><li><p><code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200603203525643.png" alt="image-20200603203525643"></p></li><li><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200603203559448.png" alt="image-20200603203559448"></p></li><li><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支</p><figure class="highlight plain"><figcaption><span>checkout -b dev```</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`git checkout`命令加上`-b`参数表示创建并切换，相当于以下两条命令：</span><br></pre></td></tr></tbody></table></figure><p>$ git branch dev<br>$ git checkout dev<br>Switched to branch ‘dev’</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 把`dev`分支的工作成果合并到`master`分支上：</span><br><span class="line"></span><br><span class="line">  ```git</span><br><span class="line">  $ git merge dev</span><br><span class="line">  Updating d46f35e..b17d20e</span><br><span class="line">  Fast-forward</span><br><span class="line">   readme.txt | 1 +</span><br><span class="line">   1 file changed, 1 insertion(+)</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p><p>当然，也不是每次合并都能<code>Fast-forward</code></p></li><li><p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。</p><p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支：</p><p>创建并切换到新的<code>dev</code>分支，可以使用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git switch -c dev</span><br></pre></td></tr></tbody></table></figure></li><li><p>直接切换到已有的<code>master</code>分支，可以使用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git switch master</span><br></pre></td></tr></tbody></table></figure><p>​    使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p></li><li><p>小结：查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p></li></ul></li><li><p>解决冲突</p><ul><li>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</li><li>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</li><li>用<code>git log --graph</code>命令可以看到分支合并图。</li></ul></li><li><p>分支管理策略</p><ul><li><p>Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：</p></li><li><p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m "merge with no-ff" dev</span><br></pre></td></tr></tbody></table></figure></li><li><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。合并后，我们用<code>git log</code>看看分支历史：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200603213003612.png" alt="image-20200603213003612"></p></li><li><p>在Git中，干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p></li></ul></li><li><p>bug分支</p><ul><li><p>哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch 'master'</span><br><span class="line">Your branch is ahead of 'origin/master' by 6 commits.</span><br><span class="line">  (use "git push" to publish your local commits)</span><br><span class="line"></span><br><span class="line">$ git checkout -b issue-101</span><br><span class="line">Switched to a new branch 'isse-101'</span><br></pre></td></tr></tbody></table></figure></li><li><p>bug 修复后把文件add以及commit，切换回master分支，删除<code>issue-101</code>分支：<code>$ git switch master</code> <code>git merge --no-ff -m "merged bug fix 101" issue-101</code></p></li><li><p>查看刚才的工作现场<code>git stash list</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@{0}: WIP on dev: f52c633 add merge</span><br></pre></td></tr></tbody></table></figure></li><li><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p><p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p><p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：再用<code>git stash list</code>查看，就看不到任何stash内容了：</p><p>你可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply stash@{0}</span><br></pre></td></tr></tbody></table></figure></li><li><p>同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p><p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git cherry-pick 4c805e2</span><br><span class="line">[master 1d4b803] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></tbody></table></figure><p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，因为这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍。</p><p>有些聪明的童鞋会想了，既然可以在master分支上修复bug后，在dev分支上可以“重放”这个修复过程，那么直接在dev分支上修复bug，然后在master分支上“重放”行不行？当然可以，不过你仍然需要<code>git stash</code>命令保存现场，才能从dev分支切换到master分支。</p></li><li><p>小结：修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p><p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动</p></li></ul></li><li><p>Feature分支</p><ul><li><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p></li></ul></li><li><p>多人协作</p><ul><li><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。要查看远程库的信息，用<code>git remote</code>用<code>git remote -v</code>显示更详细的信息：</p></li><li><p><code>master</code>分支是主分支，因此要时刻与远程同步；<code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p></li><li><p>抓取分支，现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：<code>$ git clone git@github.com:michaelliao/learngit.git</code></p></li><li><p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：<code>$ git push origin dev</code>,这个时候会推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：如果<code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --set-upstream-to=origin/dev dev</span><br><span class="line">Branch 'dev' set up to track remote branch 'dev' from 'origin'.</span><br></pre></td></tr></tbody></table></figure><p>在进行pull,这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="http://www.liaoxuefeng.com/wiki/896043488029600/900004111093344" target="_blank" rel="noopener">解决冲突</a>完全一样。解决后，提交，再push：</p></li><li><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p></li><li><p>小结：查看远程库信息，使用<code>git remote -v</code>；</p><ul><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul></li></ul></li><li><p>Rebase</p><ul><li><p>多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。</p><p>每次合并再push后，分支变成了这样</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* d1be385 (HEAD -&gt; master, origin/master) init hello</span><br><span class="line">*   e5e69f1 Merge branch 'dev'</span><br><span class="line">|\  </span><br><span class="line">| *   57c53ab (origin/dev, dev) fix env conflict</span><br><span class="line">| |\  </span><br><span class="line">| | * 7a5e5dd add env</span><br><span class="line">| * | 7bd91f1 add new env</span><br><span class="line">| |/  </span><br><span class="line">* |   12a631b merged bug fix 101</span><br><span class="line">|\ \  </span><br><span class="line">| * | 4c805e2 fix bug 101</span><br><span class="line">|/ /  </span><br><span class="line">* |   e1e9c68 merge with no-ff</span><br><span class="line">|\ \  </span><br><span class="line">| |/  </span><br><span class="line">| * f52c633 add merge</span><br><span class="line">|/  </span><br><span class="line">*   cf810e4 conflict fixed</span><br></pre></td></tr></tbody></table></figure></li><li><p>这个时候，rebase就派上了用场。我们输入命令<code>git rebase</code>试试</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: add comment</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">Mhello.py</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging hello.py</span><br><span class="line">Applying: add author</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">Mhello.py</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging hello.py</span><br></pre></td></tr></tbody></table></figure></li><li><p>输出了一大堆操作，到底是啥效果？再用<code>git log</code>看看：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 7e61ed4 (HEAD -&gt; master) add author</span><br><span class="line">* 3611cfe add comment</span><br><span class="line">* f005ed4 (origin/master) set exit=1</span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure></li><li><p>原本分叉的提交现在变成一条直线了！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了<code>f005ed4 (origin/master) set exit=1</code>之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于<code>d1be385 init hello</code>，而是基于<code>f005ed4 (origin/master) set exit=1</code>，但最后的提交<code>7e61ed4</code>内容是一致的。</p><p>这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p><p>最后，通过push操作把本地分支推送到远程：</p></li><li><p>再用<code>git log</code>看看效果</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 7e61ed4 (HEAD -&gt; master, origin/master) add author</span><br><span class="line">* 3611cfe add comment</span><br><span class="line">* f005ed4 set exit=1</span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>远程分支的提交历史也是一条直线。</p></li><li><p>小结：</p><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul></li></ul></li></ol><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><ol><li><p>简介：发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。例如：</p><p>请把上周一的那个版本打包发布，版本号是v1.2”</p><p>“好的，按照tag v1.2查找commit就行！”</p><p>所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p></li><li><p>创建标签</p><ul><li>打标签很简单,切换到打标签的分支</li></ul></li></ol><pre><code><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">* dev</span><br><span class="line">master</span><br><span class="line">$ git checkout master</span><br></pre></td></tr></tbody></table></figure>敲`git tag &lt;name&gt;`打一个新的标签<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.0</span><br></pre></td></tr></tbody></table></figure>使用`git tag` 查看所有标签<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1.0</span><br></pre></td></tr></tbody></table></figure>比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？方法是找到历史提交的commit id，然后打上就可以了<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline --abbrev-commit</span><br><span class="line">12a631b (HEAD -&gt; master, tag: v1.0, origin/master) merged bug fix 101</span><br><span class="line">4c805e2 fix bug 101</span><br><span class="line">e1e9c68 merge with no-ff</span><br><span class="line">f52c633 add merge</span><br><span class="line">cf810e4 conflict fixed</span><br><span class="line">5dc6824 &amp; simple</span><br><span class="line">14096d0 AND simple</span><br><span class="line">b17d20e branch test</span><br><span class="line">d46f35e remove test.txt</span><br><span class="line">b84166e add test.txt</span><br><span class="line">519219b git tracks changes</span><br><span class="line">e43a48b understand how stage works</span><br><span class="line">1094adb append GPL</span><br><span class="line">e475afc add distributed</span><br><span class="line">eaadf4e wrote a readme file</span><br></pre></td></tr></tbody></table></figure>比方说要对`add merge`这次提交打标签，它对应的commit id是`f52c633`，敲入命令：`$ git tag v0.9 f52c633`</code></pre><ul><li><p>标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</p></li><li><p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.1 -m "version 0.1 released" 1094adb</span><br></pre></td></tr></tbody></table></figure><p>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0.1</span><br><span class="line">tag v0.1</span><br><span class="line">Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 22:48:43 2018 +0800</span><br><span class="line"></span><br><span class="line">version 0.1 released</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</strong></p></li><li><p>小结：</p><ul><li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li><li>命令<code>git tag -a &lt;tagname&gt; -m "blablabla..."</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签。</li></ul></li></ul><ol start="3"><li><p>操作标签</p><ul><li><p>删除一个标签：<code>git tag -d v0.1</code></p></li><li><p>因为创建的标签都保存在本地，不会自动推送到远程。所以打错的标签可以在本地安全的删除，如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1.0</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></tbody></table></figure><p>或者，一次性推送全部尚未推送到远程的本地标签：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v0.9 -&gt; v0.9</span><br></pre></td></tr></tbody></table></figure></li><li><p>如果需要删除已经推送到远程的标签，需要先删除本地标签</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.9</span><br><span class="line">Deleted tag 'v0.9' (was f52c633)</span><br></pre></td></tr></tbody></table></figure><p>然后，从远程删除，命令也是push，但是格式却不同：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/v0.9</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> - [deleted]         v0.9</span><br></pre></td></tr></tbody></table></figure><p>登录GitHub查看是否删除了标签</p></li><li><p>小结：</p><ul><li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li></ul></li></ul></li></ol><h2 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h2><ol><li><p>如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a href="https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：" target="_blank" rel="noopener">https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:michaelliao/bootstrap.git</span><br></pre></td></tr></tbody></table></figure><p>一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址<code>git@github.com:twbs/bootstrap.git</code>克隆，因为没有权限，你将不能推送修改。</p><p>Bootstrap的官方仓库<code>twbs/bootstrap</code>、你在GitHub上克隆的仓库<code>my/bootstrap</code>，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200605203808429.png" alt="image-20200605203808429"></p><p>如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。</p><p>如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。</p><p>如果你没能力修改bootstrap，但又想要试一把pull request，那就Fork一下我的仓库：<a href="https://github.com/michaelliao/learngit，创建一个`your-github-id.txt`的文本文件，写点自己学习Git的心得，然后推送一个pull" target="_blank" rel="noopener">https://github.com/michaelliao/learngit，创建一个`your-github-id.txt`的文本文件，写点自己学习Git的心得，然后推送一个pull</a> request给我，我会视心情而定是否接受。<a href="https://github.com" target="_blank" rel="noopener">liudufu</a>     <a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p></li><li><p><strong>小结</strong></p><ul><li>在GitHub上，可以任意Fork开源仓库；</li><li>自己拥有Fork后的仓库的读写权限；</li><li>可以推送pull request给官方仓库来贡献代码。</li></ul></li></ol><h2 id="使用Gitee"><a href="#使用Gitee" class="headerlink" title="使用Gitee"></a>使用Gitee</h2><ol><li><p>和GitHub相比，Gitee也提供免费的Git仓库。此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，Gitee还提供了项目管理、代码托管、文档管理的服务，5人以下小团队免费。</p><p>Gitee的免费版本也提供私有库功能，只是有5人的成员上限。</p><p>使用Gitee和使用GitHub类似，我们在Gitee上注册账号并登录后，需要先上传自己的SSH公钥。选择右上角用户头像 -&gt; 菜单“修改资料”，然后选择“SSH公钥”，填写一个便于识别的标题，然后把用户主目录下的<code>.ssh/id_rsa.pub</code>文件的内容粘贴进去：</p></li><li><p>如果我们已经有了一个本地的git仓库（例如，一个名为learngit的本地库），如何把它关联到Gitee的远程库上呢？</p><p>首先，我们在Gitee上创建一个新的项目项目名称最好与本地库保持一致：</p><p>然后，我们在本地库上使用命令<code>git remote add</code>把它和Gitee的远程库关联：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">(git remote add origin git@gitee.com:https://gitee.com/dufu-03-13/git_repo_Text)</span><br></pre></td></tr></tbody></table></figure><p>之后，就可以正常地用<code>git push</code>和<code>git pull</code>推送了！</p><p>如果在使用命令<code>git remote add</code>时报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">fatal: remote origin already exists.</span><br></pre></td></tr></tbody></table></figure><p>这说明本地库已经关联了一个名叫<code>origin</code>的远程库，此时，可以先用<code>git remote -v</code>查看远程库信息：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origingit@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origingit@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></tbody></table></figure><p>可以看到，本地库已经关联了<code>origin</code>的远程库，并且，该远程库指向GitHub。</p><p>我们可以删除已有的GitHub远程库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></tbody></table></figure><p>再关联Gitee的远程库（注意路径中需要填写正确的用户名）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></tbody></table></figure><p>此时，我们再查看远程库信息：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origingit@gitee.com:liaoxuefeng/learngit.git (fetch)</span><br><span class="line">origingit@gitee.com:liaoxuefeng/learngit.git (push)</span><br></pre></td></tr></tbody></table></figure><p>现在可以看到，origin已经被关联到Gitee的远程库了。通过<code>git push</code>命令就可以把本地库推送到Gitee上。</p><p>git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。</p><p>使用多个远程库时，我们要注意，git给远程库起的默认名称是<code>origin</code>，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。</p><p>仍然以<code>learngit</code>本地库为例，我们先删除已关联的名为<code>origin</code>的远程库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></tbody></table></figure><p>然后，先关联GitHub的远程库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add github git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></tbody></table></figure><p>注意，远程库的名称叫<code>github</code>，不叫<code>origin</code>了。</p><p>接着，再关联Gitee的远程库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></tbody></table></figure><p>同样注意，远程库的名称叫<code>gitee</code>，不叫<code>origin</code>。</p><p>现在，我们用<code>git remote -v</code>查看远程库信息，可以看到两个远程库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">giteegit@gitee.com:liaoxuefeng/learngit.git (fetch)</span><br><span class="line">giteegit@gitee.com:liaoxuefeng/learngit.git (push)</span><br><span class="line">githubgit@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">githubgit@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></tbody></table></figure><p>如果要推送到GitHub，使用命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push github master</span><br></pre></td></tr></tbody></table></figure><p>如果要推送到Gitee，使用命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u gitee master</span><br></pre></td></tr></tbody></table></figure><p>这样一来，我们的本地库就可以同时与多个远程库互相同步：</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;/p&gt;
&lt;p&gt;Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Git" scheme="https://liudufu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>MySql基础学习</title>
    <link href="https://liudufu.github.io/MySQL_basic_learning/"/>
    <id>https://liudufu.github.io/MySQL_basic_learning/</id>
    <published>2020-12-08T09:44:55.000Z</published>
    <updated>2020-12-08T09:56:17.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MySQL是一个<strong><a href="https://baike.baidu.com/item/关系型数据库管理系统/696511" target="_blank" rel="noopener">关系型数据库管理系统</a>**</strong>，**由瑞典MySQL AB 公司开发，属于 <a href="https://baike.baidu.com/item/Oracle" target="_blank" rel="noopener">Oracle</a> 旗下产品。MySQL 是最流行的<a href="https://baike.baidu.com/item/关系型数据库管理系统/696511" target="_blank" rel="noopener">关系型数据库管理系统</a>之一，在 WEB 应用方面，MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260" target="_blank" rel="noopener">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p></blockquote><a id="more"></a><h1 id="MySql基础学习"><a href="#MySql基础学习" class="headerlink" title="MySql基础学习"></a>MySql基础学习</h1><h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><h3 id="1-1-现有的数据存储方式有哪些？"><a href="#1-1-现有的数据存储方式有哪些？" class="headerlink" title="1.1 现有的数据存储方式有哪些？"></a>1.1 现有的数据存储方式有哪些？</h3><ul><li>Java程序存储数据（变量、对象、数组、集合），数据保存在内存中，属于瞬时状态存储。</li><li>文件（File）存储数据，保存在硬盘上，属于持久状态存储。</li></ul><h3 id="1-2-以上存储方式存在哪些缺点？"><a href="#1-2-以上存储方式存在哪些缺点？" class="headerlink" title="1.2 以上存储方式存在哪些缺点？"></a>1.2 以上存储方式存在哪些缺点？</h3><ul><li>没有数据类型的区分。</li><li>存储数据量极小。</li><li>没有安全访问限制。</li><li>没有备份、恢复机制。 </li></ul><h2 id="二、数据库"><a href="#二、数据库" class="headerlink" title="二、数据库"></a>二、数据库</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p> 数据库是按照数据接口来<strong>组织</strong>、<strong>存储和管理数据的仓库</strong>。是一个长期存储在计算机内的、有组织的、有共享的、统一管理的数据集合。</p><h3 id="2-2-数据库的分类"><a href="#2-2-数据库的分类" class="headerlink" title="2.2 数据库的分类"></a>2.2 数据库的分类</h3><ul><li>网状结构数据库：美国通用电气公司IDS（Integrated Data Store），以节点形式存储和访问。</li><li>层次结构数据库：IBM公司IMS（Information Management System）定向有序的树状结构实现存储和访问。</li><li>关系结构数据库：Oracle、DB2、MySQL、SQL Server，以表格（Table）存储，多表间建立关联关系，通过分类、合并、连接、选取等运算实现访问。</li><li>非关系型数据库：ElastecSearch、MongoDB、Redis，多数使用哈希表，表中以键值（key-value）的方式实现特定的键和一个指针指向的特定数据。</li></ul><h2 id="三、数据库管理系统"><a href="#三、数据库管理系统" class="headerlink" title="三、数据库管理系统"></a>三、数据库管理系统</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><blockquote><p> <strong>数据库管理系统</strong>（DataBase Management System，DBMS）：指一种操作和管理数据库的大型软件，用于建立、使用、和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中的数据。</p></blockquote><h3 id="3-2-常见数据库管理系统"><a href="#3-2-常见数据库管理系统" class="headerlink" title="3.2 常见数据库管理系统"></a>3.2 常见数据库管理系统</h3><ul><li>Oracle：被认为是业界目前比较成功的关系型数据库管理系统。Oracle数据库可以运行在UNIX、Windows等主流操作平台，完全支持所有的工业标准，并获得最高级别的ISO标准安全性认证。</li><li>DB2：IBM公司的产品，DB2数据库采用多进程多线索体系结构，其功能足以满足大中公司的需求，并可灵活地服务于中小型电子商务解决方案。</li><li>SQL Server： Microsoft公司退出的关系型数据库管理系统。具有使用方便可伸缩性好与相关软件集成程度高等优点。</li><li>SQLLite：应用在手机端的数据库。</li></ul><h2 id="四、MySQL"><a href="#四、MySQL" class="headerlink" title="四、MySQL"></a>四、MySQL</h2><h3 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h3><blockquote><p> MySQL是一个<strong>关系型数据库管理系统</strong>，由瑞典MySQL AB公司开发，属于Oracle旗下产品。MySQL是最流行的关系型数据库管理系统之一，在WEB应用方面，MySQL是最好RDBM（Relational Database Management System，关系型数据库管理系统）应用软件之一。</p></blockquote><h3 id="4-2-访问与下载"><a href="#4-2-访问与下载" class="headerlink" title="4.2 访问与下载"></a>4.2 访问与下载</h3><p>官网地址： <a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p><p>下载地址： <a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><p>mysql安装过程请查看<a href="https://blog.csdn.net/weixin_45333934/article/details/105065704" target="_blank" rel="noopener">mysql安装指南</a>。</p><h3 id="4-3-卸载"><a href="#4-3-卸载" class="headerlink" title="4.3 卸载"></a>4.3 卸载</h3><ul><li>控制台卸载。</li><li>找到mysql的安装目录进行删除。</li><li>programdata删除mysql。</li></ul><blockquote><ul><li>如果卸载后，有未删除的MySQL服务，可采用手动删除。</li><li>以管理员身份打开命令行，输入<code>sc delete MySQL57</code>，回车。</li></ul></blockquote><p>如果某个MySQL组件无法删除，可以尝试从注册表搜索信息删除相关文件夹。具体可百度。</p><h3 id="4-4-配置环境变量"><a href="#4-4-配置环境变量" class="headerlink" title="4.4 配置环境变量"></a>4.4 配置环境变量</h3><p><strong>Windows</strong></p><ul><li>创建MYSQL_HOME: <code>C:\Program Files\MySQL\MySQL Server5.7</code></li><li>追加PATH: <code>%MYSQL_HOME%\bin;</code></li></ul><h3 id="4-5-MySQL目录结构"><a href="#4-5-MySQL目录结构" class="headerlink" title="4.5 MySQL目录结构"></a>4.5 MySQL目录结构</h3><p>核心文件介绍：</p><table><thead><tr><th>文件夹名称</th><th>内容</th></tr></thead><tbody><tr><td>bin</td><td>命令文件</td></tr><tr><td>lib</td><td>库文件</td></tr><tr><td>include</td><td>头文件</td></tr><tr><td>Share</td><td>字符集、语言等信息</td></tr></tbody></table><h3 id="4-6-MySQL配置文件"><a href="#4-6-MySQL配置文件" class="headerlink" title="4.6 MySQL配置文件"></a>4.6 MySQL配置文件</h3><blockquote><p> 在MySQL安装目录中找到my.ini文件，并打开my.ini文件查看几个常用配置参数。</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>default-character-set</td><td>客户端默认字符集</td></tr><tr><td>character-set-server</td><td>服务器端默认字符集</td></tr><tr><td>port</td><td>客户端和服务器端的端口号</td></tr><tr><td>default-storage-engine</td><td>MySQL默认存储引擎INNODB</td></tr></tbody></table><p>通过安装程序安装的MySQL配置文件在C盘的隐藏文件ProgramData中，点进去找到对应的MYSQL目录就能看到my.ini文件了。</p><p>客户端默认字符集和服务器端默认字符集必须保持一致，它们在初始的配置文件中都是被注释掉的，那么默认的字符集会跟随你的系统默认字符集。</p><h2 id="五、SQL语言"><a href="#五、SQL语言" class="headerlink" title="五、SQL语言"></a>五、SQL语言</h2><h3 id="5-1概念"><a href="#5-1概念" class="headerlink" title="5.1概念"></a>5.1概念</h3><blockquote><p>SQL (Structured Query Language)结构化查询语言，用于存取数据、更新、查询和管理关系数据库系统的程序设计语言。</p></blockquote><ul><li>经验:通常执行对数据库的“增删改查”，简称c (create) R (Read) u (Update) D (Delete)。</li></ul><h3 id="5-2-MySql应用"><a href="#5-2-MySql应用" class="headerlink" title="5.2  MySql应用"></a>5.2  MySql应用</h3><blockquote><p>对于数据库的操作，需要在进入MySQL环境下进行指令输入，并在一句指令的末尾使用;结束</p></blockquote><h3 id="5-3基本命令"><a href="#5-3基本命令" class="headerlink" title="5.3基本命令"></a>5.3基本命令</h3><blockquote><p>查看MvSqL中所有数据库</p></blockquote><p><code>mysqls SHOW DATABASES;#显示当前MySQL中包含的所有数据库</code></p><table><thead><tr><th>数据库名称</th><th>作用</th></tr></thead><tbody><tr><td>information_schema</td><td>信息数据库</td></tr><tr><td>mysql</td><td>核心数据库</td></tr><tr><td>performance_schema</td><td>性能优化</td></tr><tr><td>sakila</td><td>样板数据库</td></tr><tr><td>sys</td><td>系统数据库</td></tr><tr><td>world</td><td>国家的编号等</td></tr></tbody></table><blockquote><p>创建自定义数据库</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database mydb1; # 创建数据库</span><br><span class="line">create database mydb2 character set gbk; # 编码格式为gbk</span><br><span class="line">create database if not exists mydb4;# 如果mudb4不存在就创建他</span><br></pre></td></tr></tbody></table></figure><blockquote><p>查看数据库创建信息</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> mydb2; <span class="comment"># 查看数据库创建信息</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改数据库</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database mydb2 character set utf8;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>删除数据库</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database mydb1; # 删除数据库</span><br></pre></td></tr></tbody></table></figure><blockquote><p>查看当前使用的数据库</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用数据库</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mydb2;</span><br></pre></td></tr></tbody></table></figure><h2 id="六、客户端工具"><a href="#六、客户端工具" class="headerlink" title="六、客户端工具"></a>六、客户端工具</h2><h3 id="6-1-Navicate"><a href="#6-1-Navicate" class="headerlink" title="6.1 Navicate"></a>6.1 Navicate</h3><blockquote><p>Navicat是一套快速、可靠并价格相宜的数据库管理工具，专为简化数据库的管理及降低系统管理成本而设。它的设计符合数据库管理员、开发人员及中小企业的需要。Navicat 是以直觉化的图形用户界面而建的，让你可以以安全并且简单的方式创建、组织、访问并共用信息。</p></blockquote><h3 id="6-2-SQLyog"><a href="#6-2-SQLyog" class="headerlink" title="6.2 SQLyog"></a>6.2 SQLyog</h3><blockquote><p>MySQL可能是世界上最流行的开源数据库引擎，但是使用基于文本的工具和配置文件可能很难进行管理。SQLyog提供了完整的图形界面，即使初学者也可以轻松使用MySQL的强大功能。其拥有广泛的预定义工具和查询、友好的视觉界面、类似Excel的查询结果编辑界面等优点。</p></blockquote><h2 id="七、数据查询【重点】"><a href="#七、数据查询【重点】" class="headerlink" title="七、数据查询【重点】"></a>七、数据查询【重点】</h2><h3 id="7-1-数据库表的基本结构"><a href="#7-1-数据库表的基本结构" class="headerlink" title="7.1 数据库表的基本结构"></a>7.1 数据库表的基本结构</h3><blockquote><p>关系数据库是以表格(Table)进行数据存储,表格由“行”和“列”组成</p></blockquote><ul><li>经验：执行查询语句返回的结果是一张虚拟表</li></ul><h3 id="7-2-基本查询"><a href="#7-2-基本查询" class="headerlink" title="7.2 基本查询"></a>7.2 基本查询</h3><blockquote><p>语法:SELECT列名FROM表名</p></blockquote><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>SELECT</td><td>指定要查询的列</td></tr><tr><td>FROM</td><td>指定要查询的表</td></tr></tbody></table><h4 id="7-2-1-查询部分列"><a href="#7-2-1-查询部分列" class="headerlink" title="7.2.1 查询部分列"></a>7.2.1 查询部分列</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查询员工表中所有员工的编号】你名字、邮箱</span><br><span class="line">select employee_id fist_name, email</span><br><span class="line">from t_employee</span><br></pre></td></tr></tbody></table></figure><h4 id="7-2-2查询所有列"><a href="#7-2-2查询所有列" class="headerlink" title="7.2.2查询所有列"></a>7.2.2查询所有列</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有列</span><br><span class="line"># 1、使用*的方式</span><br><span class="line">SELECT * FROM t_employees;</span><br><span class="line"># 2、使用列名的方式</span><br><span class="line">SELECT 所有列的列名 FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><ul><li>注意：生产环境下，优先使用列名查询，*的方式需要转换成全列名。效率低，可读性差</li></ul><h4 id="7-2-3-对列中的数据进行运算"><a href="#7-2-3-对列中的数据进行运算" class="headerlink" title="7.2.3 对列中的数据进行运算"></a>7.2.3 对列中的数据进行运算</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询员工的编号、名字、年薪</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY * 12 FROM t_employees</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>算数运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>两列做加法运算</td></tr><tr><td>-</td><td>两列做减法运算</td></tr><tr><td>*</td><td>两列做乘法运算</td></tr><tr><td>/</td><td>两列做除法运算</td></tr></tbody></table><ul><li>% 是占位符。而并非模运算符</li></ul><h4 id="7-2-4-列的别名"><a href="#7-2-4-列的别名" class="headerlink" title="7.2.4 列的别名"></a>7.2.4 列的别名</h4><blockquote><p>列 as 列名</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT EMPLOYEE_ID '编号',FIRST_NAME AS '姓氏',SALARY * 12 AS '年薪' FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-2-5-查询结果去重"><a href="#7-2-5-查询结果去重" class="headerlink" title="7.2.5 查询结果去重"></a>7.2.5 查询结果去重</h4><blockquote><p>distinct 列名</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询员工表中有多少个经理</span><br><span class="line">SELECT DISTINCT MANAGER_ID FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><h3 id="7-3-排序查询"><a href="#7-3-排序查询" class="headerlink" title="7.3  排序查询"></a>7.3  排序查询</h3><blockquote><p>语法:SELECT 列名 FROM 表名 <code>ORDER BY排序列[排序规则]</code></p></blockquote><table><thead><tr><th>排序规则</th><th>描述</th></tr></thead><tbody><tr><td>ASC</td><td>对前面排序列做升序排列</td></tr><tr><td>desc</td><td>对前面排序列做降序排序</td></tr></tbody></table><h4 id="7-3-1-依据单列排序"><a href="#7-3-1-依据单列排序" class="headerlink" title="7.3.1  依据单列排序"></a>7.3.1  依据单列排序</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 对员工工资进行升序排序</span><br><span class="line">SELECT EMPLOYEE_ID,salary FROM t_employees ORDER BY salary + 0 ASC;</span><br><span class="line"># 对员工工资进行降序排序</span><br><span class="line">SELECT EMPLOYEE_ID,salary FROM t_employees ORDER BY salary + 0 DESC;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-3-2-依据多列排序"><a href="#7-3-2-依据多列排序" class="headerlink" title="7.3.2  依据多列排序"></a>7.3.2  依据多列排序</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 按照工资高低进行降序排序，如果工资相等，按照员工编号升序进行排序</span><br><span class="line">SELECT EMPLOYEE_ID,salary FROM t_employees ORDER BY salary + 0 DESC, EMPLOYEE_ID DESC;</span><br></pre></td></tr></tbody></table></figure><h3 id="7-4-条件查询"><a href="#7-4-条件查询" class="headerlink" title="7.4  条件查询"></a>7.4  条件查询</h3><blockquote><p>语法:  SELECT 列名 FROM 表名 WHERE  条件</p></blockquote><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>where 条件</td><td>在查询结果中，筛选符合查询条件的查询结果，条件为布尔表达式</td></tr></tbody></table><h4 id="7-4-1-等值判断"><a href="#7-4-1-等值判断" class="headerlink" title="7.4.1  等值判断"></a>7.4.1  等值判断</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询符合条件的数据</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY = 11000</span><br><span class="line"></span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY = 24000</span><br></pre></td></tr></tbody></table></figure><ul><li>注意：与java不同（==），mysql中等值判断使用=</li></ul><h4 id="7-4-2-逻辑判断（and-、or、-not）"><a href="#7-4-2-逻辑判断（and-、or、-not）" class="headerlink" title="7.4.2  逻辑判断（and 、or、 not）"></a>7.4.2  逻辑判断（and 、or、 not）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY = 11000 AND COMMISSION_PCT = 0.30 AND EMPLOYEE_ID = '148';</span><br><span class="line"></span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY = 11000 OR COMMISSION_PCT = 0.30;</span><br><span class="line"></span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE NOT SALARY = 11000;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-4-3-不等值判断（-gt-、-lt-、-gt-、-lt-、-lt-gt-、-）"><a href="#7-4-3-不等值判断（-gt-、-lt-、-gt-、-lt-、-lt-gt-、-）" class="headerlink" title="7.4.3  不等值判断（>、 <、>=、<=、<>、!=）"></a>7.4.3  不等值判断（&gt;、 &lt;、&gt;=、&lt;=、&lt;&gt;、!=）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY != 11000;</span><br><span class="line"></span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY &lt;&gt; 11000;</span><br><span class="line"></span><br><span class="line"># 查询工资区间在[6000, 10000]之间</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY &gt;= 6000 AND salary &lt;= 10000;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-4-4-区间判断-between-起始and-终止"><a href="#7-4-4-区间判断-between-起始and-终止" class="headerlink" title="7.4.4  区间判断(between 起始and 终止)"></a>7.4.4  区间判断(between 起始and 终止)</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询工资区间在[6000, 10000]之间</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY BETWEEN 6000 AND 10000;</span><br></pre></td></tr></tbody></table></figure><ul><li>注意：在区间判断中，小值在前，大值在后，反之，得不到结果</li></ul><h4 id="7-4-5-null值判断（is-null、is-not-null）"><a href="#7-4-5-null值判断（is-null、is-not-null）" class="headerlink" title="7.4.5 null值判断（is null、is not null）"></a>7.4.5 null值判断（is null、is not null）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询出经理编号为null的员工信息</span><br><span class="line">SELECT employee_id, FIRST_NAME,MANAGER_ID</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE MANAGER_ID IS NULL;</span><br><span class="line"></span><br><span class="line">SELECT employee_id, FIRST_NAME,MANAGER_ID</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE MANAGER_ID IS NOT NULL;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-4-6-枚举查询（IN（值1，-值2，值3））"><a href="#7-4-6-枚举查询（IN（值1，-值2，值3））" class="headerlink" title="7.4.6  枚举查询（IN（值1， 值2，值3））"></a>7.4.6  枚举查询（IN（值1， 值2，值3））</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查询部门编号为70,80,90 的员工信息</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,SALARY,department_id</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE department_id = 70 OR department_id = 80 OR department_id = 90;</span><br><span class="line"></span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,SALARY,department_id</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE department_id IN (70,80,90);</span><br><span class="line"># in 的效率在大数据面前较低</span><br></pre></td></tr></tbody></table></figure><h4 id="7-4-7-模糊查询"><a href="#7-4-7-模糊查询" class="headerlink" title="7.4.7  模糊查询"></a>7.4.7  模糊查询</h4><blockquote><ul><li>LIKE_（单个任由字符）</li></ul><p>​       列名 LIKE ‘张__’</p><ul><li><p>LIKE %(任意长度的任意字符)</p><p>列名 LIKE ‘张%’</p></li></ul></blockquote><ul><li>注意：模糊查询只能和LIKE关键字结合使用</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询L开头的三个字的员工信息</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME, SALARY</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE FIRST_NAME LIKE 'L__';</span><br><span class="line"># 查询所有以L开头的员工信息</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE first_name LIKE '张%';</span><br></pre></td></tr></tbody></table></figure><h4 id="7-4-8-分支结构查询"><a href="#7-4-8-分支结构查询" class="headerlink" title="7.4.8 分支结构查询"></a>7.4.8 分支结构查询</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line">    WHEN 条件1 THEN 结果1</span><br><span class="line">    WHEN 条件2 THEN 结果2</span><br><span class="line">    WHEN 条件3 THEN 结果3</span><br><span class="line">    ELSE 结果</span><br><span class="line">END</span><br></pre></td></tr></tbody></table></figure><ul><li>注意：通过使用case  end进行条件判断，每条数据对应生成一个值</li><li>经验：类似java中的switch</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查询员工信息</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME, SALARY,department_id,</span><br><span class="line">CASE</span><br><span class="line">WHEN SALARY &gt;= 10000 THEN 'A'</span><br><span class="line">WHEN SALARY &gt;= 8000 AND SALARY &lt; 10000 THEN 'B'</span><br><span class="line">WHEN SALARY &gt;= 6000 AND SALARY &lt; 8000 THEN 'C'</span><br><span class="line">WHEN SALARY &gt;= 4000 AND SALARY &lt; 6000 THEN 'D'</span><br><span class="line">ELSE 'E'</span><br><span class="line">END AS "level"</span><br><span class="line">FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><h3 id="7-5-时间查询"><a href="#7-5-时间查询" class="headerlink" title="7.5  时间查询"></a>7.5  时间查询</h3><blockquote><p>select     时间函数（[参数列表]）</p></blockquote><ul><li>经验：执行时间函数查询，会自动生成一张虚表</li></ul><table><thead><tr><th>时间函数</th><th>描述</th></tr></thead><tbody><tr><td>SYSDATE</td><td>当前系统时间（日月年时分秒）</td></tr><tr><td>CURDATE</td><td>获取当前日期</td></tr><tr><td>CURTIME</td><td>获取当前时间</td></tr><tr><td>WEEK(DATE)</td><td>获取指定日期为一年中的第几周</td></tr><tr><td>YEAR(DATE)</td><td>获取指定日期的年份</td></tr><tr><td>HOUR(TIME)</td><td>获取指定时间的小时值</td></tr><tr><td>MINUTE(TIME)</td><td>获取时间的分钟值</td></tr><tr><td>DATEDIFF(DATE,DATE2)</td><td>获取DATE1和DATE2之间相隔的天数</td></tr><tr><td>ADDDATE(DATE,N)</td><td>计算DATE加上N天后的日期</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 当前系统的时间</span><br><span class="line">SELECT SYSDATE();</span><br><span class="line"># 当前系统的ri期</span><br><span class="line">SELECT CURDATE();</span><br><span class="line"># 获取系统时间</span><br><span class="line">SELECT CURTIME();</span><br><span class="line"># 获取指定日期为一年中的第几周</span><br><span class="line">SELECT WEEK(SYSDATE());</span><br><span class="line"># 获取指定日期忠厚的年份</span><br><span class="line">SELECT YEAR(SYSDATE());</span><br><span class="line"># 获取小时值</span><br><span class="line">SELECT HOUR(CURTIME());</span><br><span class="line"># 获取分钟值</span><br><span class="line">SELECT MINUTE(CURTIME());</span><br><span class="line"># 指定日期之间的相隔天数</span><br><span class="line">SELECT DATEDIFF('2020-4-1','2019-4-1');</span><br><span class="line"># 计算date日期加上n天后的日期</span><br><span class="line">SELECTADDDATE('2020-4-1', 5);</span><br></pre></td></tr></tbody></table></figure><h3 id="7-6-字符串查询"><a href="#7-6-字符串查询" class="headerlink" title="7.6  字符串查询"></a>7.6  字符串查询</h3><blockquote><p>语法:    SELECT    字符串函数([参数列表])</p></blockquote><table><thead><tr><th>字符串函数</th><th>说明</th></tr></thead><tbody><tr><td>concat(str1, …)</td><td>将多个字符串拼接</td></tr><tr><td>insert(str, pos, len, newStr)</td><td>将str中指定pos位置开始len长度的内容替换为newStr</td></tr><tr><td>lower(str)</td><td>将指定字符串转换诶小写</td></tr><tr><td>upper(str)</td><td>将指定字符串转换为大写</td></tr><tr><td>substring(str, num, len)</td><td>将str字符串指定num位置开始截取len个内容</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 多个字符串拼接</span><br><span class="line">SELECT CONCAT('My', 'S,', 'QAL');</span><br><span class="line">SELECT CONCAT(FIRST_NAME,'-', last_name) FROM t_employees;</span><br><span class="line"># 字符串替换</span><br><span class="line">SELECT INSERT('这是一个数据库',3, 2, 'MySql')</span><br><span class="line"># 字符串转小写</span><br><span class="line">SELECT LOWER('LOWER')</span><br><span class="line"># 字符串转大写</span><br><span class="line">SELECT UPPER('shdiuashdui')</span><br><span class="line"># 指定内容截取</span><br><span class="line">SELECT SUBSTRING('JaavaMySqlStrSub',6,6);</span><br><span class="line"># MySqlS</span><br></pre></td></tr></tbody></table></figure><h3 id="7-7-聚合函数"><a href="#7-7-聚合函数" class="headerlink" title="7.7  聚合函数"></a>7.7  聚合函数</h3><blockquote><p>语法:    SELECT 聚合函数(列名)      FROM    表名;</p></blockquote><ul><li>经验：对多条数据的单列进行统计，返回统计后的一行结果</li></ul><table><thead><tr><th>聚合函数</th><th>说明</th></tr></thead><tbody><tr><td>SUM（）</td><td>求所有行中单列结果的总和</td></tr><tr><td>AVG()</td><td>平均值</td></tr><tr><td>MAX()</td><td>最大值</td></tr><tr><td>MIN()</td><td>最小值</td></tr><tr><td>COUNT()</td><td>求总行数</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 聚合函数</span><br><span class="line"># 求单列所有数据的和</span><br><span class="line">SELECT SUM(SALARY) FROM t_employees;</span><br><span class="line"># 求单列所有数据的平均值</span><br><span class="line">SELECT AVG(SALARY) FROM t_employees;</span><br><span class="line"># 求单列最大值</span><br><span class="line">SELECT MAX(SALARY + 0) FROM t_employees;</span><br><span class="line"># 求单列最小值</span><br><span class="line">SELECT MIN(salary + 0) FROM t_employees;</span><br><span class="line"># 求总行数 员工总数</span><br><span class="line">SELECT COUNT(EMPLOYEE_ID) FROM t_employees;</span><br><span class="line"># 统计有提成的人数 会自动忽略null值，不进行统计</span><br><span class="line">SELECT COUNT(COMMISSION_PCT) FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><ul><li>注意：聚合函数会自动忽略null值，不进行统计</li></ul><h3 id="7-8-分组查询"><a href="#7-8-分组查询" class="headerlink" title="7.8  分组查询"></a>7.8  分组查询</h3><blockquote><p>语法：<code>SELECT 列名 FROM 表名 WHERE 条件 GROUP BY 分组依据(列);</code></p></blockquote><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>GROUP BY</td><td>分组依据，必须在WHERE之后生效</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 查询各个部门的额总人数</span><br><span class="line">SELECT department_id, COUNT(employee_id)</span><br><span class="line">FROM t_employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"># 查询各个部门的平局工资</span><br><span class="line">SELECT department_id, AVG(salary)</span><br><span class="line">FROM t_employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"># 查询各个部门、各个岗位的总人数</span><br><span class="line">SELECT department_id,job_id, COUNT(employee_id)</span><br><span class="line">FROM t_employees</span><br><span class="line">GROUP BY department_id, job_id;</span><br><span class="line"># 常见问题：查询各个部门id，总人数、first_name</span><br><span class="line">SELECT department_id,COUNT(employee_id), first_name</span><br><span class="line">FROM t_employees</span><br><span class="line">GROUP BY department_id;</span><br></pre></td></tr></tbody></table></figure><ul><li>分组查询中，select显示的列只能是分组依据列，或者聚合函数列，不能出现其他列</li></ul><h3 id="7-9-分组过滤查询"><a href="#7-9-分组过滤查询" class="headerlink" title="7.9  分组过滤查询"></a>7.9  分组过滤查询</h3><blockquote><p>语法：<code>SELECT 列名 FROM 表名 WHERE 条件 GROUNP BY 分组列 HAVING 过滤规则</code></p></blockquote><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>HAVING过滤规则</td><td>过滤规则定义对分组后的数据进行过滤</td></tr></tbody></table><p>统计部门的最高工资</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#思路</span><br><span class="line">#1.确定分组依据（DEPARTMENT_ID）</span><br><span class="line">#2.对分组后的数据，过滤出部门编号是60、70、90信息</span><br><span class="line">#3.MAX()函数</span><br><span class="line">SELECT DEPARTMENT_ID,MAX(SALARY) </span><br><span class="line">FROM t_employees GROUP BY DEPARTMENT_ID </span><br><span class="line">HAVING DEPARTMENT_ID IN (60,70,90);</span><br><span class="line">#GROUP确定分组依据DEPARTMENT_ID</span><br><span class="line">#HAVING过滤出60，70，90的部门</span><br><span class="line">#SELECT查看部门编号和MAX函数</span><br></pre></td></tr></tbody></table></figure><h3 id="7-10-限定查询"><a href="#7-10-限定查询" class="headerlink" title="7.10  限定查询"></a>7.10  限定查询</h3><blockquote><p> <strong>语法</strong>：<code>SELECT 列名 FROM 表名 LIMIT 起始行,查询行数</code></p></blockquote><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>LIMIT offset_start,row_count</td><td>限定查询结果的起始行和总行数</td></tr></tbody></table><h4 id="7-10-1-查询前5行记录"><a href="#7-10-1-查询前5行记录" class="headerlink" title="7.10.1 查询前5行记录"></a>7.10.1 查询前5行记录</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询表中前五名员工的所有信息</span><br><span class="line">SELECT * FROM t_employees LIMIT 0,5;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>起始行是从0开始</strong>，<strong>代表了第一行</strong>，<strong>第二个参数代表的是从指定行开始查询几行</strong>。</li></ul><h4 id="7-10-2-查询范围记录"><a href="#7-10-2-查询范围记录" class="headerlink" title="7.10.2 查询范围记录"></a>7.10.2 查询范围记录</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询表中从第四行开始，查询10行</span><br><span class="line">SELECT * FROM t_employees LIMIT 3,10;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-10-3-LIMIT典型应用"><a href="#7-10-3-LIMIT典型应用" class="headerlink" title="7.10.3 LIMIT典型应用"></a>7.10.3 LIMIT典型应用</h4><p>分页查询：一页显示10条，一共查询三页。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#思路：第一页是从0开始，显示10条</span><br><span class="line">SELECT * FROM t_employees LIMIT 0,10;</span><br><span class="line">#第二页是从10条开始，显示10条</span><br><span class="line">SELECT * FROM t_employees LIMIT 10,10;</span><br><span class="line">#第三页是从20条开始，显示10条</span><br><span class="line">SELECT * FROM t_employees LIMIT 20,10;</span><br></pre></td></tr></tbody></table></figure><ul><li>在分页应用场景中，起始行是变化的，但是一页显示的页数是不变的</li></ul><h3 id="7-11-查询总结"><a href="#7-11-查询总结" class="headerlink" title="7.11  查询总结"></a>7.11  查询总结</h3><h4 id="7-11-1-SQL语句编写顺序"><a href="#7-11-1-SQL语句编写顺序" class="headerlink" title="7.11.1 SQL语句编写顺序"></a>7.11.1 SQL语句编写顺序</h4><blockquote><p>COPYSELECT 列名 FROM 表名 WHERE 条件 GROUP BY 分组 HAVING 过滤条件 ORDER BY 排序列(ASC|DESC) LIMIT 起始行,查询行数</p></blockquote><h4 id="7-11-2-SQL语句执行顺序"><a href="#7-11-2-SQL语句执行顺序" class="headerlink" title="7.11.2 SQL语句执行顺序"></a>7.11.2 SQL语句执行顺序</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">COPY1.FROM:指定数据来源表</span><br><span class="line">2.WHERE:对查询数据第一次过滤</span><br><span class="line">3.GROUP BY:分组</span><br><span class="line">4.HAVING:对分组后的数据第二次过滤</span><br><span class="line">5.SELECT:查询各字段的值</span><br><span class="line">6.ORDER BY:排序</span><br><span class="line">7.LIMIT:限定查询结果</span><br></pre></td></tr></tbody></table></figure><h3 id="7-12-子查询（作为条件判断）"><a href="#7-12-子查询（作为条件判断）" class="headerlink" title="7.12  子查询（作为条件判断）"></a>7.12  子查询（作为条件判断）</h3><blockquote><p><strong>语法</strong>：<code>SELECT 列名 FROM 表名 WHERE 条件(子查询结果)</code></p></blockquote><h4 id="7-12-1-查询工资大于Bruce的员工信息"><a href="#7-12-1-查询工资大于Bruce的员工信息" class="headerlink" title="7.12.1 查询工资大于Bruce的员工信息"></a>7.12.1 查询工资大于Bruce的员工信息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#1.先查询到Bruce的工资（一行一列）</span><br><span class="line">SELECT SALARY FROM t_employees WHERE FIRST_NAME = 'Bruce';</span><br><span class="line">#2.查询工资大于Bruce的员工信息</span><br><span class="line">SELECT * FROM t_employees WHERE SALARY &gt; 6000;</span><br><span class="line">#3.将前两句整合</span><br><span class="line">SELECT * FROM t_employees </span><br><span class="line">WHERE SALARY &gt; </span><br><span class="line">(SELECT SALARY FROM t_employees WHERE FIRST_NAME = 'Bruce');</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>将子查询</strong>“<strong>一行一列</strong>”<strong>的结果作为外部查询的条件</strong>，<strong>做第二次查询</strong>。</li><li><strong>子查询得到一行一列的结果才能作为外部查询的等值判断条件或不等值判断条件</strong></li></ul><h3 id="7-13-子查询（作为枚举查询的条件）"><a href="#7-13-子查询（作为枚举查询的条件）" class="headerlink" title="7.13 子查询（作为枚举查询的条件）"></a>7.13 子查询（作为枚举查询的条件）</h3><blockquote><p> <strong>语法</strong>：<code>SELECT 列名 FROM 表名 WHERE 列名 IN (子查询结果);</code></p></blockquote><h4 id="7-13-1-查询与名为“KING”同一部门的员工信息"><a href="#7-13-1-查询与名为“KING”同一部门的员工信息" class="headerlink" title="7.13.1 查询与名为“KING”同一部门的员工信息"></a>7.13.1 查询与名为“KING”同一部门的员工信息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#思路</span><br><span class="line">#1.先查询KING所在的部门编号</span><br><span class="line">SELECT DEPARTMENT_ID FROM t_employees WHERE LAST_NAME = 'King';#80,90</span><br><span class="line">#2.再查询80，90号部门的员工信息</span><br><span class="line">SELECT * FROM t_employees WHERE DEPARTMENT_ID IN(80,90);</span><br><span class="line">#3.SQL:合并</span><br><span class="line">SELECT * FROM t_employees </span><br><span class="line">WHERE DEPARTMENT_ID IN</span><br><span class="line">(SELECT DEPARTMENT_ID FROM t_employees WHERE LAST_NAME = 'King');</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>将子查询</strong>“<strong>多行一列</strong>”<strong>的结果作为外部查询的枚举查询条件</strong>，<strong>做第二次查询</strong>。</li></ul><h4 id="7-13-2-工资高于60编号部门的员工信息"><a href="#7-13-2-工资高于60编号部门的员工信息" class="headerlink" title="7.13.2 工资高于60编号部门的员工信息"></a>7.13.2 工资高于60编号部门的员工信息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#1.查询60编号部门所有人的工资（多行单列）</span><br><span class="line">SELECT SALARY FROM t_employees WHERE DEPARTMENT_ID = 60;</span><br><span class="line">#2.查询工资高于60编号部门所有人的工资的员工信息（高于所有）</span><br><span class="line">SELECT * FROM t_employees </span><br><span class="line">WHERE SALARY &gt; </span><br><span class="line">ALL(SELECT SALARY FROM t_employees WHERE DEPARTMENT_ID = 60);</span><br><span class="line">#3.查询工资高于60编号部门的员工信息（高于部分）</span><br><span class="line">SELECT * FROM t_employees </span><br><span class="line">WHERE SALARY &gt; </span><br><span class="line">ANY(SELECT SALARY FROM t_employees WHERE DEPARTMENT_ID = 60);</span><br></pre></td></tr></tbody></table></figure><ul><li><p><strong>注意</strong>：<strong>当子查询结果集形式为多行单列时可以使用ANY或ALL关键字</strong>。</p></li><li><p>ALL表示查询高于部门所有员工工资的员工信息；ANY表示查询只需要高于部门中任意一名员工工资的员工信息</p></li></ul><h3 id="7-14-子查询（作为一张表）"><a href="#7-14-子查询（作为一张表）" class="headerlink" title="7.14  子查询（作为一张表）"></a>7.14  子查询（作为一张表）</h3><p>查询到一张多行多列的临时表，这张表也可以作为查询数据源。</p><blockquote><p> <strong>语法</strong>：<code>SELECT 列名 FROM (子查询的结果集) WHERE 条件;</code></p></blockquote><h4 id="7-14-1-查询员工表中工资排名前5名的员工信息"><a href="#7-14-1-查询员工表中工资排名前5名的员工信息" class="headerlink" title="7.14.1 查询员工表中工资排名前5名的员工信息"></a>7.14.1 查询员工表中工资排名前5名的员工信息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#思路：</span><br><span class="line">#1.先对所有员工的薪资进行排序（排序后的临时表）</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY FROM t_employees ORDER BY SALARY DESC;</span><br><span class="line">#2.再查询临时表中前5行员工信息</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY FROM (临时表) LIMIT 0,5;</span><br><span class="line">#3.合并</span><br><span class="line">SELECT * FROM </span><br><span class="line">(SELECT EMPLOYEE_ID,FIRST_NAME,SALARY FROM t_employees ORDER BY SALARY DESC) AS 临时表 LIMIT 0,5;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>将子查询</strong>“<strong>多行多列</strong>“<strong>的结果作为外部查询的一张表</strong>，<strong>做第二次查询</strong>。</li><li><strong>注意</strong>：<strong>子查询作为临时表</strong>，<strong>需要为其赋予一个临时表名</strong>。</li></ul><h3 id="7-15-合并查询"><a href="#7-15-合并查询" class="headerlink" title="7.15  合并查询"></a>7.15  合并查询</h3><blockquote><ul><li><code>SELECT * FROM 表名1 UNION SELECT * FROM 表名2</code></li><li><code>SELECT * FROM 表名1 UNION ALL SELECT * FROM 表名2</code></li></ul></blockquote><ul><li>返回的查询结果是将表1的结果和表2的结果做了一个合并。</li></ul><h4 id="15-1-合并两张表的结果（去除重复记录）"><a href="#15-1-合并两张表的结果（去除重复记录）" class="headerlink" title="15.1 合并两张表的结果（去除重复记录）"></a>15.1 合并两张表的结果（去除重复记录）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#合并两张表的结果，去除重复记录</span><br><span class="line">SELECT * FROM T1 UNION SELECT * FROM T2;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>合并结果的两张表</strong>，<strong>列数必须相同</strong>，<strong>列的数据类型可以不同</strong>。</li></ul><p>列数必须相同是因为该合并做了一个纵向合并，两个4列多行的结果集表合并后也是一个4列多行的表，但是合并后的列名以第一个结果集表为准。</p><h4 id="7-15-2-合并两张表的结果（保留重复记录）"><a href="#7-15-2-合并两张表的结果（保留重复记录）" class="headerlink" title="7.15.2 合并两张表的结果（保留重复记录）"></a>7.15.2 合并两张表的结果（保留重复记录）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#合并两张表的结果，不去除重复记录（显示所有）</span><br><span class="line">SELECT * FROM T1 UNION ALL SELECT * FROM T2;</span><br></pre></td></tr></tbody></table></figure><p>该合并结果会保留两张查询表中重复的记录，而UNION只保留第一个不重复的记录</p><p>7.16 表连接查询</p><blockquote><p>语法：<code>SELECT 列名 FROM 表1 连接方式 表2 ON 连接条件</code></p></blockquote><h4 id="7-16-1-内连接查询（INNER-JOIN-ON）"><a href="#7-16-1-内连接查询（INNER-JOIN-ON）" class="headerlink" title="7.16.1 内连接查询（INNER JOIN ON）"></a>7.16.1 内连接查询（INNER JOIN ON）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#1.查询所有员工的职员和职位信息 SQL标准</span><br><span class="line">SELECT * FROM t_employees INNER JOIN t_jobs </span><br><span class="line">ON t_employees.JOB_ID = t_jobs.JOB_ID;</span><br><span class="line">#2.查询所有员工的职员和职位信息 MYSQL</span><br><span class="line">SELECT * FROM t_employees,t_jobs WHERE t_employees.JOB_ID = t_jobs.JOB_ID;</span><br></pre></td></tr></tbody></table></figure><p>如果没有指定连接条件，则会造成笛卡尔积的结果，第一张表中的每行数据都会和第二张表进行连接。</p><ul><li><strong>经验</strong>：<strong>在MySQL中</strong>，<strong>第二种方式也可以作为内连接查询</strong>，<strong>但是不符合SQL标准</strong>。</li><li><strong>而第一种属于SQL标准</strong>，<strong>与其他关系型数据库通用</strong>。</li></ul><h4 id="7-16-2-三表连接查询"><a href="#7-16-2-三表连接查询" class="headerlink" title="7.16.2 三表连接查询"></a>7.16.2 三表连接查询</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#查询所有员工工号、名字、部门名称、部门所在国家ID</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,t_departments.DEPARTMENT_NAME,t_locations.COUNTRY_ID </span><br><span class="line">FROM t_employees</span><br><span class="line">INNER JOIN t_departments ON</span><br><span class="line">t_employees.DEPARTMENT_ID=t_departments.DEPARTMENT_ID</span><br><span class="line">INNER JOIN t_locations ON</span><br><span class="line">t_departments.LOCATION_ID=t_locations.LOCATION_ID;</span><br></pre></td></tr></tbody></table></figure><p>该语句查询出来的结果没有员工编号为178的员工信息，该名员工的部门ID为NULL，不符合连接条件，所以不包含在匹配出的结果集中，你可以自己动手尝试并查看结果。之所以提这个是因为可以与下节的语句区分开来。</p><h4 id="7-16-3-左外连接（LEFT-JOIN-ON）"><a href="#7-16-3-左外连接（LEFT-JOIN-ON）" class="headerlink" title="7.16.3 左外连接（LEFT JOIN ON）"></a>7.16.3 左外连接（LEFT JOIN ON）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查询所有员工的工号、名字、工资及其对应的部门名称（没有部门的员工也在查询结果中，部门名称以NULL值补充）</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,DEPARTMENT_NAME </span><br><span class="line">FROM t_employees</span><br><span class="line">LEFT JOIN t_departments </span><br><span class="line">ON t_departments.DEPARTMENT_ID=t_employees.DEPARTMENT_ID;</span><br></pre></td></tr></tbody></table></figure><p>该语句查询出来的结果包含没有部门的178号员工，DEPARTMENT_NAME的值被填充为NULL。</p><ul><li><strong>注意</strong>：<strong>左外连接</strong>，<strong>是以左表作为主表</strong>，<strong>依次向右匹配</strong>，<strong>匹配到则返回结果</strong>；</li><li><strong>匹配不到则返回NULL值填充</strong>。</li></ul><h4 id="7-16-4-右外连接（RIGHT-JOIN-ON）"><a href="#7-16-4-右外连接（RIGHT-JOIN-ON）" class="headerlink" title="7.16.4 右外连接（RIGHT JOIN ON）"></a>7.16.4 右外连接（RIGHT JOIN ON）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查询所有部门信息，以及此部门中的所有员工信息（没有员工的部门也在查询结果中，员工信息以NULL值填充）</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,DEPARTMENT_NAME </span><br><span class="line">FROM t_employees</span><br><span class="line">RIGHT JOIN t_departments </span><br><span class="line">ON t_departments.DEPARTMENT_ID=t_employees.DEPARTMENT_ID;</span><br></pre></td></tr></tbody></table></figure><p>该查询结果以部门表作为主表，有些部门没有员工，其员工信息全部为NULL。</p><ul><li><strong>注意</strong>：<strong>右外连接</strong>，<strong>是以右表为主表</strong>，<strong>依次向左匹配</strong>，<strong>匹配到返回结果</strong>。</li><li><strong>匹配不到</strong>，<strong>则返回NULL值填充</strong>。</li></ul><h2 id="八、DML操作【重点】"><a href="#八、DML操作【重点】" class="headerlink" title="八、DML操作【重点】"></a>八、DML操作【重点】</h2><blockquote><p> DDL（Data Manipulation Language）数据库操纵语言，是其中一类SQL语言，其实也就是<strong>增删改</strong>。</p></blockquote><h3 id="8-1-新增（INSERT）"><a href="#8-1-新增（INSERT）" class="headerlink" title="8.1 新增（INSERT）"></a>8.1 新增（INSERT）</h3><blockquote><p> <strong>语法</strong>：<code>INSERT INTO 表名(列1,列2,列3......) VALUES(值1,值2,值3......);</code></p></blockquote><h4 id="8-1-1-添加一条信息"><a href="#8-1-1-添加一条信息" class="headerlink" title="8.1.1 添加一条信息"></a>8.1.1 添加一条信息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#添加一条岗位信息</span><br><span class="line">INSERT INTO t_jobs(JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) </span><br><span class="line">VALUES('JAVA_LE','Java Lecturer',6000,1200);</span><br><span class="line">#添加一条员工信息</span><br><span class="line">INSERT INTO t_employees(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID)</span><br><span class="line">VALUES('194','Liu','YUNChe','xxx@qq.com','12345','2020-11-14','JAVA_LE','11000','0.6',null,'50');</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>表名后的列名要和VALUE里的值一一对应</strong>（<strong>个数</strong>、<strong>顺序</strong>、<strong>类型</strong>）。</li></ul><h3 id="8-2-修改（UPDATA）"><a href="#8-2-修改（UPDATA）" class="headerlink" title="8.2 修改（UPDATA）"></a>8.2 修改（UPDATA）</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#修改编号为100的员工工资为25000</span><br><span class="line">UPDATE t_employees SET SALARY = 25000 WHERE EMPLOYEE_ID = '100';</span><br><span class="line">#修改编号为100的员工信息岗位编号为 ST_MAN，工资为3500</span><br><span class="line">UPDATE t_employees SET JOB_ID = 'ST_MAN',SALARY = 3500 WHERE EMPLOYEE_ID = '135';</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>SET后多个列名=值</strong>，<strong>绝大多数情况下都要加WHERE条件指定修改</strong>，<strong>否则为整表更新</strong>。</li></ul><h3 id="8-3-删除（DELETE）"><a href="#8-3-删除（DELETE）" class="headerlink" title="8.3 删除（DELETE）"></a>8.3 删除（DELETE）</h3><p>语法：<code>DELETE FROM 表名 WHERE 条件;</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#删除编号为135的员工</span><br><span class="line">DELETE FROM t_employees WHERE EMPLOYEE_ID = '135';</span><br><span class="line">#删除姓Peter,并且名为Hall的员工</span><br><span class="line">DELETE FROM t_employees WHERE EMPLOYEE_ID = '135';</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>删除时</strong>，<strong>如果不加条件</strong>，<strong>则默认删除整张表</strong>。</li></ul><p><font color="cornflowerblue">用DELETE删除整表是不彻底的，它只是删除了内容，并没有改变表的结构。</font></p><h3 id="8-4-清空整表数据（TRUNCATE）"><a href="#8-4-清空整表数据（TRUNCATE）" class="headerlink" title="8.4 清空整表数据（TRUNCATE）"></a>8.4 清空整表数据（TRUNCATE）</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPYTRUNCATE TABLE 表名;</span><br></pre></td></tr></tbody></table></figure><h4 id="8-4-1-清空整张表"><a href="#8-4-1-清空整张表" class="headerlink" title="8.4.1 清空整张表"></a>8.4.1 清空整张表</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY#清空t1整张表</span><br><span class="line">TRUNCATE TABLE t1;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>与DELETE不加WHERE删除整表数据不同</strong>，<strong>TRUNCATE是把原表销毁</strong>，<strong>再按原表的格式创建一张新表</strong>。</li></ul><h2 id="九、数据表操作"><a href="#九、数据表操作" class="headerlink" title="九、数据表操作"></a>九、数据表操作</h2><h3 id="9-1-数据类型"><a href="#9-1-数据类型" class="headerlink" title="9.1 数据类型"></a>9.1 数据类型</h3><blockquote><p> <font color="red">MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串（字符）类型。对于我们约束数据的类型有很大的帮助。</font></p></blockquote><h4 id="9-1-1-数值类型"><a href="#9-1-1-数值类型" class="headerlink" title="9.1.1 数值类型"></a>9.1.1 数值类型</h4><table><thead><tr><th>类型</th><th>大小</th><th>范围（有符号）</th><th>范围（无符号）</th><th>用途</th></tr></thead><tbody><tr><td>INT</td><td>4字节</td><td>(-2147483648,2147483647)</td><td>(0,4294967295)</td><td>大整数值</td></tr><tr><td>DOUBLE</td><td>8字节</td><td>(-1.797E+308,-2.22E-308)</td><td>0,(2.22E-308,1.797E+308)</td><td><code>双精度浮点数值</code></td></tr><tr><td><code>DOUBLE(M,D)</code></td><td>8字节，M表示长度，D表示小数位数</td><td>同上，受M和D的约束；如DOUBLE(5,2) -999.99~999.99</td><td>同上，受M和D的约束</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL(M,D)</td><td>DECIMAL(M,D)</td><td>依赖于M和D的值，M最大值为65</td><td>依赖于M和D的值，M最大值为65</td><td>小数值</td></tr></tbody></table><h4 id="9-1-2-日期类型"><a href="#9-1-2-日期类型" class="headerlink" title="9.1.2 日期类型"></a>9.1.2 日期类型</h4><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td><strong>DATE</strong></td><td>3</td><td>1000-01-01/9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>‘-838:59:59’/‘838:59:59’</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901/2155</td><td>YYYY</td><td>年份值</td></tr><tr><td><strong>DETETIME</strong></td><td>8</td><td>1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td>YYYYMMDD HHMMSS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h4 id="9-1-3-字符串类型"><a href="#9-1-3-字符串类型" class="headerlink" title="9.1.3 字符串类型"></a>9.1.3 字符串类型</h4><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>BLOB（binary large object）</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr></tbody></table><ul><li><font color="orange">CHAR和VARCHAR类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同，CHAR(N)会将多余的存储位以空格补足，而VARCHAR(N)则会根据实际存储长度进行“压缩”。在存储或检索过程中不进行大小写转换。</font></li><li><font color="orange">BLOB是一个二进制大对象，可以容纳可变数量的数据。有4种BLOB类型：TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。它们只是可容纳值的最大长度不同。</font></li></ul><h3 id="9-2-数据表的创建（CREATE）"><a href="#9-2-数据表的创建（CREATE）" class="headerlink" title="9.2 数据表的创建（CREATE）"></a>9.2 数据表的创建（CREATE）</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">    列名 数据类型 [约束],</span><br><span class="line">    列名 数据类型 [约束],</span><br><span class="line">    ......</span><br><span class="line">    列名 数据类型 [约束]#最后一行的末尾不加逗号</span><br><span class="line">)[CHARSET=UTF8]#可根据需要指定表的字符编码集</span><br></pre></td></tr></tbody></table></figure><p>括号内的内容为可选。</p><h4 id="9-2-1-创建表"><a href="#9-2-1-创建表" class="headerlink" title="9.2.1 创建表"></a>9.2.1 创建表</h4><table><thead><tr><th>列名</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>subject_id</td><td>INT</td><td>课程编号</td></tr><tr><td>subject_name</td><td>VARCHAR(20)</td><td>课程时间</td></tr><tr><td>subject_hours</td><td>INT</td><td>课程课长</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#根据上述表格创建数据库，并向表中插入3条测试语句</span><br><span class="line">CREATE TABLE `t_subject` (</span><br><span class="line">  `subject_id` int,</span><br><span class="line">  `subject_name` varchar(20),</span><br><span class="line">  `subject_hours` int(11)</span><br><span class="line">)CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) </span><br><span class="line">VALUES(1,'JAVA',40);</span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) </span><br><span class="line">VALUES(2,'MYSQL',30);</span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) VALUES(3,'JAVASCRIPT',20)</span><br></pre></td></tr></tbody></table></figure><h3 id="9-3-数据表的修改（ALTER）"><a href="#9-3-数据表的修改（ALTER）" class="headerlink" title="9.3 数据表的修改（ALTER）"></a>9.3 数据表的修改（ALTER）</h3><blockquote><p><strong>语法</strong>：<code>ALTER TABLE 表名 操作;</code></p></blockquote><h4 id="9-3-1-向现有表中添加列"><a href="#9-3-1-向现有表中添加列" class="headerlink" title="9.3.1 向现有表中添加列"></a>9.3.1 向现有表中添加列</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在课程表基础上添加grade_id列</span><br><span class="line">ALTER TABLE t_subject ADD grade_id INT;</span><br></pre></td></tr></tbody></table></figure><h4 id="9-3-2-修改表中的列"><a href="#9-3-2-修改表中的列" class="headerlink" title="9.3.2 修改表中的列"></a>9.3.2 修改表中的列</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#修改课程表中的课程名称长度为10个字符</span><br><span class="line">ALTER TABLE t_subject MODIFY subject_name VARCHAR(10);</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>修改表中的某列时</strong>，<strong>也要写全列的名字</strong>，<strong>数据类型</strong>，<strong>约束</strong>。</li></ul><h4 id="9-3-3-删除表中的列"><a href="#9-3-3-删除表中的列" class="headerlink" title="9.3.3 删除表中的列"></a>9.3.3 删除表中的列</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除课程表中grade_id列</span><br><span class="line">ALTER TABLE t_subject DROP grade_id;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>删除列时</strong>，<strong>每次只能删一列</strong>。</li></ul><h4 id="9-3-4-修改列名"><a href="#9-3-4-修改列名" class="headerlink" title="9.3.4 修改列名"></a>9.3.4 修改列名</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#修改课程表中subject_hours列为class_hours</span><br><span class="line">ALTER TABLE t_subject CHANGE subject_hours class_hours INT;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>修改列名时</strong>，<strong>在给定列新名称时</strong>，<strong>要指定列的类型和约束</strong>。</li></ul><h4 id="9-3-5-修改表名"><a href="#9-3-5-修改表名" class="headerlink" title="9.3.5 修改表名"></a>9.3.5 修改表名</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#修改课程表的t_subject为t_sub</span><br><span class="line">ALTER TABLE t_subject RENAME t_sub;</span><br></pre></td></tr></tbody></table></figure><h3 id="9-4-数据表的删除（DROP）"><a href="#9-4-数据表的删除（DROP）" class="headerlink" title="9.4 数据表的删除（DROP）"></a>9.4 数据表的删除（DROP）</h3><blockquote><p> <strong>语法</strong>：<code>DROP TABLE 表名</code></p></blockquote><h4 id="9-4-1-删除课程表"><a href="#9-4-1-删除课程表" class="headerlink" title="9.4.1 删除课程表"></a>9.4.1 删除课程表</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除课程表</span><br><span class="line">DROP TABLE t_sub;</span><br></pre></td></tr></tbody></table></figure><h2 id="十、约束"><a href="#十、约束" class="headerlink" title="十、约束"></a>十、约束</h2><blockquote><p> 问题：在往已创建表中新增数据时，可不可以新增两行相同列的数据？如果可行，会有什么弊端？</p></blockquote><p>这是可以的，但重复的数据不仅会浪费空间，而且对查询结果不利，也是多余的。在实际的存储中应尽量保证每条数据的唯一性。</p><h3 id="10-1-实体完整性约束"><a href="#10-1-实体完整性约束" class="headerlink" title="10.1 实体完整性约束"></a>10.1 实体完整性约束</h3><blockquote><p> 表中的一行数据代表一个实体（entity），实体完整性的作用即是标识每一行数据不重复，实体唯一。</p></blockquote><h4 id="10-1-1-主键约束"><a href="#10-1-1-主键约束" class="headerlink" title="10.1.1 主键约束"></a>10.1.1 主键约束</h4><blockquote><p><strong>关键词</strong>：<code>PRIMARY KEY</code>唯一，标识表中的一行数据，此列的值不可重复，且<strong>不能</strong>为NULL。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#为表中适用主键的列添加主键约束</span><br><span class="line">CREATE TABLE t_subject(</span><br><span class="line">#课程标号标识了每一个课程的编号唯一，且不能为NULL</span><br><span class="line">subject_id INT PRIMARY KEY,</span><br><span class="line">subject_name VARCHAR(20),</span><br><span class="line">subject_hours INT</span><br><span class="line">)CHARSET=utf8;</span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) VALUES(1,'JAVA',40);</span><br><span class="line">#报错，主键subject_id不可重复</span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) VALUES(1,'JAVA',40);</span><br></pre></td></tr></tbody></table></figure><p>作为主键的字段一般都是也应该是编号、学号、工号等字段。</p><h4 id="10-1-2-唯一约束"><a href="#10-1-2-唯一约束" class="headerlink" title="10.1.2 唯一约束"></a>10.1.2 唯一约束</h4><blockquote><p> <strong>关键字</strong>：<code>UNIQUE</code>唯一，标识表中的一行数据，不可重复，<strong>可以</strong>为NULL。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#为表中列值不允许重复的列添加唯一约束</span><br><span class="line">ALTER TABLE t_subject MODIFY subject_name VARCHAR(20) UNIQUE;</span><br><span class="line"></span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) VALUES(1,'JAVA',40);</span><br><span class="line">#报错，课程名已存在</span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) VALUES(2,'JAVA',40);</span><br></pre></td></tr></tbody></table></figure><h4 id="10-1-3-自动增长列"><a href="#10-1-3-自动增长列" class="headerlink" title="10.1.3 自动增长列"></a>10.1.3 自动增长列</h4><blockquote><p> 关键字：<code>AUTO_INCREAMENT</code>自动增长，给<strong>主键数值列</strong>添加自动增长。从1开始，每次加1。不能单独使用，和主键配合。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#为表中主键列添加自动增长，避免忘记主键ID序号</span><br><span class="line">ALTER TABLE t_subject MODIFY subject_id INT AUTO_INCREMENT;</span><br><span class="line">#课程ID自动增长为2</span><br><span class="line">INSERT INTO t_subject ( subject_name, subject_hours ) VALUES( 'HTML5', 40 );</span><br></pre></td></tr></tbody></table></figure><h3 id="10-2-域完整性约束"><a href="#10-2-域完整性约束" class="headerlink" title="10.2 域完整性约束"></a>10.2 域完整性约束</h3><blockquote><p> 该约束限制单元格的数据正确性。</p></blockquote><h4 id="10-2-1-非空约束"><a href="#10-2-1-非空约束" class="headerlink" title="10.2.1 非空约束"></a>10.2.1 非空约束</h4><blockquote><p> 语法：<code>NOT NULL</code>,非空，此列必须有值</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#课程名称虽然添加了唯一约束，但是有NULL值存在的可能，要避免课程名称为NULL。</span><br><span class="line">ALTER TABLE t_subject MODIFY subject_name VARCHAR(20) NOT NULL;</span><br><span class="line">#报错，课程名不能为空</span><br><span class="line">INSERT INTO t_subject(subject_name,subject_hours) VALUES (NULL,40);</span><br></pre></td></tr></tbody></table></figure><h4 id="10-2-2-默认值约束"><a href="#10-2-2-默认值约束" class="headerlink" title="10.2.2 默认值约束"></a>10.2.2 默认值约束</h4><blockquote><p> <strong>关键字</strong>：<code>DEFAULT 值</code>。为列赋予默认值，当新增数据不指定值时，书写DEFAULT，以指定的默认值进行填充。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#当存储课程信息时，若课程时长没有指定值，则以默认值进行填充</span><br><span class="line">ALTER TABLE t_subject MODIFY subject_hours INT DEFAULT 40;</span><br><span class="line">#不写默认课程时为40，也可以把值写成DEFAULT</span><br><span class="line">INSERT INTO t_subject(subject_name) VALUES('JAVAWEB');</span><br></pre></td></tr></tbody></table></figure><h4 id="10-2-3-引用完整性约束"><a href="#10-2-3-引用完整性约束" class="headerlink" title="10.2.3 引用完整性约束"></a>10.2.3 引用完整性约束</h4><blockquote><p><strong>语法</strong>：<code>CONSTRAINT 引用名 FOREIGN KEY (列名) REFERENCES 被引用表名(列名)</code></p></blockquote><blockquote><p> <strong>解释</strong>：FOREIGN KEY<strong>引用外部表某个列的值</strong>，新增数据时，约束此列的值<strong>必须是引用表中存在的值</strong>。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#创建专业表</span><br><span class="line">CREATE TABLE t_speciality(</span><br><span class="line">special_id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">special_name VARCHAR(20) UNIQUE NOT NULL</span><br><span class="line">)CHARSET=utf8;</span><br><span class="line">#添加一些专业信息</span><br><span class="line">INSERT INTO t_speciality(special_name) VALUES('HTML5');</span><br><span class="line">INSERT INTO t_speciality(special_name) VALUES('JAVA');</span><br><span class="line">INSERT INTO t_speciality(special_name) VALUES('JAVAWEB');</span><br><span class="line">INSERT INTO t_speciality(special_name) VALUES('数据结构');</span><br><span class="line">#subject_id引用special_id</span><br><span class="line">ALTER TABLE t_subject ADD </span><br><span class="line">CONSTRAINT fk_subject_spacial FOREIGN KEY(special_id) REFERENCES t_speciality(special_id);</span><br><span class="line">#添加数据成功</span><br><span class="line">INSERT INTO t_subject(subject_name,special_id) VALUES('数据结构',4);</span><br><span class="line">#添加失败，主表中不存在5</span><br><span class="line">INSERT INTO t_subject(subject_name,special_id) VALUES('操作系统',5);</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>当两张表存在引用关系时</strong>，<strong>要执行删除操作</strong>，<strong>一定要先删除从表</strong>（<strong>引用表</strong>），<strong>再删除主表</strong>（<strong>被引用表</strong>）。</li></ul><h3 id="10-3-约束创建整合"><a href="#10-3-约束创建整合" class="headerlink" title="10.3 约束创建整合"></a>10.3 约束创建整合</h3><p>创建带有约束的表。</p><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>grade_id</td><td>INT</td><td>主键、自动增长</td><td>班级编号</td></tr><tr><td>grade_name</td><td>VARCHAR(20)</td><td>唯一、非空</td><td>班级名称</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_grade(</span><br><span class="line">grade_id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">grade_name VARCHAR(20) UNIQUE NOT NULL</span><br><span class="line">)CHARSET=utf8;</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>student_id</td><td>VARCHAR(20)</td><td>主键</td><td>学号</td></tr><tr><td>student_name</td><td>VARCHAR(20)</td><td>非空</td><td>姓名</td></tr><tr><td>sex</td><td>CHAR(2)</td><td>默认填充“男”</td><td>性别</td></tr><tr><td>born_date</td><td>DATE</td><td>非空</td><td>生日</td></tr><tr><td>phone</td><td>VARCHAR(11)</td><td>无</td><td>电脑</td></tr><tr><td>grade_id</td><td>INT</td><td>非空、外键约束引用班级表的grade_id</td><td>班级编号</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_student(</span><br><span class="line">student_id VARCHAR(20) PRIMARY KEY,</span><br><span class="line">student_name VARCHAR(20) NOT NULL,</span><br><span class="line">sex CHAR(2) DEFAULT '男',</span><br><span class="line">born_date DATE NOT NULL,</span><br><span class="line">phone VARCHAR(11),</span><br><span class="line">grade_id INT NOT NULL,</span><br><span class="line">CONSTRAINT fk_student_grade FOREIGN KEY (grade_id) REFERENCES t_grade(grade_id)</span><br><span class="line">)CHARSET=utf8;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>创建关系表时</strong>，<strong>一定要先创建主键</strong>，<strong>再创建从表</strong>。</li><li><strong>删除关系表时</strong>，<strong>先删除从表</strong>，<strong>再删除主表</strong>。</li></ul><h2 id="十一、事务【重点】"><a href="#十一、事务【重点】" class="headerlink" title="十一、事务【重点】"></a>十一、事务【重点】</h2><h3 id="11-1-模拟转账"><a href="#11-1-模拟转账" class="headerlink" title="11.1 模拟转账"></a>11.1 模拟转账</h3><blockquote><p> 生活当中转账是转账方账户扣钱，收账方账户加钱。我们用数据库操作来模拟实现转账。</p></blockquote><h4 id="11-1-1-数据库模拟转账"><a href="#11-1-1-数据库模拟转账" class="headerlink" title="11.1.1 数据库模拟转账"></a>11.1.1 数据库模拟转账</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#A账户转账给B账户1000元</span><br><span class="line">#B账户减1000元</span><br><span class="line"></span><br><span class="line">#新建账户表</span><br><span class="line">CREATE TABLE t_account(</span><br><span class="line">account_id INT PRIMARY KEY,</span><br><span class="line">money INT</span><br><span class="line">)CHARSET=utf8;</span><br><span class="line">#插入数据</span><br><span class="line">INSERT INTO t_account(account_id,money) VALUES(1,5000);</span><br><span class="line">INSERT INTO t_account(account_id,money) VALUES(2,5000);</span><br><span class="line">#模拟转账</span><br><span class="line">UPDATE t_account SET money=money-1000 WHERE account_id=1;#转账</span><br><span class="line">UPDATE t_account SET money=money+1000 WHERE account_id=2;#收账</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>上述代码完成了两个账户之间转账的操作</strong>。</li></ul><h3 id="11-1-2-模拟转账错误"><a href="#11-1-2-模拟转账错误" class="headerlink" title="11.1.2 模拟转账错误"></a>11.1.2 模拟转账错误</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t_account SET money=money-1000 WHERE account_id=1;#转账</span><br><span class="line">#断电，异常，出错...</span><br><span class="line">UPDATE t_account SET money=money+1000 WHERE account_id=2;#收账</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>上述代码在减操作后过程中出现了异常或加钱语句出错</strong>，<strong>会发现减钱成功了而加钱失败了</strong>！</li><li><strong>注意</strong>：<strong>每条SQL语句都是一个独立的操作</strong>，<strong>一个操作执行完对数据库是永久性的影响</strong>。</li></ul><h3 id="11-2-事务的概念"><a href="#11-2-事务的概念" class="headerlink" title="11.2 事务的概念"></a>11.2 事务的概念</h3><blockquote><p> 事务是一个原子操作，是一个做小执行单元。可以由一个或多个SQL语句组成，在同一个事务当中，所有的SQL语句都成功执行，整个事务成功，有一个SQL语句执行失败，整个事务执行失败。</p></blockquote><h3 id="11-3-事务的边界"><a href="#11-3-事务的边界" class="headerlink" title="11.3 事务的边界"></a>11.3 事务的边界</h3><ul><li>开始：连接到数据库，执行一条DML语句。上一个事务结束后，又输入了一条DML语句，即事务的开始。</li><li>结束：<ol><li>提交：<ul><li>显式提交：COMMIT；</li><li>隐式提交：一条创建、删除的语句，正常退出（客户端退出连接）；</li></ul></li><li>回滚：<ul><li>显式回滚：ROLLBACK；</li><li>隐式回滚：非正常退出（断电、宕机），执行了创建、删除的语句，但是失败了，会为这个无效的语句执行回滚。</li></ul></li></ol></li></ul><p>如11.1.2节中的两条语句就是两个事务，第一条语句执行便是事务的开始，分号便是事务的结束，执行完毕该语句就被提交了；而第二句由于执行失败，该语句的结果就是回滚，回到事务前的样子。</p><h3 id="11-4-事务的原理"><a href="#11-4-事务的原理" class="headerlink" title="11.4 事务的原理"></a>11.4 事务的原理</h3><blockquote><p> 数据库会为每一个客户端都维护一个空间独立的缓存区（回滚段），一个事务中所有的增删改查语句的执行结果都会缓存在回滚段中，只有当事务中所有SQL语句均正常结束（COMMIT），才会将回滚段中的数据同步到数据库。否则无论因为哪种原因失败，整个事务将回滚（ROLLBACK）。</p></blockquote><h3 id="11-5-事务的特性（ACID）"><a href="#11-5-事务的特性（ACID）" class="headerlink" title="11.5 事务的特性（ACID）"></a>11.5 事务的特性（ACID）</h3><ul><li><p><strong>Atomicity</strong>（<strong>原子性</strong>）</p><p>表示一个事务内的所有操作是一个整体，要么全部成功，要么全部失败。</p></li><li><p><strong>Consistency</strong>（<strong>一致性</strong>）</p><p>表示一个事务内有一个操作失败时，所有更改过的数据都必须回滚到修改前状态。</p></li><li><p><strong>Isolation</strong>（<strong>隔离性</strong>）</p><p>事务查看数据库操作时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事物修改它之后的状态，事务不会查看中间状态的数据。</p></li><li><p><strong>Durability</strong>（<strong>持久性</strong>）</p><p>持久性事务完成之后，它对与系统的影响是永久性的。</p></li></ul><h3 id="11-6-事务应用"><a href="#11-6-事务应用" class="headerlink" title="11.6 事务应用"></a>11.6 事务应用</h3><p>应用环境：基于增删改查语句的操作结果（均返回操作后受影响的行数），可通过程序逻辑手动控制事务提交或回滚。</p><h4 id="11-6-1-事务完成转账"><a href="#11-6-1-事务完成转账" class="headerlink" title="11.6.1 事务完成转账"></a>11.6.1 事务完成转账</h4><p>手动开启事务，将两个减钱和加钱的操作放到事务中，操作完之后再提交。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#开启事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line">#执行减钱操作（两个账户初始钱都为5000）</span><br><span class="line">UPDATE t_account SET money=money-1000 WHERE account_id = 1;</span><br><span class="line">#执行加钱操作</span><br><span class="line">UPDATE t_account SET money=money+1000 WHERE account_id = 2;</span><br><span class="line">#查看该事务中账户数据</span><br><span class="line">SELECT * FROM t_account;</span><br></pre></td></tr></tbody></table></figure><p>以上SQL语句开启了事务，但并未进行提交，此时查看账户中的数据如下：</p><table><thead><tr><th>account_id</th><th>money</th></tr></thead><tbody><tr><td>1</td><td>4000</td></tr><tr><td>2</td><td>6000</td></tr></tbody></table><p>发现数据<strong>已经变了</strong>，但该数据只是事务的中间状态。</p><p>然后在你的数据库管理系统中<strong>新建</strong>一个连接，新建连接名随便取一个，然后新建查询。这么做相当于模拟了另外一个客户端：</p><p>执行<code>SELECT * FROM t_account</code>;，发现表中的数据并<strong>没有改变</strong>：</p><table><thead><tr><th>account_id</th><th>money</th></tr></thead><tbody><tr><td>1</td><td>5000</td></tr><tr><td>2</td><td>5000</td></tr></tbody></table><p>这是因为在第一个连接中开启了事务，但没有提交；而在another连接中，查询语句也是一个事务（没有显式开启和显式提交），该事务只能查看其它事务修改前后者修改后的状态，此处就是只能查看转账操作提交前的状态，两个账户都是5000，这也是事务的<strong>隔离性</strong>。</p><p>回到localhost连接中，提交事务；然后在another连接中再查询一次：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#localhost连接，提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">#another连接，查询表</span><br><span class="line">SELECT * FROM t_account;</span><br></pre></td></tr></tbody></table></figure><p>此时的查询结果如下：</p><table><thead><tr><th>account_id</th><th>money</th></tr></thead><tbody><tr><td>1</td><td>4000</td></tr><tr><td>2</td><td>6000</td></tr></tbody></table><p>发现数据已经正式修改完毕。</p><p>回滚操作类似，但它是取消掉事务的操作，回到事务前的状态。比如事务开启后，减钱成功，但是加钱失败了（可以用SQL语句某个单词写错来模拟），然后手动执行<code>ROLLBACK</code>，减钱操作就会被撤销。不再演示。</p><ul><li>此处的演示是手动进行了事物的开启和提交/回滚，在写程序时，这些操作都会在程序中进行控制。</li></ul><h2 id="十二、权限管理"><a href="#十二、权限管理" class="headerlink" title="十二、权限管理"></a>十二、权限管理</h2><h3 id="12-1-创建用户"><a href="#12-1-创建用户" class="headerlink" title="12.1 创建用户"></a>12.1 创建用户</h3><blockquote><p> <strong>语法</strong>：<code>CREATE USER 用户名 IDENTIFIED BY 密码</code></p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#创建一个用户</span><br><span class="line">CREATE USER 'client1' IDENTIFIED BY '123456';</span><br></pre></td></tr></tbody></table></figure><p>接下来验证用户是否添加成功，首先新建连接，在用户名和账号那里写上自己创建的用户和密码，测试一下是否连接成功。</p><p>然后点“确定”。但是打开该连接之后你会发现此连接中除了一个系统数据库，其他数据库<strong>都不存在</strong>。这是因为client1用户建立的连接没有得到任何授权，也就是没有对数据库的访问操作权限。</p><h3 id="12-2-授权"><a href="#12-2-授权" class="headerlink" title="12.2 授权"></a>12.2 授权</h3><blockquote><p> <strong>语法</strong>：<code>GRANT ALL ON 数据库.表 TO 用户名;</code></p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将companydb下的所有表的权限都赋给client</span><br><span class="line">GRANT ALL ON companydb.* TO client1;</span><br></pre></td></tr></tbody></table></figure><p>该语句需要在root连接中执行，不能在client1连接中自己给自己授权。</p><h3 id="12-3-撤销权限"><a href="#12-3-撤销权限" class="headerlink" title="12.3 撤销权限"></a>12.3 撤销权限</h3><blockquote><p> <strong>语法</strong>：<code>REVOKE ALL ON 数据库.表名 FROM 用户名</code></p></blockquote><ul><li><strong>注意</strong>：<strong>撤销权限后</strong>，<strong>账户需要重新连接客户端才会生效</strong>。</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将client1的companydb的操作权限撤销</span><br><span class="line">GRANT ALL ON companydb.* TO client1;</span><br></pre></td></tr></tbody></table></figure><p>虽然刷新之后表不见了，但是依然可以对表进行操作，只有在重新连接数据库的时候权限才会消失。</p><h3 id="12-4-删除用户"><a href="#12-4-删除用户" class="headerlink" title="12.4 删除用户"></a>12.4 删除用户</h3><blockquote><p> <strong>语法</strong>：<code>DROP USER 用户名</code></p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除用户client1</span><br><span class="line">DROP USER 'client1';</span><br></pre></td></tr></tbody></table></figure><h2 id="十三、视图"><a href="#十三、视图" class="headerlink" title="十三、视图"></a>十三、视图</h2><h3 id="13-1-概念"><a href="#13-1-概念" class="headerlink" title="13.1 概念"></a>13.1 概念</h3><blockquote><p> 视图，虚拟表，从一个表或多个表中查询出来的表，作用和真实表一样，包含一系列带有行和列的数据。视图表中，用户可以使用SELECT语句查询数据，也可以使用INSERT、UPDATE、DELETE修改记录，视图可以使用户操作方便，并保障数据库系统安全。</p></blockquote><ul><li>和临时表很像，但临时表不会被保存，而视图是保存下来的表。</li></ul><h3 id="13-2-视图特点"><a href="#13-2-视图特点" class="headerlink" title="13.2 视图特点"></a>13.2 视图特点</h3><ul><li>优点<ul><li>简单化，数据所见即所得。</li><li>安全性，用户只能查询或修改他们所能见到的数据。</li><li>逻辑独立性，可以屏蔽真实表结构变化带来的影响。</li></ul></li><li>缺点<ul><li>性能相对较差，简单的查询也会变得稍显复杂。</li><li>修改不方便，特别是复杂的聚合视图基本无法修改。</li></ul></li></ul><h3 id="13-3-视图的创建"><a href="#13-3-视图的创建" class="headerlink" title="13.3 视图的创建"></a>13.3 视图的创建</h3><blockquote><p> <strong>语法</strong>：<code>CREATE VIEW 视图名 AS 查询数据源表结构语句;</code></p></blockquote><h3 id="13-3-1-创建视图"><a href="#13-3-1-创建视图" class="headerlink" title="13.3.1 创建视图"></a>13.3.1 创建视图</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#创建t_emp_info的视图，其视图从t_employees表中查询员工编号、姓名、邮箱、工资</span><br><span class="line">CREATE VIEW t_emp_info</span><br><span class="line">AS</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,EMAIL,SALARY FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><h4 id="13-3-2-使用视图"><a href="#13-3-2-使用视图" class="headerlink" title="13.3.2 使用视图"></a>13.3.2 使用视图</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询t_emp_info视图中编号为036的员工信息</span><br><span class="line">SELECT * FROM t_emp_info WHERE EMPLOYEE_ID = 036;</span><br></pre></td></tr></tbody></table></figure><p>使用视图可以简化查询的操作，将来视图应用最多的地方也是查询。</p><h3 id="13-4-视图的修改"><a href="#13-4-视图的修改" class="headerlink" title="13.4 视图的修改"></a>13.4 视图的修改</h3><blockquote><ul><li>方式一：<code>CREATE OR REPLACE VIEW 视图名 AS 查询语句</code></li><li>方式二：<code>ALTER VIEW 视图名 AS 查询语句</code></li></ul></blockquote><p>方式一是在不明确视图是否存在时使用，如果存在则修改，否则创建；方式二是明确存在时进行修改。无论哪种方式都需要拼接一个完整查询语句。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#方式一，如果视图存在则修改，反之创建。</span><br><span class="line">CREATE OR REPLACE VIEW t_emp_info</span><br><span class="line">AS</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,EMAIL,SALARY,JOB_ID FROM t_employees;</span><br><span class="line">#方式二，对已存在的视图进行修改</span><br><span class="line">ALTER VIEW t_emp_info</span><br><span class="line">AS</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,EMAIL,SALARY FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><h3 id="13-5-视图的删除"><a href="#13-5-视图的删除" class="headerlink" title="13.5 视图的删除"></a>13.5 视图的删除</h3><blockquote><p> <strong>语法</strong>：<code>DROP VIEW 视图名</code></p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除视图</span><br><span class="line">DROP VIEW t_emp_info;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>删除视图不会影响原表</strong>。</li></ul><h3 id="13-6-视图的注意事项"><a href="#13-6-视图的注意事项" class="headerlink" title="13.6 视图的注意事项"></a>13.6 视图的注意事项</h3><ul><li>视图不会独立存储数据，原表发生改变，视图也发生改变。没有优化任何查询性能。</li><li>如果视图包含以下结构中的一种，则视图不可更新：<ul><li>聚合函数的结果</li><li>DISTINCT去重后的结果</li><li>GROUP BY分组后的结果</li><li>HAVING筛选过滤后的结果</li><li>UNION、UNION ALL联合后的结果</li></ul></li></ul><h2 id="十四、SQL语言分类"><a href="#十四、SQL语言分类" class="headerlink" title="十四、SQL语言分类"></a>十四、SQL语言分类</h2><ol><li><strong>数据查询语言</strong>DQL（Data Query Language）：SELECT、WHERE、ORDER BY、GROUP BY、HAVING；</li><li><strong>数据定义语言</strong>DDL（Data Definition Language）：CREATE、ALTER、DROP；</li><li><strong>数据操作语言</strong>DML（Data Manipulation Language）：INSERT、UNPATE、DELETE；</li><li><strong>事务处理语言</strong>TPL（Transaction Process Language）：COMMIT、ROLLBACK；</li><li><strong>数据控制语言</strong>DCL（Data Control Language）：GRANT、REVOKE。</li></ol><h2 id="十五、综合练习"><a href="#十五、综合练习" class="headerlink" title="十五、综合练习"></a>十五、综合练习</h2><p>某网上购物商城数据库表的结构如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户表</span><br><span class="line">CREATE TABLE USER(</span><br><span class="line">userId INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(20) NOT NULL,</span><br><span class="line">PASSWORD VARCHAR(18) NOT NULL,</span><br><span class="line">address VARCHAR(100),</span><br><span class="line">phone VARCHAR(11)</span><br><span class="line">);</span><br><span class="line">SELECT * FROM USER;</span><br><span class="line">INSERT INTO USER(username, PASSWORD, address,phone) VALUES('张三','123','北京昌平','13541489201');</span><br><span class="line">INSERT INTO USER(username, PASSWORD, address,phone) VALUES('李四','678','北京海定','13541489202');</span><br><span class="line">INSERT INTO USER(username, PASSWORD, address,phone) VALUES('王五','123','北京朝阳','13541489203');</span><br><span class="line">INSERT INTO USER(username, PASSWORD, address,phone) VALUES('赵柳','123','北京大兴','13541489204');</span><br><span class="line"># 创建分类表</span><br><span class="line">CREATE TABLE category(</span><br><span class="line">cid VARCHAR(32) PRIMARY KEY,</span><br><span class="line">cname VARCHAR(100) NOT NULL  # 分类名称</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO category VALUES('c001','电器');</span><br><span class="line">INSERT INTO category VALUES('c002','服饰');</span><br><span class="line">INSERT INTO category VALUES('c003','化妆品');</span><br><span class="line">INSERT INTO category VALUES('c004','书籍');</span><br><span class="line"></span><br><span class="line"># 商品表</span><br><span class="line">CREATE TABLE `products`(</span><br><span class="line">`pid` VARCHAR(32) PRIMARY KEY,</span><br><span class="line">`name` VARCHAR(40),</span><br><span class="line">`price` DOUBLE(7,2),</span><br><span class="line">category_id VARCHAR(32),</span><br><span class="line">CONSTRAINT fk_products_category_id FOREIGN KEY (category_id) REFERENCES category(cid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p001','联想',5000,'c001');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p002','海尔',3000,'c001');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p003','雷神',5000,'c001');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p004','JACK',800,'c001');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p005','真维斯',200,'c002');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p006','花花公子',440,'c002');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p007','劲霸',2000,'c002');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p008','香奈儿',800,'c003');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p009','相宜本草 ',200,'c003');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p0010','梅明子',200,NULL);</span><br><span class="line"># 订单表</span><br><span class="line">CREATE TABLE `orders` (</span><br><span class="line">`oid` VARCHAR(32) PRIMARY KEY,</span><br><span class="line">`totalprice` DOUBLE(12,2), # 总计</span><br><span class="line">`userId` INT,</span><br><span class="line">CONSTRAINT fk_orders_userId FOREIGN KEY(userId) REFERENCES USER(userId) # 外键</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO orders VALUES('o6100',18000.50,1);</span><br><span class="line">INSERT INTO orders VALUES('o6101',7200.35,1);</span><br><span class="line">INSERT INTO orders VALUES('o6102',600.00,2);</span><br><span class="line">INSERT INTO orders VALUES('o6103',1300.26,4);</span><br><span class="line">SELECT * FROM orders;</span><br><span class="line"># 订单详情表</span><br><span class="line">CREATE TABLE orderitem(</span><br><span class="line">oid VARCHAR(32), # 订单id</span><br><span class="line">pid VARCHAR(32), # 商品id</span><br><span class="line">num INT, # 购买商品数量</span><br><span class="line">PRIMARY KEY(oid, pid), # 主键</span><br><span class="line">CONSTRAINT fk_orderitem_oid FOREIGN KEY(oid) REFERENCES orders(oid),</span><br><span class="line">CONSTRAINT fk_orderitem_pid FOREIGN KEY(pid) REFERENCES products(pid)</span><br><span class="line">);</span><br><span class="line"># 订单详情表添加信息</span><br><span class="line">INSERT INTO orderitem VALUES('o6100','p001',1),('o6100','p002',1),('o6101','p003',1);</span><br></pre></td></tr></tbody></table></figure><h3 id="15-1-综合练习1-【多表查询】"><a href="#15-1-综合练习1-【多表查询】" class="headerlink" title="15.1 综合练习1-【多表查询】"></a>15.1 综合练习1-【多表查询】</h3><ol><li><p>查询所有用户的订单</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有用户的订单</span><br><span class="line"># 用户订单表</span><br><span class="line">SELECT * FROM USER INNER JOIN orders ON orders.`userId` = user.`userId`;</span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>查询用户id为1的所有订单详情</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询用户id为1的所有订单详情</span><br><span class="line"># 用户 订单 订单详情表</span><br><span class="line">SELECT * FROM USER</span><br><span class="line">INNER JOIN orders</span><br><span class="line">ON orders.`userId` = user.`userId`</span><br><span class="line">INNER JOIN orderitem</span><br><span class="line">ON orders.`oid` = orderitem.`oid`</span><br><span class="line">WHERE user.`userId` = 1;</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="15-2-综合练习2-【子查询】"><a href="#15-2-综合练习2-【子查询】" class="headerlink" title="15.2  综合练习2-【子查询】"></a>15.2  综合练习2-【子查询】</h3><ol><li><p>查看用户为张三的订单</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看用户为张三的订单</span><br><span class="line"># 子查询单行单列</span><br><span class="line">SELECT userId FROM USER WHERE username='张三';</span><br><span class="line">SELECT * FROM orders WHERE userId=(SELECT userId FROM USER WHERE username='张三');</span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>查询出订单的价格大于800的所有用户的信息</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询出订单的价格大于800的所有用户的信息</span><br><span class="line"># 子查询多行单列枚举查询</span><br><span class="line">SELECT DISTINCT userId FROM orders WHERE totalprice &gt; 800;</span><br><span class="line">SELECT * FROM USER WHERE userId IN (SELECT DISTINCT userId FROM orders WHERE totalprice &gt; 800);</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="15-3-综合练习3-【分页查询】"><a href="#15-3-综合练习3-【分页查询】" class="headerlink" title="15.3  综合练习3-【分页查询】"></a>15.3  综合练习3-【分页查询】</h3><ol><li><p>查询所有订单信息，每页显示5条数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有订单信息，每页显示5条数据</span><br><span class="line"># 查询第一页</span><br><span class="line">SELECT * FROM orders LIMIT 0, 5;</span><br><span class="line"># 查询第二页</span><br><span class="line">SELECT * FROM orders LIMIT 5, 5;</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="至此，MySql的基础学习已经告一段落，继续加油吧，在计算机这篇星辰大海中继续遨游。！"><a href="#至此，MySql的基础学习已经告一段落，继续加油吧，在计算机这篇星辰大海中继续遨游。！" class="headerlink" title="至此，MySql的基础学习已经告一段落，继续加油吧，在计算机这篇星辰大海中继续遨游。！"></a>至此，MySql的基础学习已经告一段落，继续加油吧，在计算机这篇星辰大海中继续遨游。！</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MySQL是一个&lt;strong&gt;&lt;a href=&quot;https://baike.baidu.com/item/关系型数据库管理系统/696511&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;关系型数据库管理系统&lt;/a&gt;**&lt;/strong&gt;，**由瑞典MySQL AB 公司开发，属于 &lt;a href=&quot;https://baike.baidu.com/item/Oracle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Oracle&lt;/a&gt; 旗下产品。MySQL 是最流行的&lt;a href=&quot;https://baike.baidu.com/item/关系型数据库管理系统/696511&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;关系型数据库管理系统&lt;/a&gt;之一，在 WEB 应用方面，MySQL是最好的 &lt;a href=&quot;https://baike.baidu.com/item/RDBMS/1048260&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RDBMS&lt;/a&gt; (Relational Database Management System，关系数据库管理系统) 应用软件之一。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySql" scheme="https://liudufu.github.io/tags/MySql/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>设计_面试题.03.01.三合一</title>
    <link href="https://liudufu.github.io/Three_in_one/"/>
    <id>https://liudufu.github.io/Three_in_one/</id>
    <published>2020-12-08T09:39:26.000Z</published>
    <updated>2020-12-08T09:42:02.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>三合一。描述如何只用一个数组来实现三个栈。</p><p>你应该实现push(stackNum, value)、pop(stackNum)、isEmpty(stackNum)、peek(stackNum)方法。stackNum表示栈下标，value表示压入的值。</p><p>构造函数会传入一个stackSize参数，代表每个栈的大小。</p><p>示例1:</p><a id="more"></a><p> 输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">["TripleInOne", "push", "push", "pop", "pop", "pop", "isEmpty"]</span><br><span class="line">[[1], [0, 1], [0, 2], [0], [0], [0], [0]]</span><br></pre></td></tr></tbody></table></figure><p> 输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[null, null, null, 1, -1, -1, true]</span><br><span class="line">说明：当栈为空时`pop, peek`返回-1，当栈满时`push`不压入元素。</span><br></pre></td></tr></tbody></table></figure><p>示例2:</p><p> 输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">["TripleInOne", "push", "push", "push", "pop", "pop", "pop", "peek"]</span><br><span class="line">[[2], [0, 1], [0, 2], [0, 3], [0], [0], [0], [0]]</span><br><span class="line"> 输出：</span><br><span class="line">[null, null, null, null, 2, 1, -1, -1]</span><br></pre></td></tr></tbody></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一开始直接懵逼，看了别人的才懂题意</p><ol><li><p>首先开始创建类时构造函数里面创入的大小是栈的大小 ( stackSize )</p></li><li><p>其次不管是push还是pop还是peek或者isEmpty 的参数 (stackNum)</p><ul><li>stackNum输入的值,代表的是哪个栈!!!!</li><li>这个题叫三合一就是说 三个栈代表全部放在一个数组里面</li><li>例如: 参数stackNum 为 0 时就代表第一个栈</li><li>参数stackNum 为 1 时就代表第二个栈</li><li>参数stackNum 为 2 时就代表第三个栈</li></ul></li><li><p>由于是一个数组相当于3个栈,所以创建的时候就 乘 3</p></li></ol><p><img src="https://pic.leetcode-cn.com/1600592347-fAjxIk-image.png" alt=""></p><p><img src="https://pic.leetcode-cn.com/1600592358-oHsaSG-image.png" alt=""></p><ol start="4"><li><p>每次push的时候 需要先判断头指针是否小于数组的长度</p><ul><li>如果小于需要添加值,而且需要把top节点加3</li><li>例如: 添加栈0 2, 添加栈0 8, 添加栈0 7</li></ul><p><img src="https://pic.leetcode-cn.com/1600592511-jiDDdY-image.png" alt=""></p><p><img src="https://pic.leetcode-cn.com/1600592610-evbIQM-image.png" alt=""></p><p>此时top[0] = 0 减3之后就是 -3 所以它是空的返回-1</p></li><li><p>每次peek的时候, 先判断是否为空 空直接返回-1, 不为空话就把top – 3 的下标给它就可以了,此时不是抛出所以不需要改变原来的top的值</p></li></ol><p>参考代码： </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TripleInOne</span> </span>{</span><br><span class="line"><span class="comment">//定义数组栈</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stack;</span><br><span class="line"><span class="comment">//定义一个头指针的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stackTop;</span><br><span class="line"><span class="comment">//定义栈的长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> stackSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TripleInOne</span><span class="params">(<span class="keyword">int</span> stackSize)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.stackSize = stackSize;</span><br><span class="line">    <span class="comment">//初始化三合一的栈</span></span><br><span class="line">    stack = <span class="keyword">new</span> <span class="keyword">int</span>[stackSize * <span class="number">3</span>];</span><br><span class="line">    <span class="comment">//初始化三个栈的头结点</span></span><br><span class="line">    stackTop = <span class="keyword">new</span> <span class="keyword">int</span>[] {<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>};</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> stackNum, <span class="keyword">int</span> value)</span> </span>{</span><br><span class="line">    <span class="comment">//push首先需要判断栈是否满了，</span></span><br><span class="line">    <span class="keyword">int</span> curStackTop = stackTop[stackNum];</span><br><span class="line">    <span class="keyword">if</span>(curStackTop &lt; stackSize * <span class="number">3</span>) {</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    stack[curStackTop] = value;</span><br><span class="line">    <span class="comment">//头结点 + 3</span></span><br><span class="line">    stackTop[stackNum] += <span class="number">3</span>;</span><br><span class="line">    }<span class="keyword">else</span> {<span class="comment">//栈满了</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> stackNum)</span> </span>{</span><br><span class="line">    <span class="comment">//栈顶出栈首先需要判断栈是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(isEmpty(stackNum)) {</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//原本因为每次进栈后栈顶元素的下标的都会加3，出栈需要先减三</span></span><br><span class="line">    stackTop[stackNum] -= <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stack[stackTop[stackNum]];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">(<span class="keyword">int</span> stackNum)</span> </span>{</span><br><span class="line">    <span class="comment">//同理，判断是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(isEmpty(stackNum)) {</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//因为是peek，所以不用改变栈顶指针的值</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stack[stackTop[stackNum] - <span class="number">3</span>];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">int</span> stackNum)</span> </span>{</span><br><span class="line">    <span class="comment">//判断这个栈是否为空，因为每次进栈后栈顶元素的下标的都会加3，所以判空时需要先减三判断是否小于90</span></span><br><span class="line">    <span class="keyword">return</span> stackTop[stackNum] - <span class="number">3</span> &lt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;三合一。描述如何只用一个数组来实现三个栈。&lt;/p&gt;
&lt;p&gt;你应该实现push(stackNum, value)、pop(stackNum)、isEmpty(stackNum)、peek(stackNum)方法。stackNum表示栈下标，value表示压入的值。&lt;/p&gt;
&lt;p&gt;构造函数会传入一个stackSize参数，代表每个栈的大小。&lt;/p&gt;
&lt;p&gt;示例1:&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="数组" scheme="https://liudufu.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="栈" scheme="https://liudufu.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥算法国赛真题总结</title>
    <link href="https://liudufu.github.io/A_summary_of_the_National_Games/"/>
    <id>https://liudufu.github.io/A_summary_of_the_National_Games/</id>
    <published>2020-11-08T13:43:33.000Z</published>
    <updated>2020-11-08T13:46:05.447Z</updated>
    
    <content type="html"><![CDATA[<p>🌸记录蓝桥杯javaB组历届决赛真题解题算法总结与对比</p><a id="more"></a><h2 id="🌸解题方法汇总（java-B组决赛）"><a href="#🌸解题方法汇总（java-B组决赛）" class="headerlink" title="🌸解题方法汇总（java B组决赛）"></a>🌸解题方法汇总（java B组决赛）</h2><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>第四届</td><td>暴力枚举</td><td>暴力枚举</td><td>快速排序</td><td>BFS、双向BFS、八数码问题、康托展开等</td><td>动态规划、模拟</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第五届</td><td>暴力枚举</td><td>全排列+剪枝（或者直接暴力但是代码剪枝量很大）</td><td>读题、细心、逻辑模拟</td><td>康托展开式（不会则直接暴力全排，但是分不高，可能一半都没有而且超时）、阶乘</td><td>行列式、矩阵乘法、模拟、扩展欧几里得</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第六届</td><td>脑筋转弯+暴力计算</td><td>全排列+判断</td><td>自己的方法是<strong>“猜”“试出来”</strong></td><td>深度优先搜索</td><td>-1</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第七届</td><td>画图找出规律后使用递归模拟过程</td><td>全排列</td><td>代码分析，考你能不能读懂代码</td><td>回溯+剪枝</td><td>暴力搜索（超时）；DFS+剪枝回溯（60）；动态规划（80）；数据结构（100）</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第八届</td><td>直接暴力循环</td><td>使用另一个数组进行模拟细胞增殖的过程或者使用深度优先模拟</td><td>读代码找规律（看自己的细心程度吧）</td><td>直接模拟计算的过程，注意使用数据范围较大的Long，而且需要熟练使用Long、Integer等类的API</td><td>博弈问题、深度优先、剪枝，回溯、模拟</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第九届</td><td>海伦公式</td><td>全排列、剪枝判断</td><td>全排列、回溯</td><td>并查集、连通分量、递归</td><td>构造树或者递归优化</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第十届模拟</td><td>暴力+熟悉除模运算的实质</td><td>暴力或者深搜求子串</td><td>暴力（时间长）、找规律分析题，将除模转换成次方</td><td>暴力深搜（耗时加分低）、找规律理解最大公约数的含义</td><td>并查集、联通分量找环</td><td>-1（暴力只能30）</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第十届</td><td>暴力</td><td>素数筛、记忆化深搜或者dp</td><td>找规律</td><td>素因子分解、找规律</td><td>深搜+判重</td><td>dp+贪心</td><td>暴力或者dp</td><td>-1（找规律）</td><td>线段树、主席树、树状数组</td><td>-1</td></tr></tbody></table><ul><li><a href="">javaB组历届决赛真题汇总</a></li><li><a href="">javaB组历届省赛赛真题汇总</a></li></ul><h2 id="🌸康托展开"><a href="#🌸康托展开" class="headerlink" title="🌸康托展开"></a>🌸康托展开</h2><p><strong>康托展开</strong>是一个全排列到一个<a href="https://baike.baidu.com/item/自然数" target="_blank" rel="noopener">自然数</a>的<a href="https://baike.baidu.com/item/双射" target="_blank" rel="noopener">双射</a>，常用于构建<a href="https://baike.baidu.com/item/哈希表" target="_blank" rel="noopener">哈希表</a>时的空间压缩。 康托展开的实质是计算当前排列在所有由小到大全排列中的顺序，因此是可逆的。</p><p><strong>通俗简介：</strong></p><p>康托展开可以求解一个排列的序号，比如：12345 序号为 1 ，12354序号为2，按字典序增加编号递增，依次类推。<br>康托逆展开可以求解一个序号它对应的排列是什么。</p><p>先给出康托展开的公式：</p><p>$X = a_n(n - 1)!+ a_{n-1}(n-2)!+….+a_1\cdot0!$</p><p>先对这个公式里变量进行解释，大家不理解这个公式没关系，慢慢往后看，很简单的。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9nc3MzLmJkc3RhdGljLmNvbS83UG8zZFNhZ194STRraEdrcG9XSzFIRjZoaHkvYmFpa2UvcyUzRDEyL3NpZ249N2NlMGY3ZmFkODA3MzVmYTk1ZjA0YWJiOWM1MTQ4ZmEvMGRmM2Q3Y2E3YmNiMGE0NjI1ZTdkZWQ4Njc2M2Y2MjQ2YTYwYWYwZS5qcGc?x-oss-process=image/format,png" alt="img"> 的意思是从右往左数第 i 位这个数是这个数前未出现的数，第<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9nc3MzLmJkc3RhdGljLmNvbS83UG8zZFNhZ194STRraEdrcG9XSzFIRjZoaHkvYmFpa2UvcyUzRDEyL3NpZ249N2NlMGY3ZmFkODA3MzVmYTk1ZjA0YWJiOWM1MTQ4ZmEvMGRmM2Q3Y2E3YmNiMGE0NjI1ZTdkZWQ4Njc2M2Y2MjQ2YTYwYWYwZS5qcGc?x-oss-process=image/format,png" alt="img"> 大。举个例子就明白这个公式了：</p><p>注意：计算的时候 12345 序列应视为第0个序列，后面会解释为什么。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">百度百科的例子</span><br><span class="line">在（1,2,3，4，5）5个数的排列组合中，计算 34152的康托展开值。</span><br><span class="line">首位是3，则小于3的数有两个，为1和2，，则首位小于3的所有排列组合为</span><br><span class="line">第二位是4，由于第一位小于4，1、2、3中一定会有1个充当第一位，所以排在4之下的只剩2个，所以其实计算的是在第二位之后小于4的个数。因此。</span><br><span class="line">第三位是1，则在其之后小于1的数有0个，所以。</span><br><span class="line">第四位是5，则在其之后小于5的数有1个，为2，所以。</span><br><span class="line">最后一位就不用计算啦，因为在它之后已经没有数了，所以固定为0</span><br><span class="line">根据公式：</span><br><span class="line">X = 2 x 4! + 2 x 3! + 0 x 2! + 1 x 1! + 0 x 0！</span><br><span class="line">　　所以比34152小的组合有61个，即34152是排第62。</span><br></pre></td></tr></tbody></table></figure><p>拿52413举例子：</p><p>1、首先看第一个数 5，不管第一位是什么数，后面都有四位数，那么这四位数全排列的方式有 4！种，而如果第一位是 1 或 2 或 3 或 4 都会比5开头的字典序要小，所以可以令1，2，3，4分别作为开头，这样的话就会有 4 * 4！种排法要比 52413这种排法的字典序要小。</p><p>那么第一个数是1，2，3，4时候的字典序的个数数完了是 4 * 4！ 种，且这些字典序都要比52413的字典序要小。</p><p>还有其他的排列方式比52413的字典序要小的吗？</p><p>2、那么就可以固定第一位5，找下一位2，这时5已经用过了，所以从剩下的 1，2，3，4 里挑选比2小的数，一共1个，后面还剩三位，也就是3！种排列方式，那么这时候比 52413 字典序要小的又有 1 * 3！种，也就是当5在第一位，1在第二位的时候。</p><p>3、再看第三位4，这时5，2都用了，所以从剩下的 1，3，4三个数中找比4小的数的个数，有两个比4小原理同上，所以这时候也可以有 2 * 2!种排列方式的字典序小于 52413</p><p>4、再看第四位1，这时候会有 0 * 1！种</p><p>5、再看第五位3，这时候会有0 * 0！种</p><p>综上所述：<br>对于序列： 52413 该序列展开后为： 4 * 4! + 1 * 3! + 2 * 2! + 0 * 1! + 0 * 0! ，计算结果是： 106<br>由于是从0开始计数的，所以最后 52413 的编号为 107</p><p>为什么从0开始计数？<br>可以这样看：我现在让你求12345的康托展开值，也就是：0<em>4！+ 0</em>3！+ 0<em>2！+ 0</em>1！+0*0！ = 0 所以明白了吧~~<br>康托公式最小字典序的编号就是0。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** 这里以字符串进行展示  字符串可泛化性好 ******/</span></span><br><span class="line"> </span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*******打出1-n的阶乘表*******/</span></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jie_cheng</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 0的阶乘为1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) f[i] = f[i - <span class="number">1</span>] * i;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**************康托展开****************/</span></span><br><span class="line">string str;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kangtuo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;  <span class="comment">//注意，因为 12345 是算作0开始计算的，最后结果要把12345看作是第一个</span></span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++){</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;<span class="comment">//用来计数的</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++){</span><br><span class="line">            <span class="keyword">if</span>(str[i] &gt; str[j]) tmp++;</span><br><span class="line">            <span class="comment">//计算str[i]是第几大的数，或者说计算有几个比他小的数</span></span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line">        ans += tmp * f[len - i - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    jie_cheng(<span class="number">10</span>);</span><br><span class="line">    string str = <span class="string">"52413"</span>;</span><br><span class="line">    cout&lt;&lt;kangtuo()&lt;&lt;endl;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸康托逆展开"><a href="#🌸康托逆展开" class="headerlink" title="🌸康托逆展开"></a>🌸康托逆展开</h2><p>直接开栗子：</p><p>如果初始序列是12345（第一个），让你求第107个序列是什么。（按字典序递增）</p><p>这样计算：</p><p>先把107减1，因为康托展开里的初始序列编号为0<br>然后计算下后缀积：<br> 1    2    3   4   5<br> 5！ 4！ 3！ 2！1！ 0！<br>120  24   6   2   1   1</p><p>106 / 4! = 4 ······ 10 有4个比它小的所以因该是5  从（1，2，3，4，5）里选<br>10  / 3! = 1 ······ 4  有1个比它小的所以因该是2  从（1， 2， 3， 4）里选<br> 4   / 2! = 2 ······ 0  有2个比它小的所以因该是4  从（1， 3， 4）里选<br> 0   / 1! = 0 ······ 0  有0个比它小的所以因该是1  从（1，3）里选<br> 0   / 0! = 0 ······ 0  有0个比它小的所以因该是3  从（3）里选</p><p>所以编号107的是 52413</p><h3 id="康托逆展开代码："><a href="#康托逆展开代码：" class="headerlink" title="康托逆展开代码："></a>康托逆展开代码：</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** 这里以字符串进行展示  字符串可泛化性好 ******/</span></span><br><span class="line"> </span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*******打出1-n的阶乘表*******/</span></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> x, num;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jie_cheng</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 0的阶乘为1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) f[i] = f[i - <span class="number">1</span>] * i;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**************康托逆展开**************/</span></span><br><span class="line"> </span><br><span class="line">vector&lt;<span class="keyword">char</span>&gt; vec; <span class="comment">//存需要排列的字符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev_kangtuo</span><span class="params">(<span class="keyword">int</span> k)</span> <span class="comment">//输出序号为 k 的字符序列</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n = vec.size(), len = <span class="number">0</span>;</span><br><span class="line">    string ans = <span class="string">""</span>;</span><br><span class="line">    k--; <span class="comment">// 算的时候是按 12345 是第0位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++){</span><br><span class="line">        <span class="keyword">int</span> t = k / f[n - i]; <span class="comment">// 第 i 位需要 第 t + 1 大的数</span></span><br><span class="line">        k %= f[n - i];        <span class="comment">//剩下的几位需要提供的排列数</span></span><br><span class="line">        ans += vec[t] ; <span class="comment">//  vec[t] 就是第 t + 1 大的数</span></span><br><span class="line">        vec.erase(vec.begin() + t); </span><br><span class="line"><span class="comment">//用过就删了，不用vector用暴力也可以，就是说枚举，然后一个一个的比较大小，并记录有几个没用过的字符且字典序比它小</span></span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/***************************************/</span></span><br><span class="line"><span class="comment">// 假设展开后不超过10位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    jie_cheng(<span class="number">10</span>); <span class="comment">// 预处里好阶乘</span></span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;x); <span class="comment">// 输入需要逆展开的数字</span></span><br><span class="line">    <span class="comment">/************康托逆展开***********/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">if</span>(x / f[i] == <span class="number">0</span>) <span class="comment">// 求出 x 逆展开所需的最小的位数，方便下面的初始化</span></span><br><span class="line">    {</span><br><span class="line">    num = i;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) vec.push_back(i + <span class="string">'0'</span>); <span class="comment">//输入的位数只要不小于num就可以</span></span><br><span class="line">    rev_kangtuo(x);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸吉姆拉尔森公式"><a href="#🌸吉姆拉尔森公式" class="headerlink" title="🌸吉姆拉尔森公式"></a>🌸吉姆拉尔森公式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">whatday</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">1</span>) {</span><br><span class="line">y--;</span><br><span class="line">m = <span class="number">13</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">2</span>) {</span><br><span class="line">y--;</span><br><span class="line">m = <span class="number">14</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> (d + <span class="number">2</span> * m + <span class="number">3</span> * (m + <span class="number">1</span>) / <span class="number">5</span> + y + y / <span class="number">4</span> - y / <span class="number">100</span> + y / <span class="number">400</span>) % <span class="number">7</span> + <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸海伦公式"><a href="#🌸海伦公式" class="headerlink" title="🌸海伦公式"></a>🌸海伦公式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">三角形三边长a, b, c</span><br><span class="line">p = (a + b + c) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">area = Math.sqrt(p * (p - a) * (p - b) * (p - c))</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸素数"><a href="#🌸素数" class="headerlink" title="🌸素数"></a>🌸素数</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用API</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">n_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">BigInteger in = <span class="keyword">new</span> BigInteger(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line">in = in.nextProbablePrime();</span><br><span class="line">}</span><br><span class="line">System.out.println(in);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常规方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">n_prime1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">List&lt;Long&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">2</span>; list.size() &lt; n; i++) {</span><br><span class="line"><span class="keyword">if</span>(prime(i)) {</span><br><span class="line">list.add(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">System.out.println(list.get(n - <span class="number">1</span>));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">prime</span><span class="params">(<span class="keyword">long</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i * i &lt;= n;i += <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">n_prime2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line">arr[i] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) {<span class="comment">//可以只用根号n之前的数字去筛选</span></span><br><span class="line"><span class="keyword">if</span>(arr[i] == <span class="number">1</span>) { <span class="comment">//不加判断也是可以的，增加复杂度了，我们只需要在我们所认为的“素数”中筛选就可以了， 每个合数必有质因子</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i * i; j &lt;= n; j += i) { <span class="comment">//比如j = i * k(k &lt; i),那么j肯定被k筛掉了</span></span><br><span class="line">arr[j] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line"><span class="keyword">if</span>(arr[i] == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">100002</span>) {</span><br><span class="line">System.out.println(<span class="string">"-&gt;"</span>+i);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">k++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸日期类（SimpleDateFormat-Date"><a href="#🌸日期类（SimpleDateFormat-Date" class="headerlink" title="🌸日期类（SimpleDateFormat +Date)"></a>🌸日期类（SimpleDateFormat +Date)</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-mm-dd"</span>);</span><br><span class="line">        Date date1 = format.parse(<span class="string">"1921-7-23"</span>);</span><br><span class="line">        Date date2 = format.parse(<span class="string">"2020- 7-1"</span>);</span><br><span class="line">        <span class="keyword">int</span> a = (<span class="keyword">int</span>)((date2.getTime() - date1.getTime()) / <span class="number">1000</span> * <span class="number">60</span>);<span class="comment">//相隔多少分钟</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接使用 Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">36138</span> * <span class="number">24</span> * <span class="number">60L</span>;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(<span class="number">36138</span> * <span class="number">24</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="comment">// long型变量在定义的时候，如果不加“L”,则默认为int型变量</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date(<span class="number">21</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 1921</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">120</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 2020</span></span><br><span class="line">        <span class="keyword">long</span> time = date2.getTime() - date1.getTime();</span><br><span class="line">        System.out.println(time / (<span class="number">60000</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁"><a href="#🍁" class="headerlink" title="🍁"></a>🍁</h3><h4 id="🍂"><a href="#🍂" class="headerlink" title="🍂"></a>🍂</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🌸记录蓝桥杯javaB组历届决赛真题解题算法总结与对比&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="蓝桥杯" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
      <category term="总结" scheme="https://liudufu.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="蓝桥杯国赛真题" scheme="https://liudufu.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E7%9C%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥算法省赛真题总结</title>
    <link href="https://liudufu.github.io/Summary_of_provincial_competition/"/>
    <id>https://liudufu.github.io/Summary_of_provincial_competition/</id>
    <published>2020-11-08T13:39:55.000Z</published>
    <updated>2020-11-08T13:43:13.791Z</updated>
    
    <content type="html"><![CDATA[<p>🌸<strong>记录蓝桥杯javaB组省赛题目解题方法总结对比</strong></p><a id="more"></a><h2 id="🌸解题方法汇总（java-B组省赛）"><a href="#🌸解题方法汇总（java-B组省赛）" class="headerlink" title="🌸解题方法汇总（java B组省赛）"></a>🌸解题方法汇总（java B组省赛）</h2><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>第四届</td><td>日期(API)、吉姆拉尔森公式</td><td>暴力枚举</td><td>暴力深搜</td><td>递归、大数类</td><td>逻辑模拟</td><td>逻辑模拟</td><td>暴力查找(类集框架)</td><td>模拟过程</td><td>全排列、逻辑判断、逻辑枚举的条件判断，枚举所有情况</td><td>题意理解，思维的巧妙运用</td></tr><tr><td>第五届</td><td>数学逻辑</td><td>数学逻辑</td><td>字符串、暴力模拟</td><td>数学、奇偶数</td><td>数学逻辑</td><td>暴力枚举</td><td>全排列、逻辑检查</td><td>模拟过程</td><td>深度优先、过程模拟搜索、记忆化递归</td><td>-1</td></tr><tr><td>第六届</td><td>简单数学计算</td><td>暴力枚举</td><td>暴力枚举</td><td>模拟过程发现小技巧</td><td>全排列</td><td>数学规律</td><td>递归</td><td>模拟过程</td><td>递归、动态规划、矩阵快速幂</td><td>递归最多一万层</td></tr><tr><td>第七届</td><td>数学规律</td><td>暴力枚举</td><td>暴力全排列</td><td>组合，规律</td><td>递归、组合</td><td>暴力、全排列</td><td>组合、深搜、图、联通分量</td><td>首先暴力、暴力优化（四层到两层）哈希</td><td>递归模拟过程、细节很重要</td><td>-1</td></tr><tr><td>第八届</td><td>Excel、耐心敲代码计算、暴力计算器、</td><td>全排列</td><td>二维数组找规律</td><td>-1</td><td>过程模拟分析</td><td>动态规划</td><td>API、日期的细心判断（主要是细心找到每一个满足的条件）</td><td>动态规划、扩展欧几里得、完全背包</td><td>数学规律、模拟过程</td><td>暴力、前缀和优化、取模运算</td></tr><tr><td>第九届</td><td>日期、计算器（注意加一天）</td><td>暴力计算、勾股定理</td><td>大数类、数很大输入到文件</td><td>动态规划、递归、二分</td><td>随机快速排序、递归</td><td>暴力、优化（二分）、（双指针）</td><td>画图、画过程模拟、找出数学规律、等差数列求和、绝对值的消去</td><td>面向对象的思维模拟、类的自定义排序、思维逻辑的严密性</td><td>暴力深搜、DFS查找联通分量的个数</td><td>-1（乘法逆元）</td></tr><tr><td>第十届</td><td>综合分析、求最大值</td><td>暴力求子串、Set集合</td><td>暴力求值、有坑（只需要关注数的后四位，不然数字太大存不了）</td><td>暴力分解、条件判断</td><td>求最短路径、广度优先、深度优先、节点判断</td><td>暴力破解</td><td>模拟过程、注意合理运用变量和数组，利用二维数组和多个一维数组可以代替复杂的数据结构</td><td>逻辑分析与严密性、字符串正则以及API的使用</td><td>逻辑思维的分析与严密性、需要去考虑繁杂的所有可能的情况然后写出结果</td><td>-1</td></tr><tr><td>第十一届</td><td>手工计算、代码计算时注意减法时的边界不能减到负数</td><td>日期、计算器、日期类</td><td>数学求最值、求算数不等式相等时的边界情况</td><td>-1（找规律，用代码去模拟题目要求程序计算的过程）</td><td>动态规划、找出存放规律与状态的转移方程</td><td>暴力取模、优化（位运算&gt;&gt;取代 / ）(即n = n&gt;&gt; 1 相当于 n = n / 2)</td><td>熟练使用API、StringBuilder以及字符串的判断、总的来说就是暴力模拟</td><td>深度优先搜索、动态规划</td><td>暴力拼接（双重for）、优化（二维数组、位数取取余等）</td><td>-1</td></tr><tr><td>第十二届</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="🌸黄金分割数与斐波那契数列的关系"><a href="#🌸黄金分割数与斐波那契数列的关系" class="headerlink" title="🌸黄金分割数与斐波那契数列的关系"></a>🌸黄金分割数与斐波那契数列的关系</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">比较简单的一种是用连分数：</span><br><span class="line">                                   1</span><br><span class="line">    黄金数 = ------------------------------</span><br><span class="line">                                     1</span><br><span class="line">                    1 + ---------------------</span><br><span class="line">                                        1</span><br><span class="line">                           1 + -------------</span><br><span class="line">                                          1</span><br><span class="line">                                 1 + -------</span><br><span class="line">                                       1 + ...</span><br><span class="line">                         </span><br><span class="line">    这个连分数计算的“层数”越多，它的值越接近黄金分割数。</span><br><span class="line">    请你利用这一特性，求出黄金分割数的足够精确值，要求四舍五入到小数点后100位。</span><br><span class="line">    小数点后3位的值为：0.618</span><br><span class="line">    小数点后4位的值为：0.6180</span><br><span class="line">    小数点后5位的值为：0.61803</span><br><span class="line">    小数点后7位的值为：0.6180340</span><br></pre></td></tr></tbody></table></figure><p>可以分析得出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第二层      1/2    后两位</span><br><span class="line">第三层      2/3    后三位</span><br><span class="line">第四层      3/5后四位</span><br><span class="line">第五层      5/8后五位</span><br><span class="line">.....</span><br><span class="line">以此类推</span><br><span class="line">即后100位为稳定的100多位的斐波那契数相除，则可以得出代码</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">          </span><br><span class="line">        BigInteger a = BigInteger.ONE;</span><br><span class="line">        BigInteger b = BigInteger.ONE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; <span class="number">500</span>; i++) {</span><br><span class="line">        BigInteger t = b;</span><br><span class="line">        b = a.add(b);</span><br><span class="line">        a = t;</span><br><span class="line">        }</span><br><span class="line">        BigDecimal divide = <span class="keyword">new</span> BigDecimal(a, <span class="number">110</span>).divide(<span class="keyword">new</span> BigDecimal(b, <span class="number">110</span>), BigDecimal.ROUND_HALF_DOWN);</span><br><span class="line">        System.out.println(divide.toPlainString().substring(<span class="number">0</span>, <span class="number">103</span>));</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">    <span class="comment">//求斐波那契</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> BigDecimal <span class="title">fb</span><span class="params">(<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">        BigDecimal a = BigDecimal.ONE;</span><br><span class="line">        BigDecimal b = BigDecimal.ONE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            BigDecimal t = b;</span><br><span class="line">            b = a.add(b);</span><br><span class="line">            a=t;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸圆周率与连分数"><a href="#🌸圆周率与连分数" class="headerlink" title="🌸圆周率与连分数"></a>🌸圆周率与连分数</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> 4                               1</span><br><span class="line">----   = 1 +  ------------------------------</span><br><span class="line"> N(圆周率)                            9</span><br><span class="line">                 1 + ---------------------</span><br><span class="line">                                       25</span><br><span class="line">                        2 + -----------------</span><br><span class="line">                                         </span><br><span class="line">                              2 + .............</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">111</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">10000</span>; n&gt;=<span class="number">0</span>; n--){</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">        x = <span class="number">2</span> + (i*i / x);</span><br><span class="line">    }</span><br><span class="line">   </span><br><span class="line">    System.out.println(String.format(<span class="string">"%.4f"</span>, <span class="number">4</span>/ (x - <span class="number">1</span>)));</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸吉姆拉尔森公式"><a href="#🌸吉姆拉尔森公式" class="headerlink" title="🌸吉姆拉尔森公式"></a>🌸吉姆拉尔森公式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">whatday</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">1</span>) {</span><br><span class="line">y--;</span><br><span class="line">m = <span class="number">13</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">2</span>) {</span><br><span class="line">y--;</span><br><span class="line">m = <span class="number">14</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> (d + <span class="number">2</span> * m + <span class="number">3</span> * (m + <span class="number">1</span>) / <span class="number">5</span> + y + y / <span class="number">4</span> - y / <span class="number">100</span> + y / <span class="number">400</span>) % <span class="number">7</span> + <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸复数幂（复数的阶乘）-了解打印流的使用文本"><a href="#🌸复数幂（复数的阶乘）-了解打印流的使用文本" class="headerlink" title="🌸复数幂（复数的阶乘）(了解打印流的使用文本)"></a>🌸复数幂（复数的阶乘）(了解打印流的使用文本)</h2><p>复数计算的规律  尝试用 (a+bi)<em>(c+di) = (a</em>c - b<em>d) + (a</em>d + b*c)i </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>{</span><br><span class="line"><span class="comment">//System.out.println(getNum(new BigInteger("2"), new BigInteger("3"), new BigInteger("2"), new BigInteger("3")));</span></span><br><span class="line"></span><br><span class="line">BigInteger a = <span class="keyword">new</span> BigInteger(<span class="string">"2"</span>);</span><br><span class="line">BigInteger b = <span class="keyword">new</span> BigInteger(<span class="string">"3"</span>);</span><br><span class="line">BigInteger c = <span class="keyword">new</span> BigInteger(<span class="string">"2"</span>);</span><br><span class="line">BigInteger d = <span class="keyword">new</span> BigInteger(<span class="string">"3"</span>);</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">BigInteger shi;</span><br><span class="line">BigInteger xu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n &lt; <span class="number">123456</span>) {</span><br><span class="line">shi = a.multiply(c).subtract((b.multiply(d)));</span><br><span class="line">xu = a.multiply(d).add(b.multiply(c));</span><br><span class="line">n++;</span><br><span class="line">a = shi;</span><br><span class="line">b = xu;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b.compareTo(<span class="keyword">new</span> BigInteger(<span class="string">"0"</span>)) == <span class="number">1</span>) {</span><br><span class="line">System.out.println(a + <span class="string">"+"</span> + b + <span class="string">"i"</span>);</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(b.compareTo(<span class="keyword">new</span> BigInteger(<span class="string">"0"</span>)) == <span class="number">0</span>) {</span><br><span class="line">System.out.println(a + <span class="string">""</span>);</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line">System.out.println(a + <span class="string">""</span> + b + <span class="string">"i"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PrintStream out = System.out;</span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> File(<span class="string">"ans.txt"</span>));</span><br><span class="line">System.setOut(ps);;<span class="comment">//输出在ans.txt</span></span><br><span class="line">System.out.println(a.toString() +b.toString() + <span class="string">"i"</span>);</span><br><span class="line">System.setOut(out);</span><br><span class="line">System.out.println(a.toString() + b.toString() + <span class="string">"i"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸扔鸡蛋问题（摔手机）（面试题）（动态规划）"><a href="#🌸扔鸡蛋问题（摔手机）（面试题）（动态规划）" class="headerlink" title="🌸扔鸡蛋问题（摔手机）（面试题）（动态规划）"></a>🌸扔鸡蛋问题（摔手机）（面试题）（动态规划）</h2><p>你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。</p><p>每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</p><p>你知道存在楼层 F ，满足 0 &lt;= F &lt;= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。</p><p>每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 &lt;= X &lt;= N）。</p><p>你的目标是确切地知道 F 的值是多少。</p><p>无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 鸡蛋解法力扣 </span>{</span><br><span class="line">    <span class="keyword">static</span> Integer[][] memo = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">superEggDrop</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>{</span><br><span class="line">        memo = <span class="keyword">new</span> Integer[K+<span class="number">1</span>][N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> dp(K,N);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *当前K个鸡蛋共有N层楼状态时 返回这个状态下确定 F的值的最小移动次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">        <span class="comment">//base case 层数N等于0时不需要扔鸡蛋,当鸡蛋数K为1时，只能每层逐个尝试剩下所有楼层</span></span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)<span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加一个备忘录 消除之前算过的重叠子问题</span></span><br><span class="line">        <span class="keyword">if</span>(memo[k][n]!=<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> memo[k][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> tmp = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//第一种 从第1层楼到第n层楼每层楼开始逐个尝试作为切入点 (会超时)</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++){</span><br><span class="line">             <span class="comment">//当选择在第i层楼扔了鸡蛋之后 可能出现鸡蛋碎了和鸡蛋没碎两种情况：</span></span><br><span class="line">             <span class="comment">//当鸡蛋碎了 问题状态转嫁为求k-1个鸡蛋 搜索的楼层区间变为1~i-1共i-1层楼时求解</span></span><br><span class="line">             <span class="keyword">int</span> eggBreak=dp(k-<span class="number">1</span>,i-<span class="number">1</span>);</span><br><span class="line">             <span class="comment">//当鸡蛋没碎 问题状态转嫁为鸡蛋的个数K不变 搜索楼层区间变为i+1~N共N-i层楼时求解</span></span><br><span class="line">             <span class="keyword">int</span> eggUnBreak=dp(k,n-i);</span><br><span class="line">             <span class="comment">//最终以i层为切入点求解的答案 为两种状态的最坏情况 并加上i层时操作1 并更新最小值</span></span><br><span class="line">             tmp = Math.min(tmp,Math.max(eggBreak,eggUnBreak)+<span class="number">1</span>);</span><br><span class="line">         }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种 利用二分查找的方式直接找到对应点(AC通过)</span></span><br><span class="line">        <span class="comment">//第一种线性逐个尝试切入点 然后求每个切入点两种状态的较大值 再求这些最大值之中的最小值 其实就是求这两条单调递增和单调递减直线的交点 相当于求上半部V形山谷值 二分查找来快速寻找这个点</span></span><br><span class="line"><span class="comment">//        int lo=1,hi =n;</span></span><br><span class="line"><span class="comment">//        while(lo&lt;=hi){</span></span><br><span class="line"><span class="comment">//            int mid =(lo+hi)/2;</span></span><br><span class="line"><span class="comment">//            int eggBreak = dp(k-1,mid-1);</span></span><br><span class="line"><span class="comment">//            int eggUnBreak = dp(k,n-mid);</span></span><br><span class="line"><span class="comment">//            if(eggBreak&gt;eggUnBreak){</span></span><br><span class="line"><span class="comment">//                hi = mid-1;</span></span><br><span class="line"><span class="comment">//                tmp = Math.min(tmp,eggBreak+1);</span></span><br><span class="line"><span class="comment">//            }else{</span></span><br><span class="line"><span class="comment">//                lo = mid+1;</span></span><br><span class="line"><span class="comment">//                tmp = Math.min(tmp,eggUnBreak+1);</span></span><br><span class="line"><span class="comment">//            }</span></span><br><span class="line">    <span class="comment">//    }</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加到备忘录里</span></span><br><span class="line">        memo[k][n]=tmp;</span><br><span class="line">        <span class="comment">//返回当前k个鸡蛋n层楼时求解的子问题的结果</span></span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(dp(<span class="number">3</span>,<span class="number">1000</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。</p><p>各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，并且评定出一个耐摔指数来，之后才允许上市流通。</p><p>x星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。</p><p>如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。</p><p>特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。</p><p>如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n</p><p>为了减少测试次数，从每个厂家抽样3部手机参加测试。</p><p>某次测试的塔高为1000层，如果我们总是采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？</p><p>请填写这个最多测试次数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>{</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10000</span>;j++)</span><br><span class="line">                memo[i][j] = <span class="number">99999999</span>;<span class="comment">//找最小,初始化INF</span></span><br><span class="line">        System.out.println(f(<span class="number">3</span>,<span class="number">1000</span>));</span><br><span class="line">        <span class="comment">//f(k,n)  当前的鸡蛋数  k</span></span><br><span class="line">        <span class="comment">//        需要测试的楼层数  n</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] memo = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="comment">//当鸡蛋数只有1时，只能线性扫描所有的楼层 n 有多少层就得扔多少次 注意题目条件是运气差。</span></span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="comment">//当楼层数0是 没法扔鸡蛋</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(memo[k][n]!=<span class="number">99999999</span>)  <span class="comment">//避免重复计算</span></span><br><span class="line">            <span class="keyword">return</span> memo[k][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">99999999</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {  <span class="comment">//穷举所有的可能选择</span></span><br><span class="line">            <span class="comment">//当选择在第i层楼扔了鸡蛋之后 可能出现鸡蛋碎了和鸡蛋没碎两种情况：</span></span><br><span class="line">            <span class="comment">//当鸡蛋碎了 问题状态转嫁为求k-1个鸡蛋 搜索的楼层区间变为1~i-1共i-1层楼时求解</span></span><br><span class="line">            <span class="keyword">int</span> eggBreak=f(k-<span class="number">1</span>,i-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//当鸡蛋没碎 问题状态转嫁为鸡蛋的个数K不变 搜索楼层区间变为i+1~N共N-i层楼时求解</span></span><br><span class="line">            <span class="keyword">int</span> eggUnBreak=f(k,n-i);</span><br><span class="line">            <span class="comment">//最终以i层为切入点求解的答案 为两种状态的最坏情况 并加上i层时操作1 并更新最小值</span></span><br><span class="line"></span><br><span class="line">            result= Math.min(result,</span><br><span class="line">                    Math.max(</span><br><span class="line">                            eggBreak,eggUnBreak</span><br><span class="line">                    )+<span class="number">1</span>    <span class="comment">//1表示在i层时要扔一次</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        memo[k][n]=result;</span><br><span class="line">        <span class="keyword">return</span> memo[k][n];</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸日期类（SimpleDateFormat-Date"><a href="#🌸日期类（SimpleDateFormat-Date" class="headerlink" title="🌸日期类（SimpleDateFormat +Date)"></a>🌸日期类（SimpleDateFormat +Date)</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-mm-dd"</span>);</span><br><span class="line">        Date date1 = format.parse(<span class="string">"1921-7-23"</span>);</span><br><span class="line">        Date date2 = format.parse(<span class="string">"2020- 7-1"</span>);</span><br><span class="line">        <span class="keyword">int</span> a = (<span class="keyword">int</span>)((date2.getTime() - date1.getTime()) / <span class="number">1000</span> * <span class="number">60</span>);<span class="comment">//相隔多少分钟</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接使用 Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">36138</span> * <span class="number">24</span> * <span class="number">60L</span>;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(<span class="number">36138</span> * <span class="number">24</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="comment">// long型变量在定义的时候，如果不加“L”,则默认为int型变量</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date(<span class="number">21</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 1921</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">120</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 2020</span></span><br><span class="line">        <span class="keyword">long</span> time = date2.getTime() - date1.getTime();</span><br><span class="line">        System.out.println(time / (<span class="number">60000</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁"><a href="#🍁" class="headerlink" title="🍁"></a>🍁</h3><h4 id="🍂-fff"><a href="#🍂-fff" class="headerlink" title="🍂 fff"></a>🍂 fff</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🌸&lt;strong&gt;记录蓝桥杯javaB组省赛题目解题方法总结对比&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="蓝桥杯" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
      <category term="总结" scheme="https://liudufu.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="蓝桥杯javaB组省赛" scheme="https://liudufu.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AFjavaB%E7%BB%84%E7%9C%81%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode股票问题系列通解</title>
    <link href="https://liudufu.github.io/general_solutions_to_stock_problems/"/>
    <id>https://liudufu.github.io/general_solutions_to_stock_problems/</id>
    <published>2020-11-08T13:37:04.000Z</published>
    <updated>2020-11-08T13:39:03.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🍁说明"><a href="#🍁说明" class="headerlink" title="🍁说明"></a>🍁说明</h3><p>原文出处：<a href="https://leetcode-cn.com/circle/article/qiAgHn/" target="_blank" rel="noopener">股票问题</a></p><h2 id="🌸前言"><a href="#🌸前言" class="headerlink" title="🌸前言"></a>🌸前言</h2><p>股票问题一共有六道题，链接如下：</p><ul><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">121.买卖股票的最佳时机</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">122.买卖股票的最佳时机 II</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">123. 买卖股票的最佳时机 III</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="noopener">124.买卖股票的最佳时机 IV</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">125.最佳买卖股票时机含冷冻期</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" target="_blank" rel="noopener">126.买卖股票的最佳时机含手续费</a></li></ul><a id="more"></a><p>每个问题都有优质的题解，但是大多数题解没有建立起这些问题之间的联系，也没有给出股票问题系列的通解。这篇文章给出适用于全部股票问题的通解，以及对于每个特定问题的特解。</p><h2 id="🍁通用情况"><a href="#🍁通用情况" class="headerlink" title="🍁通用情况"></a>🍁通用情况</h2><p>这个想法基于如下问题：<strong>给定一个表示每天股票价格的数组，什么因素决定了可以获得的最大收益？</strong></p><p>相信大多数人可以很快给出答案，例如「在哪些天进行交易以及允许多少次交易」。这些因素当然重要，在问题描述中也有这些因素。然而还有一个隐藏但是关键的因素决定了最大收益，下文将阐述这一点。</p><p>首先介绍一些符号：</p><ul><li>用 <code>n</code> 表示股票价格数组的长度；<br>用 <code>i</code> 表示第 i 天（i 的取值范围是 0 到 n - 1）；<br>用 <code>k</code> 表示允许的最大交易次数；<br>用 <code>T[i][k]</code> 表示在第 <code>i</code> 天结束时，最多进行 <code>k</code> 次交易的情况下可以获得的最大收益。</li></ul><p>基准情况是显而易见的：<code>T[-1][k] = T[i][0] = 0</code>，表示没有进行股票交易时没有收益（注意第一天对应 <code>i = 0</code>，因此 <code>i = -1</code> 表示没有股票交易）。现在如果可以将 <code>T[i][k]</code> 关联到子问题，例如 <code>T[i - 1][k]、T[i][k - 1]、T[i - 1][k - 1]</code> 等子问题，就能得到状态转移方程，并对这个问题求解。如何得到状态转移方程呢？</p><p>最直接的办法是看第 <code>i</code> 天可能的操作。有多少个选项？答案是三个：<strong>买入、卖出、休息</strong>。应该选择哪个操作？答案是：并不知道哪个操作是最好的，但是可以通过计算得到选择每个操作可以得到的最大收益。假设没有别的限制条件，则可以尝试每一种操作，并选择可以最大化收益的一种操作。但是，题目中确实有限制条件，规定不能同时进行多次交易，因此如果决定在第 <code>i</code> 天<strong>买入</strong>，在买入之前必须持有 0 份股票，如果决定在第 <code>i</code> 天<strong>卖出</strong>，在卖出之前必须恰好持有 1 份股票。持有股票的数量是上文提及到的隐藏因素，该因素影响第 i 天可以进行的操作，进而影响最大收益。</p><p>因此对 <code>T[i][k]</code> 的定义需要分成两项：</p><ul><li><code>T[i][k][0]</code> 表示在第 <code>i</code> 天结束时，<strong>最多</strong>进行 <code>k</code> 次交易且在进行操作后持有 0 份股票的情况下可以获得的最大收益；</li><li><code>T[i][k][1]</code> 表示在第 <code>i</code> 天结束时，<strong>最多</strong>进行 <code>k</code> 次交易且在进行操作后持有 1 份股票的情况下可以获得的最大收益。</li></ul><p>使用新的状态表示之后，可以得到基准情况和状态转移方程。</p><p>基准情况：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[-1][k][0] = 0, T[-1][k][1] = -Infinity</span><br><span class="line">T[i][0][0] = 0, T[i][0][1] = -Infinity</span><br></pre></td></tr></tbody></table></figure><p>状态转移方程：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k - 1][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>基准情况中，<code>T[-1][k][0] = T[i][0][0] = 0</code> 的含义和上文相同，<code>T[-1][k][1] = T[i][0][1] = -Infinity</code> 的含义是在没有进行股票交易时不允许持有股票。</p><p>对于状态转移方程中的 <code>T[i][k][0]</code>，第 <code>i</code> 天进行的操作只能是休息或卖出，因为在第 <code>i</code> 天结束时持有的股票数量是 0。<code>T[i - 1][k][0]</code> 是休息操作可以得到的最大收益，<code>T[i - 1][k][1] + prices[i]</code> 是卖出操作可以得到的最大收益。注意到允许的最大交易次数是不变的，因为每次交易包含两次成对的操作，买入和卖出。只有买入操作会改变允许的最大交易次数。</p><p>对于状态转移方程中的 <code>T[i][k][1]</code>，第 <code>i</code> 天进行的操作只能是休息或买入，因为在第 <code>i</code> 天结束时持有的股票数量是 1。<code>T[i - 1][k][1]</code> 是休息操作可以得到的最大收益，<code>T[i - 1][k - 1][0] - prices[i]</code> 是买入操作可以得到的最大收益。注意到允许的最大交易次数减少了一次，因为每次买入操作会使用一次交易。</p><p>为了得到最后一天结束时的最大收益，可以遍历股票价格数组，根据状态转移方程计算 <code>T[i][k][0]</code> 和 <code>T[i][k][1]</code> 的值。最终答案是 <code>T[n - 1][k][0]</code>，因为结束时持有 0 份股票的收益一定大于持有 1 份股票的收益。</p><h2 id="🍁应用于特殊情况"><a href="#🍁应用于特殊情况" class="headerlink" title="🍁应用于特殊情况"></a>🍁应用于特殊情况</h2><p>上述六个股票问题是根据 <code>k</code> 的值进行分类的，其中 <code>k</code> 是允许的最大交易次数。最后两个问题有附加限制，包括「冷冻期」和「手续费」。通解可以应用于每个股票问题。</p><h4 id="情况一：k-1"><a href="#情况一：k-1" class="headerlink" title="情况一：k = 1"></a><strong>情况一：k = 1</strong></h4><p>情况一对应的题目是<strong>「121. 买卖股票的最佳时机」</strong>。</p><p>对于情况一，每天有两个未知变量：<code>T[i][1][0]</code> 和 <code>T[i][1][1]</code>，状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][1][0] = max(T[i - 1][1][0], T[i - 1][1][1] + prices[i])</span><br><span class="line">T[i][1][1] = max(T[i - 1][1][1], T[i - 1][0][0] - prices[i]) = max(T[i - 1][1][1], -prices[i])</span><br></pre></td></tr></tbody></table></figure><p>第二个状态转移方程利用了 <code>T[i][0][0] = 0</code>。</p><p>根据上述状态转移方程，可以写出时间复杂度为 O(n)和空间复杂度为 O(n) 的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天的最大收益相关，空间复杂度可以降到 O(1)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            profit0 = Math.max(profit0, profit1 + prices[i]);</span><br><span class="line">            profit1 = Math.max(profit1, -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在对上述解法进行分析。对于循环中的部分，<code>profit1</code> 实际上只是表示到第 <code>i</code> 天的股票价格的相反数中的最大值，或者等价地表示到第 <code>i</code> 天的股票价格的最小值。对于 <code>profit0</code>，只需要决定卖出和休息中的哪项操作可以得到更高的收益。如果进行卖出操作，则买入股票的价格为 <code>profit1</code>，即第 i 天之前（不含第 <code>i</code> 天）的最低股票价格。这正是现实中为了获得最大收益会做的事情。但是这种做法不是唯一适用于这种情况的解决方案。读者可能在 这里 找到别的好的解决方案。</p><h4 id="情况二：k-为正无穷"><a href="#情况二：k-为正无穷" class="headerlink" title="情况二：k 为正无穷"></a><strong>情况二：k 为正无穷</strong></h4><p>情况二对应的题目是<strong>「122. 买卖股票的最佳时机 II」。</strong></p><p>如果 k 为正无穷，则 <code>k</code> 和 k - 1 可以看成是相同的，因此有 <code>T[i - 1][k - 1][0] = T[i - 1][k][0]</code> 和 <code>T[i - 1][k - 1][1] = T[i - 1][k][1]</code>。每天仍有两个未知变量：<code>T[i][k][0]</code> 和 <code>T[i][k][1]</code>，其中 <code>~k~</code> 为正无穷，状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k - 1][0] - prices[i]) = max(T[i - 1][k][1], T[i - 1][k][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>第二个状态转移方程利用了 <code>T[i - 1][k - 1][0] = T[i - 1][k][0]</code>。</p><p>根据上述状态转移方程，可以写出时间复杂度为 O(n) 和空间复杂度为 O(n) 的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天的最大收益相关，空间复杂度可以降到 O(1)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">int</span> newProfit0 = Math.max(profit0, profit1 + prices[i]);</span><br><span class="line">            <span class="keyword">int</span> newProfit1 = Math.max(profit1, profit0 - prices[i]);</span><br><span class="line">            profit0 = newProfit0;</span><br><span class="line">            profit1 = newProfit1;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个解法提供了获得最大收益的贪心策略：可能的情况下，在每个局部最小值买入股票，然后在之后遇到的第一个局部最大值卖出股票。这个做法等价于找到股票价格数组中的递增子数组，对于每个递增子数组，在开始位置买入并在结束位置卖出。可以看到，这和累计收益是相同的，只要这样的操作的收益为正。</p><h4 id="情况三：k-2"><a href="#情况三：k-2" class="headerlink" title="情况三：k = 2"></a>情况三：k = 2</h4><p>情况三对应的题目是<strong>「123. 买卖股票的最佳时机 III」</strong>。</p><p>情况三和情况一相似，区别之处是，对于情况三，每天有四个未知变量：<code>T[i][1][0]、T[i][1][1]、T[i][2][0]、T[i][2][1]</code>，状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T[i][2][0] = max(T[i - 1][2][0], T[i - 1][2][1] + prices[i])</span><br><span class="line">T[i][2][1] = max(T[i - 1][2][1], T[i - 1][1][0] - prices[i])</span><br><span class="line">T[i][1][0] = max(T[i - 1][1][0], T[i - 1][1][1] + prices[i])</span><br><span class="line">T[i][1][1] = max(T[i - 1][1][1], T[i - 1][0][0] - prices[i]) = max(T[i - 1][1][1], -prices[i])</span><br></pre></td></tr></tbody></table></figure><p>第四个状态转移方程利用了 <code>T[i][0][0] = 0</code>。</p><p>根据上述状态转移方程，可以写出时间复杂度为 O(n)和空间复杂度为 O(n)的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">2</span>][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">2</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">2</span>][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天的最大收益相关，空间复杂度可以降到 O(1)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profitOne0 = <span class="number">0</span>, profitOne1 = -prices[<span class="number">0</span>], profitTwo0 = <span class="number">0</span>, profitTwo1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            profitTwo0 = Math.max(profitTwo0, profitTwo1 + prices[i]);</span><br><span class="line">            profitTwo1 = Math.max(profitTwo1, profitOne0 - prices[i]);</span><br><span class="line">            profitOne0 = Math.max(profitOne0, profitOne1 + prices[i]);</span><br><span class="line">            profitOne1 = Math.max(profitOne1, -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profitTwo0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="情况四：k-为任意值"><a href="#情况四：k-为任意值" class="headerlink" title="情况四：k 为任意值"></a>情况四：k 为任意值</h4><p>情况四对应的题目是<strong>「188. 买卖股票的最佳时机 IV」。</strong></p><p>情况四是最通用的情况，对于每一天需要使用不同的 <code>k</code> 值更新所有的最大收益，对应持有 0 份股票或 1 份股票。如果 <code>k</code> 超过一个临界值，最大收益就不再取决于允许的最大交易次数，而是取决于股票价格数组的长度，因此可以进行优化。那么这个临界值是什么呢？</p><p>一个有收益的交易至少需要两天（在前一天买入，在后一天卖出，前提是买入价格低于卖出价格）。如果股票价格数组的长度为 n，则有收益的交易的数量最多为 n / 2（整数除法）。因此 k 的临界值是 <code>n / 2</code>。如果给定的 k 不小于临界值，即 <code>k &gt;= n / 2</code>，则可以将 k 扩展为正无穷，此时问题等价于情况二。</p><p>根据状态转移方程，可以写出时间复杂度为 O(nk) 和空间复杂度为 O(nk) 的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= length / <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> maxProfit(prices);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) {</span><br><span class="line">            dp[<span class="number">0</span>][i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            dp[<span class="number">0</span>][i][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt; <span class="number">0</span>; j--) {</span><br><span class="line">                dp[i][j][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][j][<span class="number">0</span>], dp[i - <span class="number">1</span>][j][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                dp[i][j][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][j][<span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][k][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天的最大收益相关，空间复杂度可以降到 O(k)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= length / <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> maxProfit(prices);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            dp[i][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt; <span class="number">0</span>; j--) {</span><br><span class="line">                dp[j][<span class="number">0</span>] = Math.max(dp[j][<span class="number">0</span>], dp[j][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                dp[j][<span class="number">1</span>] = Math.max(dp[j][<span class="number">1</span>], dp[j - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[k][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">int</span> newProfit0 = Math.max(profit0, profit1 + prices[i]);</span><br><span class="line">            <span class="keyword">int</span> newProfit1 = Math.max(profit1, profit0 - prices[i]);</span><br><span class="line">            profit0 = newProfit0;</span><br><span class="line">            profit1 = newProfit1;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果不根据 <code>k</code> 的值进行优化，在 <code>k</code> 的值很大的时候会超出时间限制。</p><p>该解法与 <a href="https://discuss.leetcode.com/topic/8984/a-concise-dp-solution-in-java" target="_blank" rel="noopener">这里</a> 的解法相似。对交易次数的循环使用反向循环是为了避免使用临时变量。</p><h4 id="情况五：k-为正无穷但有冷却时间"><a href="#情况五：k-为正无穷但有冷却时间" class="headerlink" title="情况五：k 为正无穷但有冷却时间"></a>情况五：k 为正无穷但有冷却时间</h4><p>情况五对应的题目是<strong>「309. 最佳买卖股票时机含冷冻期」。</strong></p><p>由于具有相同的 <code>k</code> 值，因此情况五和情况二非常相似，不同之处在于情况五有「冷却时间」的限制，因此需要对状态转移方程进行一些修改。</p><p>情况二的状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>但是在有「冷却时间」的情况下，如果在第 <code>i - 1</code> 天卖出了股票，就不能在第 i 天买入股票。因此，如果要在第 i 天买入股票，第二个状态转移方程中就不能使用 <code>T[i - 1][k][0]</code>，而应该使用 <code>T[i - 2][k][0]</code>。状态转移方程中的别的项保持不变，新的状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 2][k][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>根据上述状态转移方程，可以写出时间复杂度为 O(n) 和空间复杂度为 O(n)的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], (i &gt;= <span class="number">2</span> ? dp[i - <span class="number">2</span>][<span class="number">0</span>] : <span class="number">0</span>) - prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天和第 <code>i - 2</code> 天的最大收益相关，空间复杂度可以降到 O(1)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> prevProfit0 = <span class="number">0</span>, profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">int</span> nextProfit0 = Math.max(profit0, profit1 + prices[i]);</span><br><span class="line">            <span class="keyword">int</span> nextProfit1 = Math.max(profit1, prevProfit0 - prices[i]);</span><br><span class="line">            prevProfit0 = profit0;</span><br><span class="line">            profit0 = nextProfit0;</span><br><span class="line">            profit1 = nextProfit1;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.com/dietpepsi" target="_blank" rel="noopener">dietpepsi</a> 在 <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75927/share-my-thinking-process" target="_blank" rel="noopener">这里</a> 分享了一个很好的解法，并加入了思考过程，该解法和上面的解法是相同的。</p><h4 id="情况六：k-为正无穷但有手续费"><a href="#情况六：k-为正无穷但有手续费" class="headerlink" title="情况六：k 为正无穷但有手续费"></a>情况六：k 为正无穷但有手续费</h4><p>情况六对应的题目是<strong>「714. 买卖股票的最佳时机含手续费」。</strong></p><p>由于具有相同的 <code>k</code> 值，因此情况六和情况二非常相似，不同之处在于情况六有「手续费」，因此需要对状态转移方程进行一些修改。</p><p>情况二的状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>由于需要对每次交易付手续费，因此在每次买入或卖出股票之后的收益需要扣除手续费，新的状态转移方程有两种表示方法。</p><p>第一种表示方法，在每次买入股票时扣除手续费：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k][0] - prices[i] - fee)</span><br></pre></td></tr></tbody></table></figure><p>第二种表示方法，在每次卖出股票时扣除手续费：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i] - fee)</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>根据上述状态转移方程，可以写出时间复杂度为 O(n) 和空间复杂度为 O(n)的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>] - fee;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i] - fee);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天的最大收益相关，空间复杂度可以降到 O(1)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>] - fee;</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">int</span> newProfit0 = Math.max(profit0, profit1 + prices[i]);</span><br><span class="line">            <span class="keyword">int</span> newProfit1 = Math.max(profit1, profit0 - prices[i] - fee);</span><br><span class="line">            profit0 = newProfit0;</span><br><span class="line">            profit1 = newProfit1;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">int</span> newProfit0 = Math.max(profit0, profit1 + prices[i] - fee);</span><br><span class="line">            <span class="keyword">int</span> newProfit1 = Math.max(profit1, profit0 - prices[i]);</span><br><span class="line">            profit0 = newProfit0;</span><br><span class="line">            profit1 = newProfit1;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁三、总结"><a href="#🍁三、总结" class="headerlink" title="🍁三、总结"></a>🍁三、总结</h3><p>总而言之，股票问题最通用的情况由三个特征决定：当前的天数 <code>i</code>、允许的最大交易次数 <code>k</code> 以及每天结束时持有的股票数。这篇文章阐述了最大利润的状态转移方程和终止条件，由此可以得到时间复杂度为 O(nk) 和空间复杂度为 O(k) 的解法。该解法可以应用于六个问题，对于最后两个问题，需要将状态转移方程进行一些修改。这里推荐 <a href="https://leetcode.com/peterleetcode/" target="_blank" rel="noopener">peterleetcode</a> 的 <a href="https://discuss.leetcode.com/topic/4766/a-clean-dp-solution-which-generalizes-to-k-transactions" target="_blank" rel="noopener">解法</a>，该解法可以推广到任意的 <code>k</code> 值，感兴趣的读者可以进行阅读。</p><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;🍁说明&quot;&gt;&lt;a href=&quot;#🍁说明&quot; class=&quot;headerlink&quot; title=&quot;🍁说明&quot;&gt;&lt;/a&gt;🍁说明&lt;/h3&gt;&lt;p&gt;原文出处：&lt;a href=&quot;https://leetcode-cn.com/circle/article/qiAgHn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;股票问题&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;🌸前言&quot;&gt;&lt;a href=&quot;#🌸前言&quot; class=&quot;headerlink&quot; title=&quot;🌸前言&quot;&gt;&lt;/a&gt;🌸前言&lt;/h2&gt;&lt;p&gt;股票问题一共有六道题，链接如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;121.买卖股票的最佳时机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;122.买卖股票的最佳时机 II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;123. 买卖股票的最佳时机 III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;124.买卖股票的最佳时机 IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;125.最佳买卖股票时机含冷冻期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;126.买卖股票的最佳时机含手续费&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="动态规划" scheme="https://liudufu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="股票问题" scheme="https://liudufu.github.io/tags/%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/"/>
    
      <category term="动态规划的优化" scheme="https://liudufu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>动态规划_leetcode.121.买卖股票的最佳时期</title>
    <link href="https://liudufu.github.io/The_best_time_to_buy_and_sell_stocks/"/>
    <id>https://liudufu.github.io/The_best_time_to_buy_and_sell_stocks/</id>
    <published>2020-11-08T13:34:39.000Z</published>
    <updated>2020-11-08T13:36:44.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p><p>注意：你不能在买入股票前卖出股票。</p><a id="more"></a><p>示例 1:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0</span><br></pre></td></tr></tbody></table></figure><h2 id="解法一：暴力解法"><a href="#解法一：暴力解法" class="headerlink" title="解法一：暴力解法"></a>解法一：暴力解法</h2><blockquote><p>暴力求解，不解释。</p><p>枚举所有发生一次交易的股价差</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> len = prices.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有可能不发生交易，因此结果集的初始值设置为 0</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举所有发生一次交易的股价差</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) {</span><br><span class="line">            res = Math.max(res, prices[j] - prices[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="解法二：动态规划"><a href="#解法二：动态规划" class="headerlink" title="解法二：动态规划"></a>解法二：动态规划</h2><p>题目只问最大利润，没有问这几天具体哪一天买、哪一天卖，因此可以考虑使用 动态规划 的方法来解决。</p><p>买卖股票有约束，根据题目意思，有以下两个约束条件：</p><ul><li>条件 1：你不能在买入股票前卖出股票；</li><li>条件 2：最多只允许完成一笔交易。</li></ul><p>因此 <strong>当天是否持股</strong> 是一个很重要的因素，而当前是否持股和昨天是否持股有关系，为此我们需要把 <strong>是否持股</strong> 设计到状态数组中。</p><p><strong>状态定义：</strong></p><p><code>dp[i] [j]</code>：下标为 <code>i</code> 这一天结束的时候，手上持股状态为 j 时，我们持有的现金数。</p><ul><li>j = 0，表示当前不持股；</li><li>j = 1，表示当前持股。</li></ul><p><strong>注意</strong>：这个状态具有前缀性质，下标为 i 的这一天的计算结果包含了区间 [0, i] 所有的信息，因此最后输出 dp[len - 1] [0]。</p><p><strong>说明：</strong></p><ul><li>使用「现金数」这个说法主要是为了体现 买入股票手上的现金数减少，卖出股票手上的现金数增加 这个事实；</li><li>「现金数」等价于题目中说的「利润」，即先买入这只股票，后买入这只股票的差价；</li><li>因此在刚开始的时候，我们的手上肯定是有一定现金数能够买入这只股票，即刚开始的时候现金数肯定不为 00，但是写代码的时候可以设置为 0。极端情况下（股价数组为 [5, 4, 3, 2, 1]），此时不发生交易是最好的（这一点是补充说明，限于我的表达，希望不要给大家造成迷惑）。</li></ul><p><strong>推导状态转移方程：</strong></p><p>dp[i] [0]：规定了今天不持股，有以下两种情况：</p><ul><li><p>昨天不持股，今天什么都不做；</p></li><li><p>昨天持股，今天卖出股票（现金数增加），<br>dp[i] [1]：规定了今天持股，有以下两种情况：</p></li><li><p>昨天持股，今天什么都不做（现金数增加）；</p></li><li><p>昨天不持股，今天买入股票（注意：只允许交易一次，因此手上的现金数就是当天的股价的相反数）。<br>状态转移方程请见 参考代码 2。</p></li></ul><p>知识点：</p><ul><li>多阶段决策问题：动态规划常常用于求解多阶段决策问题；</li><li>无后效性：每一天是否持股设计成状态变量的一维。状态设置具体，推导状态转移方程方便</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = prices.length;</span><br><span class="line">        <span class="comment">// 特殊判断</span></span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[i][0] 下标为 i 这天结束的时候，不持股，手上拥有的现金数</span></span><br><span class="line">        <span class="comment">// dp[i][1] 下标为 i 这天结束的时候，持股，手上拥有的现金数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化：不持股显然为 0，持股就需要减去第 1 天（下标为 0）的股价</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从第 2 天开始遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="解法三：-滚动数组优化"><a href="#解法三：-滚动数组优化" class="headerlink" title="解法三： 滚动数组优化"></a>解法三： 滚动数组优化</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>java</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = prices.length;</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">            dp[i % <span class="number">2</span>][<span class="number">0</span>] = Math.max(dp[(i - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">0</span>], dp[(i - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i % <span class="number">2</span>][<span class="number">1</span>] = Math.max(dp[(i - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[(len - <span class="number">1</span>) &amp; <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>% 2</code> 还可以写成 <code>&amp; 1</code>，这里为了保证可读性，选用 <code>% 2</code>。</p><h2 id="解法四：-空间优化"><a href="#解法四：-空间优化" class="headerlink" title="解法四： 空间优化"></a>解法四： 空间优化</h2><p>空间优化只看状态转移方程。</p><p>状态转移方程里下标为 i 的行只参考下标为 i - 1 的行（即只参考上一行），并且：</p><ul><li>下标为 i 的行并且状态为 0 的行参考了上一行状态为 0 和 1 的行；</li><li>下标为 i 的行并且状态为 1 的行只参考了上一行状态为 1 的行。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = prices.length;</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">            dp[<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>], dp[<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[<span class="number">1</span>] = Math.max(dp[<span class="number">1</span>], -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。&lt;/p&gt;
&lt;p&gt;如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。&lt;/p&gt;
&lt;p&gt;注意：你不能在买入股票前卖出股票。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="动态规划" scheme="https://liudufu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="暴力解法" scheme="https://liudufu.github.io/tags/%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95/"/>
    
      <category term="滚动数组" scheme="https://liudufu.github.io/tags/%E6%BB%9A%E5%8A%A8%E6%95%B0%E7%BB%84/"/>
    
      <category term="常数优化" scheme="https://liudufu.github.io/tags/%E5%B8%B8%E6%95%B0%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>高级树_LeetCode.327_区间和的个数</title>
    <link href="https://liudufu.github.io/The_number_of_interval_sums/"/>
    <id>https://liudufu.github.io/The_number_of_interval_sums/</id>
    <published>2020-11-08T13:32:11.000Z</published>
    <updated>2020-11-08T13:34:19.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🌸题目"><a href="#🌸题目" class="headerlink" title="🌸题目"></a>🌸题目</h2><p>🍁给定一个整数数组 nums，返回区间和在 [lower, upper] 之间的个数，包含 lower 和 upper。<br>区间和 S(i, j) 表示在 nums 中，位置从 i 到 j 的元素之和，包含 i 和 j (i ≤ j)。</p><p>说明:<br>最直观的算法复杂度是 O(n2) ，请在此基础上优化你的算法。</p><a id="more"></a><p>示例:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-2,5,-1], lower = -2, upper = 2,</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 3个区间分别是: [0,0], [2,2], [0,2]，它们表示的和分别为: -2, -1, 2。</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法一：归并排序"><a href="#🌸解法一：归并排序" class="headerlink" title="🌸解法一：归并排序"></a>🌸解法一：归并排序</h2><p>设前缀和数组为 $\textit{preSum}$，则问题等价于求所有的下标对(<em>i</em>,<em>j</em>)，满足</p><p><em>preSum</em>[<em>j</em>]−<em>preSum</em>[<em>i</em>]∈[<em>lower</em>,<em>upper</em>]</p><p><code>我们先考虑如下的问题</code>：给定两个<strong>升序排列</strong>的数组 n1,<em>n</em>2，试找出所有的下标对 (i,j)，满足<em>n</em>2[<em>j</em>]−<em>n</em>1[<em>i</em>]∈[<em>lower</em>,<em>upper</em>]</p><p>在已知两个数组均为升序的情况下，这一问题是相对简单的：我们在 n2中维护两个指针 l,r。起初，它们都指向 n 2 的起始位置。随后，我们考察 n 1 的第一个元素。首先，不断地将指针 l 向右移动，直到$$ n_2[l] \ge n_1[0] + \textit{lower}$$为止，此时， ll 及其右边的元素均大于或等于 $n_1[0] + \textit{lower}$；随后，再不断地将指针 r 向右移动，直到 $n_2[r] &gt; n_1[0] + \textit{upper}$为止，则 r左边的元素均小于或等于 $n_1[0] + \textit{upper}$,故区间 [l,r) 中的所有下标 j，都满足<em>n</em>2[<em>j</em>]−<em>n</em>1[0]∈[<em>lower</em>,<em>upper</em>]</p><p>接下来，我们考察 n 1 的第二个元素。由于n1 是递增的，不难发现 l,r 只可能向右移动。因此，我们不断地进行上述过程，并对于 n 1中的每一个下标，都记录相应的区间 [l,r) 的大小。最终，我们就统计得到了满足条件的下标对 (i,j) 的数量。</p><p>在解决这一问题后，原问题就迎刃而解了：我们采用归并排序的方式，能够得到左右两个数组排序后的形式，以及对应的下标对数量。对于原数组而言，若要找出全部的下标对数量，只需要再额外找出左端点在左侧数组，同时右端点在右侧数组的下标对数量，而这正是我们此前讨论的问题。</p><p>代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span>[] sum = <span class="keyword">new</span> <span class="keyword">long</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            s += nums[i];</span><br><span class="line">            sum[i + <span class="number">1</span>] = s;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> countRangeSumRecursive(sum, lower, upper, <span class="number">0</span>, sum.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSumRecursive</span><span class="params">(<span class="keyword">long</span>[] sum, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (left == right) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> n1 = countRangeSumRecursive(sum, lower, upper, left, mid);</span><br><span class="line">            <span class="keyword">int</span> n2 = countRangeSumRecursive(sum, lower, upper, mid + <span class="number">1</span>, right);</span><br><span class="line">            <span class="keyword">int</span> ret = n1 + n2;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 首先统计下标对的数量</span></span><br><span class="line">            <span class="keyword">int</span> i = left;</span><br><span class="line">            <span class="keyword">int</span> l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> r = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt;= mid) {</span><br><span class="line">                <span class="keyword">while</span> (l &lt;= right &amp;&amp; sum[l] - sum[i] &lt; lower) {</span><br><span class="line">                    l++;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">while</span> (r &lt;= right &amp;&amp; sum[r] - sum[i] &lt;= upper) {</span><br><span class="line">                    r++;</span><br><span class="line">                }</span><br><span class="line">                ret += r - l;</span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 随后合并两个排序数组</span></span><br><span class="line">            <span class="keyword">int</span>[] sorted = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> p1 = left, p2 = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (p1 &lt;= mid || p2 &lt;= right) {</span><br><span class="line">                <span class="keyword">if</span> (p1 &gt; mid) {</span><br><span class="line">                    sorted[p++] = (<span class="keyword">int</span>) sum[p2++];</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (p2 &gt; right) {</span><br><span class="line">                    sorted[p++] = (<span class="keyword">int</span>) sum[p1++];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">if</span> (sum[p1] &lt; sum[p2]) {</span><br><span class="line">                        sorted[p++] = (<span class="keyword">int</span>) sum[p1++];</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        sorted[p++] = (<span class="keyword">int</span>) sum[p2++];</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sorted.length; j++) {</span><br><span class="line">                sum[left + j] = sorted[j];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法二：线段树"><a href="#🌸解法二：线段树" class="headerlink" title="🌸解法二：线段树"></a>🌸解法二：线段树</h2><p>依然考虑前缀和数组$ \textit{preSum}$</p><p>对于每个下标 j，以 j 为右端点的下标对的数量，就等于数组 $\textit{preSum}$[0..j-1] 中的所有整数，出现在区间$ [\textit{preSum}[j]-\textit{upper}, \textit{preSum}[j]-\textit{lower}]$ 的次数。故很容易想到基于线段树的解法。</p><p>我们从左到右扫描前缀和数组。每遇到一个数$ \textit{preSum}[j]$，我们就在线段树中查询区间$ [\textit{preSum}[j]-\textit{upper}, \textit{preSum}[j]-\textit{lower}]$内的整数数量，随后，将 $\textit{preSum}[j]$ 插入到线段树当中。</p><p>注意到整数的范围可能很大，故需要利用哈希表将所有可能出现的整数，映射到连续的整数区间内。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span>[] preSum = <span class="keyword">new</span> <span class="keyword">long</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            preSum[i + <span class="number">1</span>] = sum;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        Set&lt;Long&gt; allNumbers = <span class="keyword">new</span> TreeSet&lt;Long&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            allNumbers.add(x);</span><br><span class="line">            allNumbers.add(x - lower);</span><br><span class="line">            allNumbers.add(x - upper);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 利用哈希表进行离散化</span></span><br><span class="line">        Map&lt;Long, Integer&gt; values = <span class="keyword">new</span> HashMap&lt;Long, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : allNumbers) {</span><br><span class="line">            values.put(x, idx);</span><br><span class="line">            idx++;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        SegNode root = build(<span class="number">0</span>, values.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            <span class="keyword">int</span> left = values.get(x - upper), right = values.get(x - lower);</span><br><span class="line">            ret += count(root, left, right);</span><br><span class="line">            insert(root, values.get(x));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SegNode <span class="title">build</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span><br><span class="line">        SegNode node = <span class="keyword">new</span> SegNode(left, right);</span><br><span class="line">        <span class="keyword">if</span> (left == right) {</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        node.lchild = build(left, mid);</span><br><span class="line">        node.rchild = build(mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(SegNode root, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (left &gt; root.hi || right &lt; root.lo) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= root.lo &amp;&amp; root.hi &lt;= right) {</span><br><span class="line">            <span class="keyword">return</span> root.add;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count(root.lchild, left, right) + count(root.rchild, left, right);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(SegNode root, <span class="keyword">int</span> val)</span> </span>{</span><br><span class="line">        root.add++;</span><br><span class="line">        <span class="keyword">if</span> (root.lo == root.hi) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> mid = (root.lo + root.hi) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (val &lt;= mid) {</span><br><span class="line">            insert(root.lchild, val);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            insert(root.rchild, val);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegNode</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> lo, hi, add;</span><br><span class="line">    SegNode lchild, rchild;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegNode</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span><br><span class="line">        lo = left;</span><br><span class="line">        hi = right;</span><br><span class="line">        add = <span class="number">0</span>;</span><br><span class="line">        lchild = <span class="keyword">null</span>;</span><br><span class="line">        rchild = <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法三：动态增加节点的线段树"><a href="#🌸解法三：动态增加节点的线段树" class="headerlink" title="🌸解法三：动态增加节点的线段树"></a>🌸解法三：动态增加节点的线段树</h2><p>与方法二类似，但我们可以不实用哈希表进行映射，而是只在线段树的插入操作过程中动态地增加树中的节点。而当我们进行查询操作时，如果到达一个空节点，那么说明对应的区间中暂时还没有值，就可以直接返回 0。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span>[] preSum = <span class="keyword">new</span> <span class="keyword">long</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            preSum[i + <span class="number">1</span>] = sum;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> lbound = Long.MAX_VALUE, rbound = Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            lbound = Math.min(Math.min(lbound, x), Math.min(x - lower, x - upper));</span><br><span class="line">            rbound = Math.max(Math.max(rbound, x), Math.max(x - lower, x - upper));</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        SegNode root = <span class="keyword">new</span> SegNode(lbound, rbound);</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            ret += count(root, x - upper, x - lower);</span><br><span class="line">            insert(root, x);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(SegNode root, <span class="keyword">long</span> left, <span class="keyword">long</span> right)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (left &gt; root.hi || right &lt; root.lo) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= root.lo &amp;&amp; root.hi &lt;= right) {</span><br><span class="line">            <span class="keyword">return</span> root.add;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count(root.lchild, left, right) + count(root.rchild, left, right);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(SegNode root, <span class="keyword">long</span> val)</span> </span>{</span><br><span class="line">        root.add++;</span><br><span class="line">        <span class="keyword">if</span> (root.lo == root.hi) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">long</span> mid = (root.lo + root.hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (val &lt;= mid) {</span><br><span class="line">            <span class="keyword">if</span> (root.lchild == <span class="keyword">null</span>) {</span><br><span class="line">                root.lchild = <span class="keyword">new</span> SegNode(root.lo, mid);</span><br><span class="line">            }</span><br><span class="line">            insert(root.lchild, val);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (root.rchild == <span class="keyword">null</span>) {</span><br><span class="line">                root.rchild = <span class="keyword">new</span> SegNode(mid + <span class="number">1</span>, root.hi);</span><br><span class="line">            }</span><br><span class="line">            insert(root.rchild, val);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegNode</span> </span>{</span><br><span class="line">    <span class="keyword">long</span> lo, hi;</span><br><span class="line">    <span class="keyword">int</span> add;</span><br><span class="line">    SegNode lchild, rchild;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegNode</span><span class="params">(<span class="keyword">long</span> left, <span class="keyword">long</span> right)</span> </span>{</span><br><span class="line">        lo = left;</span><br><span class="line">        hi = right;</span><br><span class="line">        add = <span class="number">0</span>;</span><br><span class="line">        lchild = <span class="keyword">null</span>;</span><br><span class="line">        rchild = <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法四：树状数组"><a href="#🌸解法四：树状数组" class="headerlink" title="🌸解法四：树状数组"></a>🌸解法四：树状数组</h2><p>树状数组与线段树基于类似的思想，不过树状数组支持的基本查询为求出 $[0, \textit{val}]$ 之间的整数数量。为了查询区间$ [\textit{preSum}[j]-\textit{upper}, \textit{preSum}[j]-\textit{lower}]$内的整数数量，需要执行两次查询，即分别查询 $[0, \textit{preSum}[j]-\textit{upper}-1]$ 区间的整数数量 L 和$[0,\textit{preSum}[j]-\textit{lower}]$ 区间的整数数量 R，答案即为两者作差 R-L。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span>[] preSum = <span class="keyword">new</span> <span class="keyword">long</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            preSum[i + <span class="number">1</span>] = sum;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        Set&lt;Long&gt; allNumbers = <span class="keyword">new</span> TreeSet&lt;Long&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            allNumbers.add(x);</span><br><span class="line">            allNumbers.add(x - lower);</span><br><span class="line">            allNumbers.add(x - upper);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 利用哈希表进行离散化</span></span><br><span class="line">        Map&lt;Long, Integer&gt; values = <span class="keyword">new</span> HashMap&lt;Long, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x: allNumbers) {</span><br><span class="line">            values.put(x, idx);</span><br><span class="line">            idx++;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        BIT bit = <span class="keyword">new</span> BIT(values.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; preSum.length; i++) {</span><br><span class="line">            <span class="keyword">int</span> left = values.get(preSum[i] - upper), right = values.get(preSum[i] - lower);</span><br><span class="line">            ret += bit.query(right + <span class="number">1</span>) - bit.query(left);</span><br><span class="line">            bit.update(values.get(preSum[i]) + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BIT</span> </span>{</span><br><span class="line">    <span class="keyword">int</span>[] tree;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BIT</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.tree = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= n) {</span><br><span class="line">            tree[x] += d;</span><br><span class="line">            x += lowbit(x);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) {</span><br><span class="line">            ans += tree[x];</span><br><span class="line">            x -= lowbit(x);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法五：平衡二叉搜索树"><a href="#🌸解法五：平衡二叉搜索树" class="headerlink" title="🌸解法五：平衡二叉搜索树"></a>🌸解法五：平衡二叉搜索树</h2><p>考虑一棵平衡二叉搜索树。若其节点数量为 N，则深度为 O(log N)。二叉搜索树能够在 O(logN) 的时间内，对任意给定的值 $\textit{val}$,查询树中所有小于或等于该值的数量。</p><p>因此，我们可以从左到右扫描前缀和数组。对于$ \textit{preSum}[j]$ 而言，首先进行两次查询，得到区间 $[\textit{preSum}[j]-\textit{upper}, \textit{preSum}[j]-\textit{lower}]$内的整数数量；随后再将 $\textit{preSum}[j]$ 插入到平衡树中。</p><p>平衡二叉搜索树有多种不同的实现，最经典的为 AVL 树与红黑树。此外，在算法竞赛中，还包括 Treap、SBT 等数据结构。</p><p>下面给出基于 Treap 的实现。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span>[] preSum = <span class="keyword">new</span> <span class="keyword">long</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            preSum[i + <span class="number">1</span>] = sum;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        BalancedTree treap = <span class="keyword">new</span> BalancedTree();</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            <span class="keyword">long</span> numLeft = treap.lowerBound(x - upper);</span><br><span class="line">            <span class="keyword">int</span> rankLeft = (numLeft == Long.MAX_VALUE ? (<span class="keyword">int</span>) (treap.getSize() + <span class="number">1</span>) : treap.rank(numLeft)[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">long</span> numRight = treap.upperBound(x - lower);</span><br><span class="line">            <span class="keyword">int</span> rankRight = (numRight == Long.MAX_VALUE ? (<span class="keyword">int</span>) treap.getSize() : treap.rank(numRight)[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">            ret += rankRight - rankLeft + <span class="number">1</span>;</span><br><span class="line">            treap.insert(x);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BalancedTree</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BalancedNode</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> val;</span><br><span class="line">        <span class="keyword">long</span> seed;</span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        BalancedNode left;</span><br><span class="line">        BalancedNode right;</span><br><span class="line"></span><br><span class="line">        BalancedNode(<span class="keyword">long</span> val, <span class="keyword">long</span> seed) {</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.seed = seed;</span><br><span class="line">            <span class="keyword">this</span>.count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function">BalancedNode <span class="title">leftRotate</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> prevSize = size;</span><br><span class="line">            <span class="keyword">int</span> currSize = (left != <span class="keyword">null</span> ? left.size : <span class="number">0</span>) + (right.left != <span class="keyword">null</span> ? right.left.size : <span class="number">0</span>) + count;</span><br><span class="line">            BalancedNode root = right;</span><br><span class="line">            right = root.left;</span><br><span class="line">            root.left = <span class="keyword">this</span>;</span><br><span class="line">            root.size = prevSize;</span><br><span class="line">            size = currSize;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function">BalancedNode <span class="title">rightRotate</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> prevSize = size;</span><br><span class="line">            <span class="keyword">int</span> currSize = (right != <span class="keyword">null</span> ? right.size : <span class="number">0</span>) + (left.right != <span class="keyword">null</span> ? left.right.size : <span class="number">0</span>) + count;</span><br><span class="line">            BalancedNode root = left;</span><br><span class="line">            left = root.right;</span><br><span class="line">            root.right = <span class="keyword">this</span>;</span><br><span class="line">            root.size = prevSize;</span><br><span class="line">            size = currSize;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BalancedNode root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> Random rand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BalancedTree</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.root = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.rand = <span class="keyword">new</span> Random();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">long</span> x)</span> </span>{</span><br><span class="line">        ++size;</span><br><span class="line">        root = insert(root, x);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lowerBound</span><span class="params">(<span class="keyword">long</span> x)</span> </span>{</span><br><span class="line">        BalancedNode node = root;</span><br><span class="line">        <span class="keyword">long</span> ans = Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (x == node.val) {</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (x &lt; node.val) {</span><br><span class="line">                ans = node.val;</span><br><span class="line">                node = node.left;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                node = node.right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">upperBound</span><span class="params">(<span class="keyword">long</span> x)</span> </span>{</span><br><span class="line">        BalancedNode node = root;</span><br><span class="line">        <span class="keyword">long</span> ans = Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (x &lt; node.val) {</span><br><span class="line">                ans = node.val;</span><br><span class="line">                node = node.left;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                node = node.right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] rank(<span class="keyword">long</span> x) {</span><br><span class="line">        BalancedNode node = root;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (x &lt; node.val) {</span><br><span class="line">                node = node.left;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                ans += (node.left != <span class="keyword">null</span> ? node.left.size : <span class="number">0</span>) + node.count;</span><br><span class="line">                <span class="keyword">if</span> (x == node.val) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{ans - node.count + <span class="number">1</span>, ans};</span><br><span class="line">                }</span><br><span class="line">                node = node.right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{Integer.MIN_VALUE, Integer.MAX_VALUE};</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BalancedNode <span class="title">insert</span><span class="params">(BalancedNode node, <span class="keyword">long</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BalancedNode(x, rand.nextInt());</span><br><span class="line">        }</span><br><span class="line">        ++node.size;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; node.val) {</span><br><span class="line">            node.left = insert(node.left, x);</span><br><span class="line">            <span class="keyword">if</span> (node.left.seed &gt; node.seed) {</span><br><span class="line">                node = node.rightRotate();</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; node.val) {</span><br><span class="line">            node.right = insert(node.right, x);</span><br><span class="line">            <span class="keyword">if</span> (node.right.seed &gt; node.seed) {</span><br><span class="line">                node = node.leftRotate();</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            ++node.count;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法一说明：为什么可以归并"><a href="#🌸解法一说明：为什么可以归并" class="headerlink" title="🌸解法一说明：为什么可以归并"></a>🌸解法一说明：为什么可以归并</h2><p>看完后我明白如果数组是有序的，那么可以容易的求出区间数量，那么为什么对数组排序前后所求的区间数量不会改变呢，下面我来说明一下（官方并没有实际说明这一点）</p><p><strong>初始归并：</strong><br>此时只会有0或1个元素，不涉及左右两段的情况，是可以的</p><p><strong>合并归并：</strong>此时是有左右两段的，左右两段是分别有序的，<strong>对前缀和数组排序并不会修改数组中元素的值，只是改变了元素是位置，如对left ~ right=3~5位置的前缀和排序，排序后前缀和3 ~ 5位置的数还是原来3 ~ 5位置的数，只是排列变化了</strong></p><p>设想一个一般的情况，现在是某一层的递归，左，右两段区间left ~ mid, mid+1 ~ right的符合要求的区间数量已经通过countRangeSumRecursive计算了出来，整个left ~ right区间中可能的符合要求的区间情况是两端点在left ~ mid中；两端点在mid+1 ~ right；一个端点在left~ mid中，一个端点在mid+1~ right中，所以现在只要求出第三种情况的区间数量就可以了<br>通过上面的说明，left ~ mid,mid+1~ right区间中的数还是原来区间中的数，只是顺序变成了有序，而有序是容易计算符合要求的区间数量的，一个图说明为什么第三种情况排序前后符合数量的区间数量是不变的</p><h2 id="🌸指路：如何学习本题的算法和数据结构"><a href="#🌸指路：如何学习本题的算法和数据结构" class="headerlink" title="🌸指路：如何学习本题的算法和数据结构"></a>🌸指路：如何学习本题的算法和数据结构</h2><p>忽略官方题解中的方法一，剩余的四种方法分别使用了线段树、树状数组和平衡树。这些方法都不是面试的考点，甚至在笔试中也很少出现，所以大部分读者应该是完全不知道这些都是啥神奇的数据结构的。所以我觉得这里有必要补充以下两点：</p><ul><li>这道题需要哪些接口。</li><li>上面的这些神奇的数据结构可以提供哪些接口。</li></ul><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定数组 A，它的长度为 n，对应的元素以及下标为A[0],A[1],⋯,A[n−1]。</p><p>令 S(i,j) 为A[i] 到 A[j] 的和，即</p><p>$S(i, j) = \sum_{k=i}^j A[k]$</p><p>题目需要求出满足$ \textit{lower} \leq S(i, j) \leq \textit{upper}$ 的二元组 (i, j)(i,j) 的个数。</p><p>换成人话就是，问数组 A 有多少个连续的子数组，其元素只和在 $[\textit{lower}, \textit{upper}]$ 的范围内。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>暴力的做法是使用前缀和。令 P 为 A 的前缀和数组，那么</p><p>S(i, j) = P[j] - P[i-1]</p><p>可以在O(1) 的时间求出。这里我们规定边界 P[-1] = 0。</p><p>这样一来，我们枚举所有的二元组 (i, j)，算出S(i,j) 并判断其是否在范围内即可。时间复杂度为$ O(n^2)$。</p><p>那么怎么进行优化呢？我们考虑从小到大枚举 j，由于</p><p>$\textit{lower} \leq P[j] - P[i-1] \leq \textit{upper}$</p><p>我们可以得到 P[i-1] 应该满足的不等式</p><p>$P[j] - \textit{upper} \leq P[i-1] \leq P[j] - \textit{lower}$</p><p>因此本质上，我们需要一个数据结构支持下面的两个操作：</p><p>操作 1「查询」：给定一个范围 $[\textit{left}, \textit{right}]$，查询数据结构中在该范围内的元素个数。对应到本题中，我们给定的范围就是$ \big[P[j] - \textit{upper}, P[j] - \textit{lower}\big]$；</p><p>操作 2「更新」：给定一个元素 xx，我们需要把它添加到数据结构中。对应到本题中，我们给定的元素就是 P[j]。</p><p>如果有了这样一个数据结构，我们就可以很方便地做出本题：</p><p>我们首先将 00 放入数据结构中，随后我们从小到大枚举 j，查询 $\big[P[j] - \textit{upper}, P[j] - \textit{lower}\big]$ 范围内的元素个数并计入答案。在查询完成之后，我们将P[j] 添加进数据结构，就可以进行下一次枚举。</p><h3 id="频数数组"><a href="#频数数组" class="headerlink" title="频数数组"></a>频数数组</h3><p>很多数据结构都是基于「频数数组」。</p><p>给定数组 t 以及它的下标范围 [L, R][L,R]，t[x] 就表示元素 x 在数据结构中的出现次数。基于此，上述的两个操作可以变为：</p><p>操作 1「查询」：给定一个范围$ [\textit{left}, \textit{right}]$，查询$ t[\textit{left}]$到 $t[\textit{right}]$ 的和；</p><p>操作 2「更新」：给定一个元素 x，将 t[x] 增加 1。</p><p>这也是线段树和树状数组的基础，它们需要的空间都与数组 t 的下标范围 [L, R][L,R] 正相关。在本题数据规模较大的情况下（例如测试数据中，出现了元素值达到 32 位有符号整数的上下界），线段树和树状数组都会超出空间限制，因此需要借助「离散化」操作，将这些元素映射到一个较小规模的区间内。</p><h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p>给定数组元素 [1, 22, 333, 4444, 55555]，如果我们只关注它们之间的大小关系，那么该数组其实和 [1, 2, 3, 4, 5] 是等价的。</p><p>这就是离散化的技巧。我们将所有会涉及到比较操作的数全部放入一个列表中，进行排序，再从小到大依次给它们赋予一个新的值。在离散化完成后，任何两个数之间的相对大小都不会改变，但是元素的上下界范围被限制住，这使得我们可以方便地使用一些数据结构。</p><p>在本题中，我们可以将所有的 $P[j], P[j] - \textit{upper}, P[j] - \textit{lower}$一起进行离散化，并将它们从小到大，依次赋予一个从 1 开始的整数值。这样一来，我们所有涉及到的元素值都会在 [1, 3(n+1)]的范围内。</p><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><p>当我们将元素离散化后，就可以直接使用线段树了。最基础的线段树恰好就支持这两种操作：</p><p>操作 1「查询」：给定一个范围$ [\textit{left}, \textit{right}]$,查询$ t[\textit{left}] $到 $t[\textit{right}]$ 的和；</p><p>操作 2「更新」：给定一个元素 x，将 t[x] 增加 $\delta$。</p><p>我们只需要时刻令$\delta$=1即可。两种操作的时间复杂度均为$ O(\log n)$</p><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><p>当我们将元素离散化后，也可以直接使用树状数组了。最基础的线段树支持这两种操作：</p><p>操作 1「查询」：给定一个下标$ \textit{right}$，查询 t[1] 到$ t[\textit{right}]$ 的和（即前缀和）；</p><p>操作 2「更新」：给定一个元素 x，将t[x] 增加 $\deltaδ$。</p><p>我们只需要时刻令 $\delta=1$ 即可，并且通过调用操作 1 两次（即 $\textit{right}$ 和$ \textit{left}-1left−1）相减得到 t[\textit{left}]$ 到 $t[\textit{right}]$ 的和。两种操作的时间复杂度均为 $O(\log n)$。</p><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><p>平衡树实际上就是「平衡」的二叉搜索树，它与线段树和树状数组不同，并且它不需要借助离散化操作。支持的操作（在本题中会使用到的）主要有以下几种：</p><p>操作 1「lower bound」：给定一个元素 x，查询平衡树中最小的大于等于 x 的元素；</p><p>操作 2「upper bound」：给定一个元素 x，查询平衡树中最小的大于 x 的元素；</p><p>操作 3「rank」：给定一个元素 x（它必须在平衡树中），求它是第几小的元素。当存在重复元素时，会计入多次；</p><p>操作 4「insert」：给定一个元素 x，将它放入平衡树中。</p><p>所有操作的时间复杂度均为 $O(\log n)$。大部分语言自带的平衡树支持操作 1 和 2 和 4 但不支持操作 3。</p><p>那么对于本题中需要的两种操作：</p><p>「查询」：我们令 $u = P[j] - \textit{upper}$，$v = P[j] - \textit{lower}$。对 u 使用操作 11 得到 u’′<br> ，对 v 使用操作 2 得到 v’  。我们再使用操作 3 得到 u’的$ rank r_u$ 以及 v’<br>  的$ rank r_v$ ，那么$ r_v’-r_u’$′， 就是$ \big[P[j] - \textit{upper}, P[j] - \textit{lower}\big]$ 中的元素个数。</p><p>「更新」：我们对 x 使用操作 4 即可。</p><h3 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h3><p>关于这些竞赛难度的知识点，我建议读者在学有余力的情况下学习。这些知识点对面试几乎没有任何帮助；相反，在没有完全掌握这些知识点的前提下，可能会影响读者原本正常的思维，产生「看什么题都是线段树」之类的后果。</p><p>这里我推荐两个参考资料：</p><ul><li><a href="https://oi-wiki.org/" target="_blank" rel="noopener">OI Wiki</a>，是一个信息学竞赛爱好者用爱发电的算法小百科。</li><li><a href="https://github.com/atcoder/ac-library" target="_blank" rel="noopener">ac-library</a>，是日本著名算法竞赛平台 AtCoder 整理的算法模板，但其中没有平衡树。</li></ul><p>读者也可以参考其它互联网上的博客。线段树、树状数组和平衡树在算法竞赛圈中是非常基础的知识点，优质的博客数量也很多</p><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;🌸题目&quot;&gt;&lt;a href=&quot;#🌸题目&quot; class=&quot;headerlink&quot; title=&quot;🌸题目&quot;&gt;&lt;/a&gt;🌸题目&lt;/h2&gt;&lt;p&gt;🍁给定一个整数数组 nums，返回区间和在 [lower, upper] 之间的个数，包含 lower 和 upper。&lt;br&gt;区间和 S(i, j) 表示在 nums 中，位置从 i 到 j 的元素之和，包含 i 和 j (i ≤ j)。&lt;/p&gt;
&lt;p&gt;说明:&lt;br&gt;最直观的算法复杂度是 O(n2) ，请在此基础上优化你的算法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="树状数组" scheme="https://liudufu.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="归并排序" scheme="https://liudufu.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
      <category term="线段树" scheme="https://liudufu.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="动态线段树" scheme="https://liudufu.github.io/tags/%E5%8A%A8%E6%80%81%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="平衡二叉搜索树" scheme="https://liudufu.github.io/tags/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>史上最全的遍历二叉树详解</title>
    <link href="https://liudufu.github.io/Detailed_explanation_of_tree/"/>
    <id>https://liudufu.github.io/Detailed_explanation_of_tree/</id>
    <published>2020-11-08T13:29:30.000Z</published>
    <updated>2020-11-08T13:31:33.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="X-遍历二叉树的方法合集"><a href="#X-遍历二叉树的方法合集" class="headerlink" title="X.遍历二叉树的方法合集"></a>X.遍历二叉树的方法合集</h1><ol><li><ol><li>二叉树的中序遍历</li></ol></li><li><ol><li>二叉树的前序遍历</li></ol></li><li><ol><li>二叉树的后序遍历</li></ol></li></ol><h2 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h2><a id="more"></a><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderRecur</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    System.out.print(head.value + <span class="string">" "</span>);</span><br><span class="line">    preOrderRecur(head.left);</span><br><span class="line">    preOrderRecur(head.right);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderRecur</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    preOrderRecur(head.left);</span><br><span class="line">    System.out.print(head.value + <span class="string">" "</span>);</span><br><span class="line">    preOrderRecur(head.right);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderRecur</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    postOrderRecur(head.left);</span><br><span class="line">    postOrderRecur(head.right);</span><br><span class="line">    System.out.print(head.value + <span class="string">" "</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>这里没有对递归遍历做过多的解释，仅仅给出了简单的动画演示。<br>要理解递归的思路并且熟练的使用它，就是要想清楚你想做什么，什么时候停止。</p><h3 id="如前序遍历："><a href="#如前序遍历：" class="headerlink" title="如前序遍历："></a>如前序遍历：</h3><p>我想先打印头节点对吧？那我打印完了头节点，我现在想打印左边节点了，我只是告诉计算机我想打印左边结点，之后打印右边结点。</p><h3 id="那么后序遍历呢？"><a href="#那么后序遍历呢？" class="headerlink" title="那么后序遍历呢？"></a>那么后序遍历呢？</h3><p>这个时候你应该知道了，我就是想操作左边然后右边，最后打印中间的元素。</p><p>我们并不需要太过于在意具体的递归过程，而是要想清楚让计算机干什么。</p><p>计算机都可能溢出，用人脑去遍历就不现实了。</p><h2 id="迭代解法"><a href="#迭代解法" class="headerlink" title="迭代解法"></a>迭代解法</h2><p>本质上是在模拟递归，因为在递归的过程中使用了系统栈，所以在迭代的解法中常用Stack来模拟系统栈。</p><h3 id="前序遍历-1"><a href="#前序遍历-1" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>首先我们应该创建一个Stack用来存放节点，首先我们想要打印根节点的数据，此时Stack里面的内容为空，所以我们优先将头结点加入Stack，然后打印。</p><p>之后我们应该先打印左子树，然后右子树。所以先加入Stack的就是右子树，然后左子树。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderIteration</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">stack.push(head);</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line">TreeNode node = stack.pop();</span><br><span class="line">System.out.print(node.value + <span class="string">" "</span>);</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">stack.push(node.right);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">stack.push(node.left);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>同理创建一个Stack，然后按 左 中 右的顺序输出节点。<br>尽可能的将这个节点的左子树压入Stack，此时栈顶的元素是最左侧的元素，其目的是找到一个最小单位的子树(也就是最左侧的一个节点)，并且在寻找的过程中记录了来源，才能返回上层,同时在返回上层的时候已经处理完毕左子树了。。当处理完最小单位的子树时，返回到上层处理了中间节点。（如果把整个左中右的遍历都理解成子树的话，就是处理完 <code>左子树-&gt;中间(就是一个节点)-&gt;右子树）</code><br>如果有右节点，其也要进行中序遍历。</p><p><a href="https://imgchr.com/i/B84oZt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/29/B84oZt.png" alt="B84oZt.png"></a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrderIteration</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur = head;</span><br><span class="line">Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty() || cur != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">stack.push(cur);</span><br><span class="line">cur = cur.left;</span><br><span class="line">}</span><br><span class="line">TreeNode node = stack.pop();</span><br><span class="line">System.out.print(node.value + <span class="string">" "</span>);</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">cur = node.right;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h3><h4 id="代码片段-1"><a href="#代码片段-1" class="headerlink" title="代码片段 1"></a>代码片段 1</h4><ul><li>前序遍历的过程 是 中左右。</li><li>将其转化成 中右左。也就是压栈的过程中优先压入左子树，在压入右子树。</li><li>然后将这个结果返回来，这里是利用栈的先进后出倒序打印。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderIteration</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">Stack&lt;TreeNode&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">Stack&lt;TreeNode&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">stack1.push(head);</span><br><span class="line"><span class="keyword">while</span> (!stack1.isEmpty()) {</span><br><span class="line">TreeNode node = stack1.pop();</span><br><span class="line">stack2.push(node);</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">stack1.push(node.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">stack1.push(node.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (!stack2.isEmpty()) {</span><br><span class="line">System.out.print(stack2.pop().value + <span class="string">" "</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="代码片段-2"><a href="#代码片段-2" class="headerlink" title="代码片段 2"></a>代码片段 2</h4><ul><li>bn用一个指针cur标记当前退出的节点是什么。</li><li>后序遍历的过程中在遍历完左子树跟右子树cur都会回到根结点。所以当前不管是从左子树还是右子树回到根结点都不应该再操作了，应该退回上层。</li><li>如果是从右边再返回根结点，应该回到上层。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderIteration2</span><span class="params">(TreeNode head)</span> </span>{ 感谢[<span class="meta">@ben</span>-ben-niu](/u/ben-ben-niu/)指出错误，代码确实存在问题，已经在原文中修复</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur = head;</span><br><span class="line">Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">stack.push(head);</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line">TreeNode peek = stack.peek();</span><br><span class="line"><span class="keyword">if</span> (peek.left != <span class="keyword">null</span> &amp;&amp; peek.left != cur &amp;&amp; peek.right != cur) {</span><br><span class="line">stack.push(peek.left);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (peek.right != <span class="keyword">null</span> &amp;&amp; peek.right != cur) {</span><br><span class="line">stack.push(peek.right);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">System.out.print(stack.pop().val + <span class="string">" "</span>);</span><br><span class="line">cur = peek;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Morris解法"><a href="#Morris解法" class="headerlink" title="Morris解法"></a>Morris解法</h2><p>Morris遍历使用二叉树节点中大量指向null的指针，由Joseph Morris 于1979年发明。<br>时间复杂度：O(n)<br>额外空间复杂度：O(1)</p><p>在你阅读以下代码之前，在这边先讲解一下Morris的通用解法过程。</p><p><a href="https://imgchr.com/i/B84OzQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/29/B84OzQ.png" alt="B84OzQ.png"></a></p><p>Morris的整体思路就是将 以某个根结点开始，找到它左子树的最右侧节点之后与这个根结点进行连接<br>我们可以从 图2 看到，如果这么连接之后，cur 这个指针是可以完整的从一个节点顺着下一个节点遍历，将整棵树遍历完毕，直到 7 这个节点右侧没有指向。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderMorris</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur1 = head;<span class="comment">//当前开始遍历的节点</span></span><br><span class="line">TreeNode cur2 = <span class="keyword">null</span>;<span class="comment">//记录当前结点的左子树</span></span><br><span class="line"><span class="keyword">while</span> (cur1 != <span class="keyword">null</span>) {</span><br><span class="line">cur2 = cur1.left;</span><br><span class="line"><span class="keyword">if</span> (cur2 != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">while</span> (cur2.right != <span class="keyword">null</span> &amp;&amp; cur2.right != cur1) {<span class="comment">//找到当前左子树的最右侧节点，且这个节点应该在指向根结点之前，否则整个节点又回到了根结点。</span></span><br><span class="line">cur2 = cur2.right;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (cur2.right == <span class="keyword">null</span>) {<span class="comment">//这个时候如果最右侧这个节点的右指针没有指向根结点，创建连接然后往下一个左子树的根结点进行连接操作。</span></span><br><span class="line">cur2.right = cur1;</span><br><span class="line">cur1 = cur1.left;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {<span class="comment">//当左子树的最右侧节点有指向根结点，此时说明我们已经回到了根结点并重复了之前的操作，同时在回到根结点的时候我们应该已经处理完 左子树的最右侧节点 了，把路断开。</span></span><br><span class="line">cur2.right = <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line">cur1 = cur1.right;<span class="comment">//一直往右边走，参考图</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="前序遍历-2"><a href="#前序遍历-2" class="headerlink" title="前序遍历"></a>前序遍历</h3><ol><li>在某个根结点创建连线的时候打印。因为我们是顺着左边的根节点来创建连线，且创建的过程只有一次。</li><li>打印某些自身无法创建连线的节点，也就是叶子节点。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderMorris</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur1 = head;</span><br><span class="line">TreeNode cur2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (cur1 != <span class="keyword">null</span>) {</span><br><span class="line">cur2 = cur1.left;</span><br><span class="line"><span class="keyword">if</span> (cur2 != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">while</span> (cur2.right != <span class="keyword">null</span> &amp;&amp; cur2.right != cur1) {</span><br><span class="line">cur2 = cur2.right;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (cur2.right == <span class="keyword">null</span>) {</span><br><span class="line">cur2.right = cur1;</span><br><span class="line">System.out.print(cur1.value + <span class="string">" "</span>);</span><br><span class="line">cur1 = cur1.left;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">cur2.right = <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">System.out.print(cur1.value + <span class="string">" "</span>);</span><br><span class="line">}</span><br><span class="line">cur1 = cur1.right;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="中序遍历-2"><a href="#中序遍历-2" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>从最左侧开始顺着右节点打印。也就是在将cu1切换到上层节点的时候</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrderMorris</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur1 = head;</span><br><span class="line">TreeNode cur2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (cur1 != <span class="keyword">null</span>) {</span><br><span class="line">cur2 = cur1.left;</span><br><span class="line"><span class="comment">//构建连接线</span></span><br><span class="line"><span class="keyword">if</span> (cur2 != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">while</span> (cur2.right != <span class="keyword">null</span> &amp;&amp; cur2.right != cur1) {</span><br><span class="line">cur2 = cur2.right;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (cur2.right == <span class="keyword">null</span>) {</span><br><span class="line">cur2.right = cur1;</span><br><span class="line">cur1 = cur1.left;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">cur2.right = <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">System.out.print(cur1.value + <span class="string">" "</span>);</span><br><span class="line">cur1 = cur1.right;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="后序遍历-2"><a href="#后序遍历-2" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历就比较复杂了哈，先看一下图</p><p><a href="https://imgchr.com/i/B84vss" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/29/B84vss.png" alt="B84vss.png"></a></p><p>当我们到达最左侧，也就是左边连线已经创建完毕了。<br>打印 4<br>打印 5 2<br>打印 6<br>打印 7 3 1<br>我们将一个节点的连续右节点当成一个单链表来看待。<br>当我们返回上层之后，也就是将连线断开的时候，打印下层的单链表。<br>比如返回到　２，此时打印　４<br>比如返回到　１，此时打印　５　２<br>比如返回到　３，此时打印　６<br>那么我们只需要将这个单链表逆序打印就行了，下文也给出了 单链表逆序代码<br>这里不应该打印当前层，而是下一层，否则根结点会先与右边打印。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序Morris</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderMorris</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur1 = head;<span class="comment">//遍历树的指针变量</span></span><br><span class="line">TreeNode cur2 = <span class="keyword">null</span>;<span class="comment">//当前子树的最右节点</span></span><br><span class="line"><span class="keyword">while</span> (cur1 != <span class="keyword">null</span>) {</span><br><span class="line">cur2 = cur1.left;</span><br><span class="line"><span class="keyword">if</span> (cur2 != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">while</span> (cur2.right != <span class="keyword">null</span> &amp;&amp; cur2.right != cur1) {</span><br><span class="line">cur2 = cur2.right;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (cur2.right == <span class="keyword">null</span>) {</span><br><span class="line">cur2.right = cur1;</span><br><span class="line">cur1 = cur1.left;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">cur2.right = <span class="keyword">null</span>;</span><br><span class="line">postMorrisPrint(cur1.left);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">cur1 = cur1.right;</span><br><span class="line">}</span><br><span class="line">postMorrisPrint(head);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postMorrisPrint</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line">TreeNode reverseList = postMorrisReverseList(head);</span><br><span class="line">TreeNode cur = reverseList;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">System.out.print(cur.value + <span class="string">" "</span>);</span><br><span class="line">cur = cur.right;</span><br><span class="line">}</span><br><span class="line">postMorrisReverseList(reverseList);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//翻转单链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">postMorrisReverseList</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line">TreeNode cur = head;</span><br><span class="line">TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">TreeNode next = cur.right;</span><br><span class="line">cur.right = pre;</span><br><span class="line">pre = cur;</span><br><span class="line">cur = next;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> pre;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;X-遍历二叉树的方法合集&quot;&gt;&lt;a href=&quot;#X-遍历二叉树的方法合集&quot; class=&quot;headerlink&quot; title=&quot;X.遍历二叉树的方法合集&quot;&gt;&lt;/a&gt;X.遍历二叉树的方法合集&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;二叉树的中序遍历&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;二叉树的前序遍历&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;二叉树的后序遍历&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;递归解法&quot;&gt;&lt;a href=&quot;#递归解法&quot; class=&quot;headerlink&quot; title=&quot;递归解法&quot;&gt;&lt;/a&gt;递归解法&lt;/h2&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="递归" scheme="https://liudufu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="中序遍历" scheme="https://liudufu.github.io/tags/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="迭代" scheme="https://liudufu.github.io/tags/%E8%BF%AD%E4%BB%A3/"/>
    
      <category term="前序遍历" scheme="https://liudufu.github.io/tags/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="后序遍历" scheme="https://liudufu.github.io/tags/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="Morris解法" scheme="https://liudufu.github.io/tags/Morris%E8%A7%A3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>脑筋急转弯_leetcode.1227.飞机座位分配概率</title>
    <link href="https://liudufu.github.io/Aircraft_seat_allocation_probability/"/>
    <id>https://liudufu.github.io/Aircraft_seat_allocation_probability/</id>
    <published>2020-11-08T12:21:24.000Z</published>
    <updated>2020-11-08T12:23:11.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🌸题目"><a href="#🌸题目" class="headerlink" title="🌸题目"></a>🌸题目</h2><p>🍁有 n 位乘客即将登机，飞机正好有 n 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。</p><p>剩下的乘客将会：</p><p>如果他们自己的座位还空着，就坐到自己的座位上，</p><p>当他们自己的座位被占用时，随机选择其他座位<br>第 n 位乘客坐在自己的座位上的概率是多少？</p> <a id="more"></a><p>示例 1：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：1.00000</span><br><span class="line">解释：第一个人只会坐在自己的位置上。</span><br></pre></td></tr></tbody></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 2</span><br><span class="line">输出: 0.50000</span><br><span class="line">解释：在第一个人选好座位坐下后，第二个人坐在自己的座位上的概率是 0.5。</span><br></pre></td></tr></tbody></table></figure><p>提示：</p><ul><li>1 &lt;= n &lt;= 10^5</li></ul><h2 id="🌸解法：分类讨论"><a href="#🌸解法：分类讨论" class="headerlink" title="🌸解法：分类讨论"></a>🌸解法：分类讨论</h2><p>这道题代码很简单，但是就看你的脑袋想不想得到了，数学推理也挺难懂得，在这里大致说一下我的理解吧</p><ul><li><p>第一，题目并没有按照座位号1-n的顺序进行乘客登录飞机，也就是说第一个乘客的座位号并不是1，但是有一点巧妙的点就在于这个题并不管乘客的座位号是如何编排的，因为座位号也同样是1-n，所以我们可以以乘客的登录飞机的顺序为乘客重新进行编号，即第一个乘客所对应的座位号(编号代表的是入场的次序，而不是实际的座位号)。</p></li><li><p>第二，按照所有的情况进行分类讨论</p><ul><li><p>当n 等于1，毫无疑问，第n个乘客就是他自己，坐回他自己座位的概率为1.0</p></li><li><p>当n 不等于1，第一个乘客进入飞机后，可以分为以下几种情况。</p><ul><li><p>他有1/n的概率去选择到原本属于他自己的座位，也就是说他选择对了，则后面的所有人位置都是对的，所以第n个人的概率为1</p></li><li><p>他有1/n的概率选择到第n个人座位，即第n个人无论如何也选择不了自己的座位，概率为0</p></li><li><p>如果第一个人选择到了第i个人的座位，那么第二个人到第i- 1个人的位置都是对的，轮到第i个人时就会感觉到迷茫。因为自己的位置被占据了，如果第i个人选择第一个人的座位，那么后面的人位置都是完全正确的，如果他选择到了第i + 1到第n个座位，那么后面的人也会遇到同样迷茫的问题，那么，怎么做呢？</p></li><li><p>其实，当轮到第i个人的时候，i感觉到了迷茫，就像一开始第一个人一样不知道自己应该坐哪儿，所以这个时候我们可以将i和1身份互换一下，令第一个位置就是i本身的座位，这样就会有i选择第一个座位，后面的人座位肯定是对的，如果i不选择1号，同样是会令下一个i感到迷茫，这样就可以产生递归了，并且将问题的规模缩减到了n - i + 1(即还剩下多少个座位没有没有被选或者还剩下多少个人没有选，n - i代表i后面的人，再加上迷茫的i就是n - i + 1)</p></li><li><p>我们令f(n)为第n个人坐到自己原本座位的概率，按照递推规律可有</p><ul><li><p>$f(n) = \frac{1}{n}\left(1 + \sum_{i=2}^{n-1}{f(n-i+1)}\right)$</p></li><li><p>这个递推式想必大家高中就会求了，令 n = n-1再写出一项：</p></li><li><p>$f(n-1) = \frac{1}{n-1}\left(1 + \sum_{i=2}^{n-2}{f(n-i)}\right)$</p></li><li><p>然后两式相减得到：$nf(n) - (n-1)f(n-1) = f(n-1)$</p><p>即：$f(n) = f(n-1) = \cdots = f(2)$</p><p>那么我们就可以得到最终的答案了，对任意的 $n \ge 2n≥2 $都有 <code>f(n) = f(2) = 0.5</code></p></li></ul></li><li><p>另一种理解：可以把0到n-1看成一个整体，那对于n来说，无非就两种情况，前0到n-1号是否会把n的位置占据，概率就是0.5；只有一个人的情况概率为1（一定坐在自己的位置上）。</p></li></ul></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">nthPersonGetsNthSeat</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">1</span> ? <span class="number">1.0</span> : <span class="number">0.5</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;🌸题目&quot;&gt;&lt;a href=&quot;#🌸题目&quot; class=&quot;headerlink&quot; title=&quot;🌸题目&quot;&gt;&lt;/a&gt;🌸题目&lt;/h2&gt;&lt;p&gt;🍁有 n 位乘客即将登机，飞机正好有 n 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。&lt;/p&gt;
&lt;p&gt;剩下的乘客将会：&lt;/p&gt;
&lt;p&gt;如果他们自己的座位还空着，就坐到自己的座位上，&lt;/p&gt;
&lt;p&gt;当他们自己的座位被占用时，随机选择其他座位&lt;br&gt;第 n 位乘客坐在自己的座位上的概率是多少？&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="模拟" scheme="https://liudufu.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="分类讨论" scheme="https://liudufu.github.io/tags/%E5%88%86%E7%B1%BB%E8%AE%A8%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>脑筋急转弯_leetcode.1033.移动石子直到连续</title>
    <link href="https://liudufu.github.io/Move_the_stone_until_continuous/"/>
    <id>https://liudufu.github.io/Move_the_stone_until_continuous/</id>
    <published>2020-11-08T12:17:35.000Z</published>
    <updated>2020-11-08T12:20:53.654Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>哎，最近忙着ACM和蓝桥杯（毕竟都是第一次参赛的小白），可把自己整迷糊了，当两项比赛全部告一段落，自己才是真的觉悟到自己与别人的差距以及自己的大脑思考问题的能力很是欠缺，还有就是思考不够全面，往往一道题明明自己已经写出了方法，但硬是在比赛途中想不出一种有效的方法去优化方法和更快的得出答案，总是赛后诸葛亮的想出这该怎么做，那该怎么做，这些欠缺都导致自己在ACM和蓝桥杯中丢失得分，看来还是得努力呀，不让自己变得更强又何能征战星辰大海呢，先来练练思维能力吧，从最简单的脑筋急转弯开始！</p></blockquote><a id="more"></a><h2 id="🌸题目"><a href="#🌸题目" class="headerlink" title="🌸题目"></a>🌸题目</h2><p>🍁三枚石子放置在数轴上，位置分别为 a，b，c。</p><p>每一回合，我们假设这三枚石子当前分别位于位置 x, y, z 且 x &lt; y &lt; z。从位置 x 或者是位置 z 拿起一枚石子，并将该石子移动到某一整数位置 k 处，其中 x &lt; k &lt; z 且 k != y。</p><p>当你无法进行任何移动时，即，这些石子的位置连续时，游戏结束。</p><p>要使游戏结束，你可以执行的最小和最大移动次数分别是多少？ 以长度为 2 的数组形式返回答案：answer = [minimum_moves, maximum_moves]</p><p>示例 1：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 1, b = 2, c = 5</span><br><span class="line">输出：[1, 2]</span><br><span class="line">解释：将石子从 5 移动到 4 再移动到 3，或者我们可以直接将石子移动到 3。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：a = 4, b = 3, c = 2</span><br><span class="line">输出：[0, 0]</span><br><span class="line">解释：我们无法进行任何移动。</span><br></pre></td></tr></tbody></table></figure><p>提示：</p><ul><li>1 &lt;= a &lt;= 100</li><li>1 &lt;= b &lt;= 100</li><li>1 &lt;= c &lt;= 100</li><li>a != b, b != c, c != a</li></ul><h2 id="🌸解法：分类讨论"><a href="#🌸解法：分类讨论" class="headerlink" title="🌸解法：分类讨论"></a>🌸解法：分类讨论</h2><p>这道题给出的数据并没有直接给你排好序了的，他的数据顺序是乱的（这是一个小小的坑）</p><p>假设已经排好序了那么要求出最大次数和最小次数，即</p><ul><li>最大次数，无疑就是一步一步的走，即最后一个元素减去第一个元素 再减二（这很好推断，自己画一个数轴就知道了）</li><li>最小次数，只能是1或者2，这就要分类讨论了<ul><li>最小次数为一，即只需要动一步，即已经有两个数是连续的了或者两个数之间只有一个空的时候,例如 <code>1  2  5</code>、<code>1  3  5</code>。</li><li>最小次数为二，即除上面情况之后的所有情况</li></ul></li></ul><p>代码就很好得出了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] numMovesStones(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) {</span><br><span class="line">    <span class="keyword">int</span> max = Math.max(Math.max(a, b), c);<span class="comment">//找到最大值</span></span><br><span class="line">    <span class="keyword">int</span> min = Math.min(Math.min(a, b), c);<span class="comment">//找到最小值</span></span><br><span class="line">    <span class="keyword">int</span> cur = a + b + c - max - min; <span class="comment">// 找到中间那个数</span></span><br><span class="line">    <span class="keyword">if</span>(max - cur == <span class="number">1</span> &amp;&amp; cur - min == <span class="number">1</span>) { <span class="comment">//如果已经是连续的了，则不用移动</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">0</span>, <span class="number">0</span>};</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(max - cur &lt;= <span class="number">2</span> || cur - min &lt;= <span class="number">2</span>) { <span class="comment">//不连续但是有其中两个中间只有一个位置时候例如：1 3 4 、 1 3 5，都只需要最小移动一次即可连续</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] {<span class="number">1</span>, max - min - <span class="number">2</span>};</span><br><span class="line">    }<span class="keyword">else</span> {<span class="comment">//否则最少移动两次才可以连续</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] {<span class="number">2</span>, max - min - <span class="number">2</span>};</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸题目-1"><a href="#🌸题目-1" class="headerlink" title="🌸题目"></a>🌸题目</h2><p>你和你的朋友，两个人一起玩 Nim 游戏：</p><p>桌子上有一堆石头。<br>你们轮流进行自己的回合，你作为先手。<br>每一回合，轮到的人拿掉 1 - 3 块石头。<br>拿掉最后一块石头的人就是获胜者。<br>j假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false 。</p><p>示例1：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：false </span><br><span class="line">解释：如果堆中有 4 块石头，那么你永远不会赢得比赛；</span><br><span class="line">     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿</span><br></pre></td></tr></tbody></table></figure><p>走。<br>示例 2：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：true</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：n = 2</span><br><span class="line">输出：true</span><br></pre></td></tr></tbody></table></figure><p>提示：</p><ul><li>1 &lt;= n &lt;= 2^31 - 1</li></ul><h2 id="🌸解法一：记忆化递归"><a href="#🌸解法一：记忆化递归" class="headerlink" title="🌸解法一：记忆化递归"></a>🌸解法一：记忆化递归</h2><ul><li>为什么在两个人「足够聪明」（你们是聪明人，每一步都是最优解）这个前提下，比赛的结果是「由输入数据确定的」</li></ul><p>用具体的例子 8 进行分析可以得出结论：</p><p>当 N = 3 的时候，当前做出选择的人可以拿掉最后一块石头，获得胜利；<br>然后我们逐层向上分析，当 N = 4的时候，无论当前做出哪一种选择，对方都会赢，所以当前只能输掉比赛；<br>如果当前这一层的结点里「有输有赢」，因为我们「足够聪明」，所以必须选择可以让对方输掉的分支，好让自己赢；<br>对于这个问题的特点是，当 N不是 4 的倍数的时候，先手（当前做出选择的人），或者说游戏一开始做出选择的玩家一定会输。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="comment">// 使用包装类型的布尔数组，可以用 null 这个状态，表示当前 n 的结果还没有被计算出来</span></span><br><span class="line">    Boolean[] memo = <span class="keyword">new</span> Boolean[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> dfs(n, memo);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, Boolean[] memo)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memo[n] != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> memo[n];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 3 种选择，只要有一种对方输掉，自己就可以赢</span></span><br><span class="line">    <span class="keyword">if</span> (!dfs(n - <span class="number">1</span>, memo) || !dfs(n - <span class="number">2</span>, memo) || !dfs(n - <span class="number">3</span>, memo)) {</span><br><span class="line">        memo[n] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 否则自己输</span></span><br><span class="line">    memo[n] = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法二：动态规划"><a href="#🌸解法二：动态规划" class="headerlink" title="🌸解法二：动态规划"></a>🌸解法二：动态规划</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dp[0] 的值可以不管，没有意义</span></span><br><span class="line">    dp[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="keyword">true</span>;</span><br><span class="line">    dp[<span class="number">3</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; i++) {</span><br><span class="line">        dp[i] = !dp[i - <span class="number">1</span>] || !dp[i - <span class="number">2</span>] || !dp[i - <span class="number">3</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>滚动数组优化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">4</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="keyword">false</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="keyword">true</span>;</span><br><span class="line">    dp[<span class="number">3</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; i++) {</span><br><span class="line">        dp[i % <span class="number">4</span>] = !dp[(i - <span class="number">1</span>) % <span class="number">4</span>] || !dp[(i - <span class="number">2</span>) % <span class="number">4</span>] || !dp[(i - <span class="number">3</span>) % <span class="number">4</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dp[n % <span class="number">4</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法三：数学方法"><a href="#🌸解法三：数学方法" class="headerlink" title="🌸解法三：数学方法"></a>🌸解法三：数学方法</h2><p>让我们考虑一些小例子。显而易见的是，如果石头堆中只有一块、两块、或是三块石头，那么在你的回合，你就可以把全部石子拿走，从而在游戏中取胜。而如果就像题目描述那样，堆中恰好有四块石头，你就会失败。因为在这种情况下不管你取走多少石头，总会为你的对手留下几块，使得他可以在游戏中打败你。因此，要想获胜，在你的回合中，必须避免石头堆中的石子数为 4 的情况。</p><p>同样地，如果有五块、六块、或是七块石头，你可以控制自己拿取的石头数，总是恰好给你的对手留下四块石头，使他输掉这场比赛。但是如果石头堆里有八块石头，你就不可避免地会输掉，因为不管你从一堆石头中挑出一块、两块还是三块，你的对手都可以选择三块、两块或一块，以确保在再一次轮到你的时候，你会面对四块石头。</p><p>显然，它以相同的模式不断重复 n=4,8,12,16,…，基本可以看出是 4 的倍数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> (n % <span class="number">4</span>) != <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可怕可怕。。。</p><h2 id="🌸题目-2"><a href="#🌸题目-2" class="headerlink" title="🌸题目"></a>🌸题目</h2><p>给你两个字符串，请你从这两个字符串中找出最长的特殊序列。</p><p>「最长特殊序列」定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。</p><p>子序列 可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。</p><p>输入为两个字符串，输出最长特殊序列的长度。如果不存在，则返回 -1。</p><p>示例 1：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: "aba", "cdc"</span><br><span class="line">输出: 3</span><br><span class="line">解释: 最长特殊序列可为 "aba" (或 "cdc")，两者均为自身的子序列且不是对方的子序列。</span><br></pre></td></tr></tbody></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = "aaa", b = "bbb"</span><br><span class="line">输出：3</span><br></pre></td></tr></tbody></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = "aaa", b = "aaa"</span><br><span class="line">输出：-1</span><br></pre></td></tr></tbody></table></figure><p>提示：</p><ul><li>两个字符串长度均处于区间 [1 - 100] 。</li><li>字符串中的字符仅含有 ‘a’~’z’ 。</li></ul><h2 id="🌸解法一：暴力解法"><a href="#🌸解法一：暴力解法" class="headerlink" title="🌸解法一：暴力解法"></a>🌸解法一：暴力解法</h2><p>暴力解法中，生成两个字符串所有的子序列共 2^n<br>  个，将其存储在 hashmap 中，并记录每个子序列出现的次数。然后找出出现次数为 11 的最长子序列。如果不存在这样的子序列，返回 -1。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLUSlength</span><span class="params">(String a, String b)</span> </span>{</span><br><span class="line">    HashMap &lt; String, Integer &gt; map = <span class="keyword">new</span> HashMap &lt; &gt; ();</span><br><span class="line">    <span class="keyword">for</span> (String s: <span class="keyword">new</span> String[] {a, b}) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; s.length()); i++) {</span><br><span class="line">            String t = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++) {</span><br><span class="line">                <span class="keyword">if</span> (((i &gt;&gt; j) &amp; <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">                    t += s.charAt(j);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(t))</span><br><span class="line">                map.put(t, map.get(t) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                map.put(t, <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (String s: map.keySet()) {</span><br><span class="line">        <span class="keyword">if</span> (map.get(s) == <span class="number">1</span>)</span><br><span class="line">            res = Math.max(res, s.length());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法二：寻找规律"><a href="#🌸解法二：寻找规律" class="headerlink" title="🌸解法二：寻找规律"></a>🌸解法二：寻找规律</h2><p>字符串 a 和 b 共有 3 种情况：</p><ul><li><p>a=b。如果两个字符串相同，则没有特殊子序列，返回 -1。</p></li><li><p>length(a)=length(b) 且 a != b。例如：abc 和 abd。这种情况下，一个字符串一定不会是另外一个字符串的子序列，因此可以将任意一个字符串看作是特殊子序列，返回 length(a) 或 length(b)</p></li><li><p>length(a)&gt; =length(b)。例如：abcd 和 abc。这种情况下，长的字符串一定不会是短字符串的子序列，因此可以将长字符串看作是特殊子序列，返回 max(length(a),length(b))。</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLUSlength</span><span class="params">(String a, String b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(a.equals(b)){</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> Math.max(a.length(), b.length());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;哎，最近忙着ACM和蓝桥杯（毕竟都是第一次参赛的小白），可把自己整迷糊了，当两项比赛全部告一段落，自己才是真的觉悟到自己与别人的差距以及自己的大脑思考问题的能力很是欠缺，还有就是思考不够全面，往往一道题明明自己已经写出了方法，但硬是在比赛途中想不出一种有效的方法去优化方法和更快的得出答案，总是赛后诸葛亮的想出这该怎么做，那该怎么做，这些欠缺都导致自己在ACM和蓝桥杯中丢失得分，看来还是得努力呀，不让自己变得更强又何能征战星辰大海呢，先来练练思维能力吧，从最简单的脑筋急转弯开始！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="动态规划" scheme="https://liudufu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="记忆化递归" scheme="https://liudufu.github.io/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E9%80%92%E5%BD%92/"/>
    
      <category term="取模运算" scheme="https://liudufu.github.io/tags/%E5%8F%96%E6%A8%A1%E8%BF%90%E7%AE%97/"/>
    
      <category term="找规律" scheme="https://liudufu.github.io/tags/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>一文搞定常见的链表问题</title>
    <link href="https://liudufu.github.io/Linked_list_problem/"/>
    <id>https://liudufu.github.io/Linked_list_problem/</id>
    <published>2020-11-08T12:14:46.000Z</published>
    <updated>2020-11-08T12:18:31.960Z</updated>
    
    <content type="html"><![CDATA[<p>作为线性表的两种存储方式 —— 链表和数组，这对相爱相杀的好基友有着各自的优缺点。接下来，我们梳理一下这两种方式。</p><p>数组，所有元素都连续的存储于一段内存中，且每个元素占用的内存大小相同。这使得数组具备了通过下标快速访问数据的能力。<br>但连续存储的缺点也很明显，增加容量，增删元素的成本很高，时间复杂度均为 O(n)。</p><a id="more"></a><p>增加数组容量需要先申请一块新的内存，然后复制原有的元素。如果需要的话，可能还要删除原先的内存。</p><p>删除元素时需要移动被删除元素之后的所有元素以保证所有元素是连续的。增加元素时需要移动指定位置及之后的所有元素，然后将新增元素插入到指定位置，如果容量不足的话还需要先进行扩容操作。</p><p>总结一下数组的优缺点：</p><p>优点：可以根据偏移实现快速的随机读写。<br>缺点：扩容，增删元素极慢。<br>链表，由若干个结点组成，每个结点包含数据域和指针域。结点结构如下图所示：</p><p>一般来讲，链表中只会有一个结点的指针域为空，该结点为尾结点，其他结点的指针域都会存储一个结点的内存地址。链表中也只会有一个结点的内存地址没有存储在其他结点的指针域，该结点称为头结点。</p><p>链表的存储方式使得它可以高效的在指定位置插入与删除，时间复杂度均为 O(1)。<br>在结点 p 之后增加一个结点 q 总共分三步：</p><p>申请一段内存用以存储 q (可以使用内存池避免频繁申请和销毁内存)。<br>将 p 的指针域数据复制到 q 的指针域。<br>更新 p 的指针域为 q 的地址。</p><p>删除结点 p 之后的结点 q 总共分两步：</p><ol><li><p>将 q 的指针域复制到 p 的指针域。</p></li><li><p>释放 q 结点的内存。</p><p>链表的主要代码</p></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结点模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">T data;</span><br><span class="line">Node *next;</span><br><span class="line">Node() : next(<span class="literal">nullptr</span>) {}</span><br><span class="line">Node(<span class="keyword">const</span> T &amp;d) : data(d), next(<span class="literal">nullptr</span>) {}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除 p 结点后面的元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove</span><span class="params">(Node&lt;T&gt; *p)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">nullptr</span> || p-&gt;next == <span class="literal">nullptr</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">auto</span> tmp = p-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p-&gt;next;</span><br><span class="line">p-&gt;next = tmp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//在 p 结点后面插入元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Node&lt;T&gt; *p, <span class="keyword">const</span> T &amp;data)</span> </span>{</span><br><span class="line"><span class="keyword">auto</span> tmp = <span class="keyword">new</span> Node&lt;T&gt;(data);</span><br><span class="line">tmp-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = tmp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> V&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Walk</span><span class="params">(Node&lt;T&gt; *p, <span class="keyword">const</span> V &amp;vistor)</span> </span>{</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">nullptr</span>) {</span><br><span class="line">vistor(p);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">auto</span> p = <span class="keyword">new</span> Node&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>);</span><br><span class="line">Insert(p, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">Walk(p, [&amp;sum](<span class="keyword">const</span> Node&lt;<span class="keyword">int</span>&gt; *p) -&gt; <span class="keyword">void</span> { sum += p-&gt;data; });</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Remove(p);</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">Walk(p, [&amp;sum](<span class="keyword">const</span> Node&lt;<span class="keyword">int</span>&gt; *p) -&gt; <span class="keyword">void</span> { sum += p-&gt;data; });</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode() {}</span><br><span class="line">    ListNode(<span class="keyword">int</span> val) { <span class="keyword">this</span>.val = val; }</span><br><span class="line">    ListNode(<span class="keyword">int</span> val, ListNode next) { <span class="keyword">this</span>.val = val; <span class="keyword">this</span>.next = next; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> <strong>面试问题总结</strong></p><p>无法高效获取长度，无法根据偏移快速访问元素，是链表的两个劣势。然而面试的时候经常碰见诸如获取倒数第k个元素，获取中间位置的元素，判断链表是否存在环，判断环的长度等和长度与位置有关的问题。这些问题都可以通过灵活运用双指针来解决。</p><p>Tips：双指针并不是固定的公式，而是一种思维方式~</p><p>先来看”倒数第k个元素的问题”。设有两个指针 p 和 q，初始时均指向头结点。首先，先让 p 沿着 next 移动 k 次。此时，p 指向第 k+1个结点，q 指向头节点，两个指针的距离为 k 。然后，同时移动 p 和 q，直到 p 指向空，此时 q 即指向倒数第 k 个结点。可以参考下图来理解：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">        ListNode *p = head, *q = head; <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">while</span>(k--) {   <span class="comment">//将 p指针移动 k 次</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">nullptr</span>) {<span class="comment">//同时移动，直到 p == nullptr</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>获取中间元素的问题。设有两个指针 fast 和 slow，初始时指向头节点。每次移动时，fast向后走两次，slow向后走一次，直到 fast 无法向后走两次。这使得在每轮移动之后。fast 和 slow 的距离就会增加一。设链表有 n 个元素，那么最多移动 n/2 轮。当 n 为奇数时，slow 恰好指向中间结点，当 n 为 偶数时，slow 恰好指向中间两个结点的靠前一个(可以考虑下如何使其指向后一个结点呢？)。</p><p>下述代码实现了 n 为<strong>偶数</strong>时慢指针指向<strong>靠后结点</strong>。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>{</span><br><span class="line">        ListNode *p = head, *q = head;</span><br><span class="line">        <span class="keyword">while</span>(q != <span class="literal">nullptr</span> &amp;&amp; q-&gt;next != <span class="literal">nullptr</span>) {</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            q = q-&gt;next-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    } </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>是否存在环的问题。如果将尾结点的 next 指针指向其他任意一个结点，那么链表就存在了一个环。</p><p>一部分中，总结快慢指针的特性 —— 每轮移动之后两者的距离会加一。下面会继续用该特性解决环的问题。<br>当一个链表有环时，快慢指针都会陷入环中进行无限次移动，然后变成了追及问题。想象一下在操场跑步的场景，只要一直跑下去，快的总会追上慢的。当两个指针都进入环后，每轮移动使得慢指针到快指针的距离增加一，同时快指针到慢指针的距离也减少一，只要一直移动下去，快指针总会追上慢指针。</p><p>根据上述表述得出，如果一个链表存在环，那么快慢指针必然会相遇。实现代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>{</span><br><span class="line">        ListNode *slow = head;</span><br><span class="line">        ListNode *fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span>) {</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(fast != <span class="literal">nullptr</span>) {</span><br><span class="line">                fast = fast-&gt;next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(fast == slow) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>后一个问题，如果存在环，如何判断环的长度呢？方法是，快慢指针相遇后继续移动，直到第二次相遇。两次相遇间的移动次数即为环的长度。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为线性表的两种存储方式 —— 链表和数组，这对相爱相杀的好基友有着各自的优缺点。接下来，我们梳理一下这两种方式。&lt;/p&gt;
&lt;p&gt;数组，所有元素都连续的存储于一段内存中，且每个元素占用的内存大小相同。这使得数组具备了通过下标快速访问数据的能力。&lt;br&gt;但连续存储的缺点也很明显，增加容量，增删元素的成本很高，时间复杂度均为 O(n)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="链表" scheme="https://liudufu.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数组" scheme="https://liudufu.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="指针" scheme="https://liudufu.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
</feed>
