<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云澈の博客</title>
  
  <subtitle>不经历风雨，怎能见彩虹！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liudufu.github.io/"/>
  <updated>2020-12-08T13:33:03.918Z</updated>
  <id>https://liudufu.github.io/</id>
  
  <author>
    <name>云澈</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>servlet基础</title>
    <link href="https://liudufu.github.io/Servlet_Basics/"/>
    <id>https://liudufu.github.io/Servlet_Basics/</id>
    <published>2020-12-08T13:30:39.000Z</published>
    <updated>2020-12-08T13:33:03.918Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p></blockquote><a id="more"></a><h2 id="🌸Servlet-简介"><a href="#🌸Servlet-简介" class="headerlink" title="🌸Servlet 简介"></a>🌸Servlet 简介</h2><h3 id="🍁Servlet-是什么？"><a href="#🍁Servlet-是什么？" class="headerlink" title="🍁Servlet 是什么？"></a>🍁Servlet 是什么？</h3><p>java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p><p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p><ul><li>性能明显更好。</li><li>Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。</li><li>Servlet 是独立于平台的，因为它们是用 Java 编写的。</li><li>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。</li><li>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</li></ul><h3 id="🍁Servlet-架构"><a href="#🍁Servlet-架构" class="headerlink" title="🍁Servlet 架构"></a>🍁Servlet 架构</h3><p><a href="https://imgchr.com/i/dX9zf1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX9zf1.png" alt="dX9zf1.png"></a></p><h3 id="🍁Servlet在做什么"><a href="#🍁Servlet在做什么" class="headerlink" title="🍁Servlet在做什么"></a>🍁Servlet在做什么</h3><ul><li>读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li><li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li><li>处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li><li>发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li><li>发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li></ul><hr><h2 id="🌸Servlet-创建的三种方式"><a href="#🌸Servlet-创建的三种方式" class="headerlink" title="🌸Servlet 创建的三种方式"></a>🌸Servlet 创建的三种方式</h2><h3 id="🍁实现-Servlet-接口"><a href="#🍁实现-Servlet-接口" class="headerlink" title="🍁实现 Servlet 接口"></a>🍁实现 Servlet 接口</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Servlet的生命周期:从Servlet被创建到Servlet被销毁的过程</span></span><br><span class="line"><span class="comment">//一次创建，到处服务</span></span><br><span class="line"><span class="comment">//一个Servlet只会有一个对象，服务所有的请求</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.实例化（使用构造方法创建对象）</span></span><br><span class="line"><span class="comment"> * 2.初始化  执行init方法</span></span><br><span class="line"><span class="comment"> * 3.服务     执行service方法</span></span><br><span class="line"><span class="comment"> * 4.销毁    执行destroy方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public ServletDemo1(){}</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//生命周期方法:当Servlet第一次被创建对象时执行该方法,该方法在整个生命周期中只执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">                System.out.println(<span class="string">"=======init========="</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生命周期方法:对客户端响应的方法,该方法会被执行多次，每次请求该servlet都会执行该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest arg0, ServletResponse arg1)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"hehe"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生命周期方法:当Servlet被销毁时执行该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"******destroy**********"</span>);</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//当停止tomcat时也就销毁的servlet。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁继承-GenericServlet-类"><a href="#🍁继承-GenericServlet-类" class="headerlink" title="🍁继承 GenericServlet 类"></a>🍁继承 GenericServlet 类</h3><p>这种方法我们极少用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest arg0, ServletResponse arg1)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"heihei"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁继承-HttpServlet-方法"><a href="#🍁继承-HttpServlet-方法" class="headerlink" title="🍁继承 HttpServlet 方法"></a>🍁继承 HttpServlet 方法</h3><p><code>经常用</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"haha"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"ee"</span>);</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸HttpServlet、GenericServlet-和-Servlet-的关系"><a href="#🌸HttpServlet、GenericServlet-和-Servlet-的关系" class="headerlink" title="🌸HttpServlet、GenericServlet 和 Servlet 的关系"></a>🌸HttpServlet、GenericServlet 和 Servlet 的关系</h2><blockquote><p>对于一个 Servlet 类，我们日常最常用的方法是继承自 HttpServlet 类，提供了 Http 相关的方法，HttpServlet 扩展了 GenericServlet 类，而 GenericServlet 类又实现了 Servlet 类和 ServletConfig 类。</p></blockquote><h3 id="🍁Servlet"><a href="#🍁Servlet" class="headerlink" title="🍁Servlet"></a>🍁Servlet</h3><p>Servlet 类提供了五个方法，其中三个生命周期方法和两个普通方法，关于 Servlet 类的方法，不再赘述</p><h3 id="🍁GenericServlet"><a href="#🍁GenericServlet" class="headerlink" title="🍁GenericServlet"></a>🍁GenericServlet</h3><p><code>GenericServlet</code> 是一个抽象类，实现了 Servlet 接口，并且对其中的 <code>init()</code> 和 <code>destroy()</code> 和 <code>service()</code> 提供了默认实现。在 <code>GenericServlet</code> 中，主要完成了以下任务：</p><ul><li>将 init() 中的 ServletConfig 赋给一个类级变量，可以由 getServletConfig 获得；</li><li>为 Servlet 所有方法提供默认实现；</li><li>可以直接调用 ServletConfig 中的方法；</li></ul><p>基本的结构如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>,<span class="title">ServletConfig</span></span>{</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//GenericServlet通过将ServletConfig赋给类级变量</span></span><br><span class="line">   <span class="keyword">private</span> trServletConfig servletConfig;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.servletConfig=servletConfig;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*自定义init()的原因是：如果子类要初始化必须覆盖父类的init() 而使它无效 这样</span></span><br><span class="line"><span class="comment">       this.servletConfig=servletConfig不起作用 这样就会导致空指针异常 这样如果子类要初始化，</span></span><br><span class="line"><span class="comment">       可以直接覆盖不带参数的init()方法 */</span></span><br><span class="line">      <span class="keyword">this</span>.init();</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//自定义的init()方法，可以由子类覆盖  </span></span><br><span class="line">   <span class="comment">//init()不是生命周期方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">  </span><br><span class="line">   }</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//实现service()空方法，并且声明为抽象方法，强制子类必须实现service()方法 </span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request,ServletResponse response)</span> </span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> ServletException,java.io.IOException</span>{</span><br><span class="line">   }</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//实现空的destroy方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>{ }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>如果继承这个类的话，我们必须重写 service() 方法来对处理请求。</strong></p><h3 id="🍁HttpServlet"><a href="#🍁HttpServlet" class="headerlink" title="🍁HttpServlet"></a>🍁HttpServlet</h3><p>HttpServlet 也是一个抽象类，它进一步继承并封装了 GenericServlet，使得使用更加简单方便，由于是扩展了 Http 的内容，所以还需要使用 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code>，这两个类分别是 ServletRequest 和 <code>ServletResponse</code> 的子类。代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>{</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//HttpServlet中的service()</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                       HttpServletResponse httpServletResponse)</span></span>{</span><br><span class="line">        <span class="comment">//该方法通过httpServletRequest.getMethod()判断请求类型调用doGet() doPost()</span></span><br><span class="line">   }</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//必须实现父类的service()方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest,ServletResponse servletResponse)</span></span>{</span><br><span class="line">      HttpServletRequest request;</span><br><span class="line">      HttpServletResponse response;</span><br><span class="line">      <span class="keyword">try</span>{</span><br><span class="line">         request=(HttpServletRequest)servletRequest;</span><br><span class="line">         response=(HttpServletResponse)servletResponse;</span><br><span class="line">      }<span class="keyword">catch</span>(ClassCastException){</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"non-http request or response"</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">//调用service()方法</span></span><br><span class="line">      <span class="keyword">this</span>.service(request,response);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们可以看到，HttpServlet 中对原始的 Servlet 中的方法都进行了默认的操作，不需要显式的销毁初始化以及 <code>service()</code>，在 HttpServlet 中，自定义了一个新的 <code>service()</code> 方法，其中通过 getMethod() 方法判断请求的类型，从而调用 <code>doGet()</code> 或者 <code>doPost()</code> 处理 <code>get,post</code> 请求，使用者只需要继承 <code>HttpServlet</code>，然后重写 <code>doPost()</code> 或者 <code>doGet()</code> 方法处理请求即可。</p><p><strong>我们一般都使用继承 HttpServlet 的方式来定义一个 servlet。</strong></p><hr><h2 id="🌸Servlet环境配置（Eclipse）"><a href="#🌸Servlet环境配置（Eclipse）" class="headerlink" title="🌸Servlet环境配置（Eclipse）"></a>🌸Servlet环境配置（Eclipse）</h2><p>使用 Eclipse 来搭建 JSP 开发环境，首先我们分别下载一下软件包</p><ul><li><strong>Eclipse J2EE：</strong><a href="http://www.eclipse.org/downloads/" target="_blank" rel="noopener">http://www.eclipse.org/downloads/</a></li><li><strong>Tomcat：</strong><a href="http://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">http://tomcat.apache.org/download-70.cgi</a></li></ul><h3 id="🍁Tomcat-下载安装"><a href="#🍁Tomcat-下载安装" class="headerlink" title="🍁Tomcat 下载安装"></a>🍁Tomcat 下载安装</h3><p><a href="https://imgchr.com/i/dXrmcQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXrmcQ.png" alt="dXrmcQ.png"></a></p><p>下载之后，将压缩包解压到盘（你可以自己选择）：</p><p><a href="https://imgchr.com/i/dXrEh8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXrEh8.png" alt="dXrEh8.png"></a></p><p>注意目录名不能有中文和空格。目录介绍如下：</p><ul><li>bin：二进制执行文件。里面最常用的文件是<strong>startup.bat</strong>，如果是 Linux 或 Mac 系统启动文件为 <strong>startup.sh</strong>。</li><li>conf:配置目录。里面最核心的文件是<strong>server.xml</strong>。可以在里面改端口号等。默认端口号是8080，也就是说，此端口号不能被其他应用程序占用。</li><li>lib：库文件。tomcat运行时需要的jar包所在的目录</li><li>logs：日志</li><li>temp：临时产生的文件，即缓存</li><li>webapps：web的应用程序。<strong>web应用放置到此目录下浏览器可以直接访问</strong></li><li>work：编译以后的class文件。</li></ul><p>接着我们可以双击 startup.bat 启动 Tomcat，弹出如下界面：</p><p><a href="https://imgchr.com/i/dXrAtf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXrAtf.png" alt="dXrAtf.png"></a></p><p>这个时候，本地的服务器就已经搭建起来了。如果想关闭服务器，可以直接关闭上面的窗口，或者在里面输入Ctrl+C禁止服务。</p><p>接着我们在浏览器中输入 <strong><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></strong>，如果弹出如下界面，表示tomcat安装成功并且启动起来了：</p><p><a href="https://imgchr.com/i/dXre1g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXre1g.png" alt="dXre1g.png"></a></p><p>首先在apache-tomcat-9.0.37\webapps\ROOT目录中新建一个jsp文件：</p><p><a href="https://imgchr.com/i/dXrZ9S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXrZ9S.png" alt="dXrZ9S.png"></a></p><p>test.jsp 文件代码如下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.<span class="keyword">print</span>(<span class="string">"云澈 : https://liudufu.github.io"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><p>接着在浏览器中访问地址 <strong><a href="http://localhost:8080/test.jsp" target="_blank" rel="noopener">http://localhost:8080/test.jsp</a></strong>, 输出结果如下：</p><p><a href="https://imgchr.com/i/dX6yCV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX6yCV.png" alt="dX6yCV.png"></a></p><h3 id="🍁Tomcat-和-Eclipse-相关联"><a href="#🍁Tomcat-和-Eclipse-相关联" class="headerlink" title="🍁Tomcat 和 Eclipse 相关联"></a>🍁Tomcat 和 Eclipse 相关联</h3><p>打开Java EE ，选择菜单栏Windows–&gt;preferences（Mac 系统为 Eclipse–&gt;偏好设置），弹出如下界面：</p><p><img src="https://www.runoob.com/wp-content/uploads/2016/01/232111301681549.png" alt=""></p><p>上图中，点击”add”的添加按钮，弹出如下界面：</p><p><a href="https://imgchr.com/i/dXcFKg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dXcFKg.png" alt="dXcFKg.png"></a></p><p>点击 “Finish”，完成配置。</p><h3 id="🍁创建实例"><a href="#🍁创建实例" class="headerlink" title="🍁创建实例"></a>🍁创建实例</h3><p>选择 “File–&gt;New–&gt;Dynamic Web Project”，创建 TomcatTest 项目：</p><p><a href="https://imgchr.com/i/dX2r4I" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2r4I.png" alt="dX2r4I.png"></a></p><p><a href="https://imgchr.com/i/dX2BEd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2BEd.png" alt="dX2BEd.png"></a></p><p>工程文件结构：</p><p><a href="https://imgchr.com/i/dX2wHH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2wHH.png" alt="dX2wHH.png"></a></p><p>上图中各个目录解析：</p><ul><li>deployment descriptor：部署的描述。</li><li>Web App Libraries：自己加的包可以放在里面。</li><li>build：放入编译之后的文件。</li><li>WebContent:放进写入的页面。</li></ul><p>在WebContent文件夹下新建一个test.jsp文件。在下图中可以看到它的默认代码：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>接着我们修改下test.jsp文件代码如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</span><br><span class="line">    pageEncoding="UTF-8"%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</span><br><span class="line">&lt;title&gt;云澈&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.println("Hello World!");</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行该项目:</p><p><a href="https://imgchr.com/i/dX2DUA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2DUA.png" alt="dX2DUA.png"></a></p><p>浏览器访问 <code>http://localhost:8080/TomcatTest/test.jsp</code>, 即可输出正常结果：</p><p><a href="https://imgchr.com/i/dX2dDe" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2dDe.png" alt="dX2dDe.png"></a></p><h3 id="🍁Servlet-实例创建"><a href="#🍁Servlet-实例创建" class="headerlink" title="🍁Servlet 实例创建"></a>🍁Servlet 实例创建</h3><p>使用以上环境创建 Servlet 文件，选择 “File–&gt;New–&gt;Servlet”:</p><p><a href="https://imgchr.com/i/dX268P" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX268P.png" alt="dX268P.png"></a></p><p>HelloServlet.java 代码如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yunche.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/HelloServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloServlet</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// 使用 GBK 设置中文正常显示</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">"GBK"</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">"云澈：https://liudufu.github.io"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建 /TomcatTest/WebContent/WEB-INF/web.xml 文件（如果没有），代码如下所示：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee   </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">     <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yunche.test.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/HelloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>接着重启 Tomcat，浏览器访问 <code>http://localhost:8080/TomcatTest/HelloServlet：</code></p><p><a href="https://imgchr.com/i/dX2yCt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/31/dX2yCt.png" alt="dX2yCt.png"></a></p><hr><h2 id="🌸Servlet-生命周期"><a href="#🌸Servlet-生命周期" class="headerlink" title="🌸Servlet 生命周期"></a>🌸Servlet 生命周期</h2><p>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><ul><li>Servlet 通过调用 <strong>init ()</strong> 方法进行初始化。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 通过调用 <strong>destroy()</strong> 方法终止（结束）。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><p>现在让我们详细讨论生命周期的方法。</p><h3 id="🍁init-方法"><a href="#🍁init-方法" class="headerlink" title="🍁init() 方法"></a>🍁init() 方法</h3><p>init 方法被设计成只调用一次。它在第一次创建 Servlet 时被调用，在后续每次用户请求时不再调用。因此，它是用于一次性初始化，就像 Applet 的 init 方法一样。</p><p>Servlet 创建于用户第一次调用对应于该 Servlet 的 URL 时，但是您也可以指定 Servlet 在服务器第一次启动时被加载。</p><p>当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，适当的时候移交给 doGet 或 doPost 方法。init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。</p><p>init 方法的定义如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">  <span class="comment">// 初始化代码...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁service-方法"><a href="#🍁service-方法" class="headerlink" title="🍁service() 方法"></a>🍁service() 方法</h3><p>service() 方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。</p><p>每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。service() 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法。</p><p>下面是该方法的特征：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void service(ServletRequest request, </span><br><span class="line">                    ServletResponse response) </span><br><span class="line">      throws ServletException, IOException{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>service() 方法由容器调用，service 方法在适当的时候调用 doGet、doPost、doPut、doDelete 等方法。所以，您不用对 service() 方法做任何动作，您只需要根据来自客户端的请求类型来重写 doGet() 或 doPost() 即可。</p><p>doGet() 和 doPost() 方法是每次服务请求中最常用的方法。下面是这两种方法的特</p><h3 id="🍁doGet-方法"><a href="#🍁doGet-方法" class="headerlink" title="🍁doGet() 方法"></a>🍁doGet() 方法</h3><p>GET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 METHOD 的 HTML 表单，它由 doGet() 方法处理。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                  HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">    <span class="comment">// Servlet 代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁doPost-方法"><a href="#🍁doPost-方法" class="headerlink" title="🍁doPost() 方法"></a>🍁doPost() 方法</h3><p>POST 请求来自于一个特别指定了 METHOD 为 POST 的 HTML 表单，它由 doPost() 方法处理。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                   HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">    <span class="comment">// Servlet 代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁destroy-方法"><a href="#🍁destroy-方法" class="headerlink" title="🍁destroy() 方法"></a>🍁destroy() 方法</h3><p>destroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。</p><p>在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。destroy 方法定义如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="comment">// 终止化代码...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁架构图"><a href="#🍁架构图" class="headerlink" title="🍁架构图"></a>🍁架构图</h3><p>下图显示了一个典型的 Servlet 生命周期方案。</p><ul><li>第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。</li><li>Servlet 容器在调用 service() 方法之前加载 Servlet。</li><li>然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。</li></ul><p><a href="https://imgchr.com/i/dxHFxg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/01/dxHFxg.png" alt="dxHFxg.png"></a></p><hr><h2 id="🌸Servlet-实例"><a href="#🌸Servlet-实例" class="headerlink" title="🌸Servlet 实例"></a>🌸Servlet 实例</h2><p>Servlet 是服务 HTTP 请求并实现 <strong>javax.servlet.Servlet</strong> 接口的 Java 类。Web 应用程序开发人员通常编写 Servlet 来扩展 javax.servlet.http.HttpServlet，并实现 Servlet 接口的抽象类专门用来处理 HTTP 请求。</p><h3 id="🍁Hello-World-示例代码"><a href="#🍁Hello-World-示例代码" class="headerlink" title="🍁Hello World 示例代码"></a>🍁Hello World 示例代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 执行必需的初始化</span></span><br><span class="line">      message = <span class="string">"Hello World"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 实际的逻辑是在这里</span></span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;"</span> + message + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 什么也不做</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁Servlet部署"><a href="#🍁Servlet部署" class="headerlink" title="🍁Servlet部署"></a>🍁Servlet部署</h3><p>WEB-INF/ 的 <strong>web.xml</strong> 文件中创建以下条目</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloWorld<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>启动 tomcat 服务器，最后在浏览器的地址栏中输入 <strong><a href="http://localhost:8080/HelloWorld" target="_blank" rel="noopener">http://localhost:8080/HelloWorld</a></strong>。如果一切顺利，您会看到下面的结果：</p><p><a href="https://imgchr.com/i/dxO6c8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/01/dxO6c8.png" alt="dxO6c8.png"></a></p><h3 id="🍁后记"><a href="#🍁后记" class="headerlink" title="🍁后记"></a>🍁后记</h3><p>destory 方法被调用后，servlet 被销毁，但是并没有立即被回收，再次请求时，并没有重新初始化。</p><p>代码示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">    message = <span class="string">"Hello World , Nect To Meet You: "</span> + System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"servlet初始化……"</span>);</span><br><span class="line">    <span class="keyword">super</span>.init();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">    response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">    PrintWriter writer = response.getWriter();</span><br><span class="line">    writer.write(<span class="string">"&lt;h1&gt;"</span> + message + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">    destroy();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{</span><br><span class="line">    System.out.println(<span class="string">"servlet销毁！"</span>);</span><br><span class="line">    <span class="keyword">super</span>.destroy();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>控制台打印：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">servlet初始化……</span><br><span class="line">servlet销毁！</span><br><span class="line">2017-7-6 19:48:52 org.apache.catalina.core.StandardContext reload</span><br><span class="line">信息: Reloading Context with name [/myServlet] has started</span><br><span class="line">servlet销毁！</span><br><span class="line">2017-7-6 19:48:52 org.apache.catalina.core.StandardContext reload</span><br><span class="line">信息: Reloading Context with name [/myServlet] is completed</span><br><span class="line">servlet初始化……</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br></pre></td></tr></tbody></table></figure><p><strong>servlet 浏览器访问路径配置有个小问题：</strong></p><p>1、java 类里的注解 —— @WebServlet(“/HelloServlet”) 对应浏览器路径：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/TomcatTest/HelloServlet</span><br></pre></td></tr></tbody></table></figure><p>2、配置文件（web.xml）里对应的浏览器访问路径：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/TomcatTest/TomcatTest/HelloServlet</span><br></pre></td></tr></tbody></table></figure><p>这两种配一个就好了，不然路径重名的话反而会让tomcat启动不了。</p><p>例如这样就启动不了：</p><p>修改 web.xml :</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;url-pattern&gt;/HelloServlet&lt;/url-pattern&gt;</span><br></pre></td></tr></tbody></table></figure><p>修改后，web.xml 和 java 类的注解，对应路径都是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/TomcatTest/HelloServlet</span><br></pre></td></tr></tbody></table></figure><p><strong>导致</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命名的 servlet[HelloServlet]和 [com.runoob.test.HelloServlet] 都被映射到 URL 模式 [/ HelloServlet] 这是不允许的。</span><br></pre></td></tr></tbody></table></figure><p><strong>解决办法：</strong></p><p>将<strong>注解去掉</strong>或者<strong>保留注解进入web.xml将映射删除</strong>既可以。</p><hr><h2 id="🌸Servlet-表单数据"><a href="#🌸Servlet-表单数据" class="headerlink" title="🌸Servlet 表单数据"></a>🌸Servlet 表单数据</h2><p>很多情况下，需要传递一些信息，从浏览器到 Web 服务器，最终到后台程序。浏览器使用两种方法可将这些信息传递到 Web 服务器，分别为 GET 方法和 POST 方法。</p><h3 id="🍁GET-方法"><a href="#🍁GET-方法" class="headerlink" title="🍁GET 方法"></a>🍁GET 方法</h3><p>GET 方法向页面请求发送已编码的用户信息。页面和已编码的信息中间用 ? 字符分隔，如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.test.com/hello?key1=value1&amp;key2=value2</span><br></pre></td></tr></tbody></table></figure><p>GET 方法是默认的从浏览器向 Web 服务器传递信息的方法，它会产生一个很长的字符串，出现在浏览器的地址栏中。如果您要向服务器传递的是密码或其他的敏感信息，请不要使用 GET 方法。GET 方法有大小限制：请求字符串中最多只能有 1024 个字符。</p><p>这些信息使用 QUERY_STRING 头传递，并可以通过 QUERY_STRING 环境变量访问，Servlet 使用 <strong>doGet()</strong> 方法处理这种类型的请求。</p><h3 id="🍁POST-方法"><a href="#🍁POST-方法" class="headerlink" title="🍁POST 方法"></a>🍁POST 方法</h3><p>另一个向后台程序传递信息的比较可靠的方法是 POST 方法。POST 方法打包信息的方式与 GET 方法基本相同，但是 POST 方法不是把信息作为 URL 中 ? 字符后的文本字符串进行发送，而是把这些信息作为一个单独的消息。消息以标准输出的形式传到后台程序，您可以解析和使用这些标准输出。Servlet 使用 doPost() 方法处理这种类型的请求。</p><h3 id="🍁使用-Servlet-读取表单数据"><a href="#🍁使用-Servlet-读取表单数据" class="headerlink" title="🍁使用 Servlet 读取表单数据"></a>🍁使用 Servlet 读取表单数据</h3><p>Servlet 处理表单数据，这些数据会根据不同的情况使用不同的方法自动解析：</p><ul><li><strong>getParameter()：</strong>您可以调用 request.getParameter() 方法来获取表单参数的值。</li><li><strong>getParameterValues()：</strong>如果参数出现一次以上，则调用该方法，并返回多个值，例如复选框。</li><li><strong>getParameterNames()：</strong>如果您想要得到当前请求中的所有参数的完整列表，则调用该方法。</li></ul><h3 id="🍁使用-URL-的-GET-方法实例"><a href="#🍁使用-URL-的-GET-方法实例" class="headerlink" title="🍁使用 URL 的 GET 方法实例"></a>🍁使用 URL 的 GET 方法实例</h3><p>下面是一个简单的 URL，将使用 GET 方法向 HelloForm 程序传递两个值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/TomcatTest/HelloForm?name=云澈&amp;url=https://liudufu.github.io</span><br></pre></td></tr></tbody></table></figure><p>下面是处理 Web 浏览器输入的 <strong>HelloForm.java</strong> Servlet 程序。我们将使用 <strong>getParameter()</strong> 方法，可以很容易地访问传递的信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloForm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/HelloForm"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloForm</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloForm</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"使用 GET 方法读取表单数据"</span>;</span><br><span class="line">        <span class="comment">// 处理中文</span></span><br><span class="line">        String name =<span class="keyword">new</span> String(request.getParameter(<span class="string">"name"</span>).getBytes(<span class="string">"UTF-8"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;ul&gt;\n"</span> +</span><br><span class="line">            <span class="string">"  &lt;li&gt;&lt;b&gt;站点名&lt;/b&gt;："</span></span><br><span class="line">            + name + <span class="string">"\n"</span> +</span><br><span class="line">            <span class="string">"  &lt;li&gt;&lt;b&gt;网址&lt;/b&gt;："</span></span><br><span class="line">            + request.getParameter(<span class="string">"url"</span>) + <span class="string">"\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/ul&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后我们在 <strong>web.xml</strong> 文件中创建以下条目：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloForm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.HelloForm<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloForm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/HelloForm<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在在浏览器的地址栏中输入<code>http://localhost:8080/TomcatTest/HelloForm?name=云澈&amp;url=https://liudufu.github.io</code>，并在触发上述命令之前确保已经启动 Tomcat 服务器。如果一切顺利，您会得到下面的结果：</p><p><a href="https://imgchr.com/i/wpxUXt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxUXt.png" alt="wpxUXt.png"></a></p><h3 id="🍁使用表单的-GET-方法实例"><a href="#🍁使用表单的-GET-方法实例" class="headerlink" title="🍁使用表单的 GET 方法实例"></a>🍁使用表单的 GET 方法实例</h3><p>下面是一个简单的实例，使用 HTML 表单和提交按钮传递两个值。我们将使用相同的 Servlet HelloForm 来处理输入。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"HelloForm"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">网址名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">网址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>保存这个 HTML 到 hello.html 文件中，目录结构在WebContent下</p><p>尝试输入网址名和网址，然后点击”提交”按钮，</p><p><a href="https://imgchr.com/i/wpxYpd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxYpd.png" alt="wpxYpd.png"></a></p><p><a href="https://imgchr.com/i/wpxt1A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxt1A.png" alt="wpxt1A.png"></a></p><h3 id="🍁使用表单的-POST-方法实例"><a href="#🍁使用表单的-POST-方法实例" class="headerlink" title="🍁使用表单的 POST 方法实例"></a>🍁使用表单的 POST 方法实例</h3><p>让我们对上面的 Servlet 做小小的修改，以便它可以处理 GET 和 POST 方法。下面的 <strong>HelloForm.java</strong> Servlet 程序使用 GET 和 POST 方法处理由 Web 浏览器给出的输入。</p><p>注意：如果表单提交的数据中有中文数据则需要转码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name =<span class="keyword">new</span> String(request.getParameter(<span class="string">"name"</span>).getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloForm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/HelloForm"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloForm</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloForm</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"使用 POST 方法读取表单数据"</span>;</span><br><span class="line">        <span class="comment">// 处理中文</span></span><br><span class="line">        String name =<span class="keyword">new</span> String(request.getParameter(<span class="string">"name"</span>).getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;ul&gt;\n"</span> +</span><br><span class="line">            <span class="string">"  &lt;li&gt;&lt;b&gt;站点名&lt;/b&gt;："</span></span><br><span class="line">            + name + <span class="string">"\n"</span> +</span><br><span class="line">            <span class="string">"  &lt;li&gt;&lt;b&gt;网址&lt;/b&gt;："</span></span><br><span class="line">            + request.getParameter(<span class="string">"url"</span>) + <span class="string">"\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/ul&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在，编译部署上述的 Servlet，并使用带有 POST 方法的 hello.html 进行测试，如下所示</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>云澈(liudufu.github.io)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"HelloForm"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">网址名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">网址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>表单的实际输出与get图相同</p><h3 id="🍁将复选框数据传递到-Servlet-程序"><a href="#🍁将复选框数据传递到-Servlet-程序" class="headerlink" title="🍁将复选框数据传递到 Servlet 程序"></a>🍁将复选框数据传递到 Servlet 程序</h3><p>当需要选择一个以上的选项时，则使用复选框。</p><p>下面是一个 HTML 代码实例 checkbox.html，一个带有两个复选框的表单。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>云澈(liudufu.github.io)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"CheckBox"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"runoob"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span> 云澈</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"google"</span>  /&gt;</span> Google</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"taobao"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span> 淘宝</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"选择站点"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>下面是 CheckBox.java Servlet 程序，处理 Web 浏览器给出的复选框输入。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class CheckBox</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CheckBox"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"读取复选框数据"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">            out.println(docType +</span><br><span class="line">                <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;ul&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;云澈标识：&lt;/b&gt;: "</span></span><br><span class="line">                + request.getParameter(<span class="string">"runoob"</span>) + <span class="string">"\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;Google 标识：&lt;/b&gt;: "</span></span><br><span class="line">                + request.getParameter(<span class="string">"google"</span>) + <span class="string">"\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;淘宝标识：&lt;/b&gt;: "</span></span><br><span class="line">                + request.getParameter(<span class="string">"taobao"</span>) + <span class="string">"\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/ul&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>设置对应的 web.xml：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CheckBox<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.CheckBox<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CheckBox<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/CheckBox<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上面的实例将显示下面的结果：</p><p><a href="https://imgchr.com/i/wpxGfH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxGfH.png" alt="wpxGfH.png"></a></p><p><a href="https://imgchr.com/i/wpxN6I" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxN6I.png" alt="wpxN6I.png"></a></p><h3 id="🍁读取所有的表单参数"><a href="#🍁读取所有的表单参数" class="headerlink" title="🍁读取所有的表单参数"></a>🍁读取所有的表单参数</h3><p>以下是通用的实例，使用 HttpServletRequest 的 <strong>getParameterNames()</strong> 方法读取所有可用的表单参数。该方法返回一个枚举，其中包含未指定顺序的参数名。</p><p>一旦我们有一个枚举，我们可以以标准方式循环枚举，使用 <em>hasMoreElements()</em> 方法来确定何时停止，使用 <em>nextElement()</em> 方法来获取每个参数的名称。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ReadParams</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ReadParams"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadParams</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReadParams</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"读取所有的表单数据"</span>;</span><br><span class="line">        String docType =</span><br><span class="line">            <span class="string">"&lt;!doctype html public \"-//w3c//dtd html 4.0 "</span> +</span><br><span class="line">            <span class="string">"transitional//en\"&gt;\n"</span>;</span><br><span class="line">            out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=\"100%\" border=\"1\" align=\"center\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;tr bgcolor=\"#949494\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;th&gt;参数名称&lt;/th&gt;&lt;th&gt;参数值&lt;/th&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;/tr&gt;\n"</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration paramNames = request.getParameterNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(paramNames.hasMoreElements()) {</span><br><span class="line">            String paramName = (String)paramNames.nextElement();</span><br><span class="line">            out.print(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + paramName + <span class="string">"&lt;/td&gt;\n"</span>);</span><br><span class="line">            String[] paramValues =</span><br><span class="line">            request.getParameterValues(paramName);</span><br><span class="line">            <span class="comment">// 读取单个值的数据</span></span><br><span class="line">            <span class="keyword">if</span> (paramValues.length == <span class="number">1</span>) {</span><br><span class="line">                String paramValue = paramValues[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (paramValue.length() == <span class="number">0</span>)</span><br><span class="line">                    out.println(<span class="string">"&lt;td&gt;&lt;i&gt;没有值&lt;/i&gt;&lt;/td&gt;"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    out.println(<span class="string">"&lt;td&gt;"</span> + paramValue + <span class="string">"&lt;/td&gt;"</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 读取多个值的数据</span></span><br><span class="line">                out.println(<span class="string">"&lt;td&gt;&lt;ul&gt;"</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; paramValues.length; i++) {</span><br><span class="line">                out.println(<span class="string">"&lt;li&gt;"</span> + paramValues[i]);</span><br><span class="line">            }</span><br><span class="line">                out.println(<span class="string">"&lt;/ul&gt;&lt;/td&gt;"</span>);</span><br><span class="line">            }</span><br><span class="line">            out.print(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line">        out.println(<span class="string">"\n&lt;/table&gt;\n&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在，通过下面的表单尝试上面的 Servlet：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>云澈(liudufu.github.io)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"ReadParams"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"maths"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span> 数学</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"physics"</span>  /&gt;</span> 物理</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chemistry"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span> 化学</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"选择学科"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>设置相应的 web.xml:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ReadParams<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.ReadParams<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ReadParams<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/ReadParams<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在使用上面的表单调用 Servlet，将产生以下结果：</p><p><a href="https://imgchr.com/i/wpxw0f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpxw0f.png" alt="wpxw0f.png"></a><br><a href="https://imgchr.com/i/wpx078" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/02/wpx078.png" alt="wpx078.png"></a></p><h2 id="🌸Servlet-客户端-HTTP-请求"><a href="#🌸Servlet-客户端-HTTP-请求" class="headerlink" title="🌸Servlet 客户端 HTTP 请求"></a>🌸Servlet 客户端 HTTP 请求</h2><p>当浏览器请求网页时，它会向 Web 服务器发送特定信息，这些信息不能被直接读取，因为这些信息是作为 HTTP 请求的头的一部分进行传输的。</p><p>以下是来自于浏览器端的重要头信息，您可以在 Web 编程中频繁使用：</p><table><thead><tr><th align="left">头信息</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Accept</td><td align="left">这个头信息指定浏览器或其他客户端可以处理的 MIME 类型。值 <strong>image/png</strong> 或 <strong>image/jpeg</strong> 是最常见的两种可能值。</td></tr><tr><td align="left">Accept-Charset</td><td align="left">这个头信息指定浏览器可以用来显示信息的字符集。例如 ISO-8859-1。</td></tr><tr><td align="left">Accept-Encoding</td><td align="left">这个头信息指定浏览器知道如何处理的编码类型。值 <strong>gzip</strong> 或 <strong>compress</strong> 是最常见的两种可能值。</td></tr><tr><td align="left">Accept-Language</td><td align="left">这个头信息指定客户端的首选语言，在这种情况下，Servlet 会产生多种语言的结果。例如，en、en-us、ru 等。</td></tr><tr><td align="left">Authorization</td><td align="left">这个头信息用于客户端在访问受密码保护的网页时识别自己的身份。</td></tr><tr><td align="left">Connection</td><td align="left">这个头信息指示客户端是否可以处理持久 HTTP 连接。持久连接允许客户端或其他浏览器通过单个请求来检索多个文件。值 <strong>Keep-Alive</strong> 意味着使用了持续连接。</td></tr><tr><td align="left">Content-Length</td><td align="left">这个头信息只适用于 POST 请求，并给出 POST 数据的大小（以字节为单位）。</td></tr><tr><td align="left">Cookie</td><td align="left">这个头信息把之前发送到浏览器的 cookies 返回到服务器。</td></tr><tr><td align="left">Host</td><td align="left">这个头信息指定原始的 URL 中的主机和端口。</td></tr><tr><td align="left">If-Modified-Since</td><td align="left">这个头信息表示只有当页面在指定的日期后已更改时，客户端想要的页面。如果没有新的结果可以使用，服务器会发送一个 304 代码，表示 <strong>Not Modified</strong> 头信息。</td></tr><tr><td align="left">If-Unmodified-Since</td><td align="left">这个头信息是 If-Modified-Since 的对立面，它指定只有当文档早于指定日期时，操作才会成功。</td></tr><tr><td align="left">Referer</td><td align="left">这个头信息指示所指向的 Web 页的 URL。例如，如果您在网页 1，点击一个链接到网页 2，当浏览器请求网页 2 时，网页 1 的 URL 就会包含在 Referer 头信息中。</td></tr><tr><td align="left">User-Agent</td><td align="left">这个头信息识别发出请求的浏览器或其他客户端，并可以向不同类型的浏览器返回不同的内容。</td></tr></tbody></table><h3 id="🍁读取-HTTP-头的方法"><a href="#🍁读取-HTTP-头的方法" class="headerlink" title="🍁读取 HTTP 头的方法"></a>🍁读取 HTTP 头的方法</h3><p>下面的方法可用在 Servlet 程序中读取 HTTP 头。这些方法通过 <em>HttpServletRequest</em> 对象可用。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>Cookie[] getCookies()</strong> 返回一个数组，包含客户端发送该请求的所有的 Cookie 对象。</td></tr><tr><td align="left">2</td><td align="left"><strong>Enumeration getAttributeNames()</strong> 返回一个枚举，包含提供给该请求可用的属性名称。</td></tr><tr><td align="left">3</td><td align="left"><strong>Enumeration getHeaderNames()</strong> 返回一个枚举，包含在该请求中包含的所有的头名。</td></tr><tr><td align="left">4</td><td align="left"><strong>Enumeration getParameterNames()</strong> 返回一个 String 对象的枚举，包含在该请求中包含的参数的名称。</td></tr><tr><td align="left">5</td><td align="left"><strong>HttpSession getSession()</strong> 返回与该请求关联的当前 session 会话，或者如果请求没有 session 会话，则创建一个。</td></tr><tr><td align="left">6</td><td align="left"><strong>HttpSession getSession(boolean create)</strong> 返回与该请求关联的当前 HttpSession，或者如果没有当前会话，且创建是真的，则返回一个新的 session 会话。</td></tr><tr><td align="left">7</td><td align="left"><strong>Locale getLocale()</strong> 基于 Accept-Language 头，返回客户端接受内容的首选的区域设置。</td></tr><tr><td align="left">8</td><td align="left"><strong>Object getAttribute(String name)</strong> 以对象形式返回已命名属性的值，如果没有给定名称的属性存在，则返回 null。</td></tr><tr><td align="left">9</td><td align="left"><strong>ServletInputStream getInputStream()</strong> 使用 ServletInputStream，以二进制数据形式检索请求的主体。</td></tr><tr><td align="left">10</td><td align="left"><strong>String getAuthType()</strong> 返回用于保护 Servlet 的身份验证方案的名称，例如，”BASIC” 或 “SSL”，如果JSP没有受到保护则返回 null。</td></tr><tr><td align="left">11</td><td align="left"><strong>String getCharacterEncoding()</strong> 返回请求主体中使用的字符编码的名称。</td></tr><tr><td align="left">12</td><td align="left"><strong>String getContentType()</strong> 返回请求主体的 MIME 类型，如果不知道类型则返回 null。</td></tr><tr><td align="left">13</td><td align="left"><strong>String getContextPath()</strong> 返回指示请求上下文的请求 URI 部分。</td></tr><tr><td align="left">14</td><td align="left"><strong>String getHeader(String name)</strong> 以字符串形式返回指定的请求头的值。</td></tr><tr><td align="left">15</td><td align="left"><strong>String getMethod()</strong> 返回请求的 HTTP 方法的名称，例如，GET、POST 或 PUT。</td></tr><tr><td align="left">16</td><td align="left"><strong>String getParameter(String name)</strong> 以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。</td></tr><tr><td align="left">17</td><td align="left"><strong>String getPathInfo()</strong> 当请求发出时，返回与客户端发送的 URL 相关的任何额外的路径信息。</td></tr><tr><td align="left">18</td><td align="left"><strong>String getProtocol()</strong> 返回请求协议的名称和版本。</td></tr><tr><td align="left">19</td><td align="left"><strong>String getQueryString()</strong> 返回包含在路径后的请求 URL 中的查询字符串。</td></tr><tr><td align="left">20</td><td align="left"><strong>String getRemoteAddr()</strong> 返回发送请求的客户端的互联网协议（IP）地址。</td></tr><tr><td align="left">21</td><td align="left"><strong>String getRemoteHost()</strong> 返回发送请求的客户端的完全限定名称。</td></tr><tr><td align="left">22</td><td align="left"><strong>String getRemoteUser()</strong> 如果用户已通过身份验证，则返回发出请求的登录用户，或者如果用户未通过身份验证，则返回 null。</td></tr><tr><td align="left">23</td><td align="left"><strong>String getRequestURI()</strong> 从协议名称直到 HTTP 请求的第一行的查询字符串中，返回该请求的 URL 的一部分。</td></tr><tr><td align="left">24</td><td align="left"><strong>String getRequestedSessionId()</strong> 返回由客户端指定的 session 会话 ID。</td></tr><tr><td align="left">25</td><td align="left"><strong>String getServletPath()</strong> 返回调用 JSP 的请求的 URL 的一部分。</td></tr><tr><td align="left">26</td><td align="left"><strong>String[] getParameterValues(String name)</strong> 返回一个字符串对象的数组，包含所有给定的请求参数的值，如果参数不存在则返回 null。</td></tr><tr><td align="left">27</td><td align="left"><strong>boolean isSecure()</strong> 返回一个布尔值，指示请求是否使用安全通道，如 HTTPS。</td></tr><tr><td align="left">28</td><td align="left"><strong>int getContentLength()</strong> 以字节为单位返回请求主体的长度，并提供输入流，或者如果长度未知则返回 -1。</td></tr><tr><td align="left">29</td><td align="left"><strong>int getIntHeader(String name)</strong> 返回指定的请求头的值为一个 int 值。</td></tr><tr><td align="left">30</td><td align="left"><strong>int getServerPort()</strong> 返回接收到这个请求的端口号。</td></tr><tr><td align="left">31</td><td align="left"><strong>int getParameterMap()</strong> 将参数封装成 Map 类型。</td></tr></tbody></table><h3 id="🍁HTTP-Header-请求实例"><a href="#🍁HTTP-Header-请求实例" class="headerlink" title="🍁HTTP Header 请求实例"></a>🍁HTTP Header 请求实例</h3><p>下面的实例使用 HttpServletRequest 的 <strong>getHeaderNames()</strong> 方法读取 HTTP 头信息。该方法返回一个枚举，包含与当前的 HTTP 请求相关的头信息。</p><p>一旦我们有一个枚举，我们可以以标准方式循环枚举，使用 <em>hasMoreElements()</em> 方法来确定何时停止，使用 <em>nextElement()</em> 方法来获取每个参数的名称。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/DisplayHeader"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayHeader</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"HTTP Header 请求实例 - 云澈实例"</span>;</span><br><span class="line">        String docType =</span><br><span class="line">            <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">            out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=\"100%\" border=\"1\" align=\"center\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;tr bgcolor=\"#949494\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;th&gt;Header 名称&lt;/th&gt;&lt;th&gt;Header 值&lt;/th&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;/tr&gt;\n"</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration headerNames = request.getHeaderNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(headerNames.hasMoreElements()) {</span><br><span class="line">            String paramName = (String)headerNames.nextElement();</span><br><span class="line">            out.print(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + paramName + <span class="string">"&lt;/td&gt;\n"</span>);</span><br><span class="line">            String paramValue = request.getHeader(paramName);</span><br><span class="line">            out.println(<span class="string">"&lt;td&gt; "</span> + paramValue + <span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        out.println(<span class="string">"&lt;/table&gt;\n&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上测试实例是位于 TomcatTest 项目下，对应的 web.xml 配置为：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DisplayHeader<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.DisplayHeader<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DisplayHeader<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/DisplayHeader<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在，调用上面的 Servlet，访问 <strong><a href="http://localhost:8080/TomcatTest/DisplayHeader" target="_blank" rel="noopener">http://localhost:8080/TomcatTest/DisplayHeader</a></strong> 会产生以下结果：</p><p><a href="https://imgchr.com/i/wPao0e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/03/wPao0e.png" alt="wPao0e.png"></a></p><h2 id="🌸Servlet-服务器-HTTP-响应"><a href="#🌸Servlet-服务器-HTTP-响应" class="headerlink" title="🌸Servlet 服务器 HTTP 响应"></a>🌸Servlet 服务器 HTTP 响应</h2><p>正如前面的章节中讨论的那样，当一个 Web 服务器响应一个 HTTP 请求时，响应通常包括一个状态行、一些响应报头、一个空行和文档。一个典型的响应如下所示：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Header2: ...</span><br><span class="line">...</span><br><span class="line">HeaderN: ...</span><br><span class="line">  (Blank Line)</span><br><span class="line"><span class="meta">&lt;!doctype ...&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>状态行包括 HTTP 版本（在本例中为 HTTP/1.1）、一个状态码（在本例中为 200）和一个对应于状态码的短消息（在本例中为 OK）。</p><p>下表总结了从 Web 服务器端返回到浏览器的最有用的 HTTP 1.1 响应报头，您会在 Web 编程中频繁地使用它们：</p><table><thead><tr><th align="left">头信息</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Allow</td><td align="left">这个头信息指定服务器支持的请求方法（GET、POST 等）。</td></tr><tr><td align="left">Cache-Control</td><td align="left">这个头信息指定响应文档在何种情况下可以安全地缓存。可能的值有：<strong>public、private</strong> 或 <strong>no-cache</strong> 等。Public 意味着文档是可缓存，Private 意味着文档是单个用户私用文档，且只能存储在私有（非共享）缓存中，no-cache 意味着文档不应被缓存。</td></tr><tr><td align="left">Connection</td><td align="left">这个头信息指示浏览器是否使用持久 HTTP 连接。值 <strong>close</strong> 指示浏览器不使用持久 HTTP 连接，值 <strong>keep-alive</strong> 意味着使用持久连接。</td></tr><tr><td align="left">Content-Disposition</td><td align="left">这个头信息可以让您请求浏览器要求用户以给定名称的文件把响应保存到磁盘。</td></tr><tr><td align="left">Content-Encoding</td><td align="left">在传输过程中，这个头信息指定页面的编码方式。</td></tr><tr><td align="left">Content-Language</td><td align="left">这个头信息表示文档编写所使用的语言。例如，en、en-us、ru 等。</td></tr><tr><td align="left">Content-Length</td><td align="left">这个头信息指示响应中的字节数。只有当浏览器使用持久（keep-alive）HTTP 连接时才需要这些信息。</td></tr><tr><td align="left">Content-Type</td><td align="left">这个头信息提供了响应文档的 MIME（Multipurpose Internet Mail Extension）类型。</td></tr><tr><td align="left">Expires</td><td align="left">这个头信息指定内容过期的时间，在这之后内容不再被缓存。</td></tr><tr><td align="left">Last-Modified</td><td align="left">这个头信息指示文档的最后修改时间。然后，客户端可以缓存文件，并在以后的请求中通过 <strong>If-Modified-Since</strong> 请求头信息提供一个日期。</td></tr><tr><td align="left">Location</td><td align="left">这个头信息应被包含在所有的带有状态码的响应中。在 300s 内，这会通知浏览器文档的地址。浏览器会自动重新连接到这个位置，并获取新的文档。</td></tr><tr><td align="left">Refresh</td><td align="left">这个头信息指定浏览器应该如何尽快请求更新的页面。您可以指定页面刷新的秒数。</td></tr><tr><td align="left">Retry-After</td><td align="left">这个头信息可以与 503（Service Unavailable 服务不可用）响应配合使用，这会告诉客户端多久就可以重复它的请求。</td></tr><tr><td align="left">Set-Cookie</td><td align="left">这个头信息指定一个与页面关联的 cookie。</td></tr></tbody></table><h3 id="🍁设置-HTTP-响应报头的方法"><a href="#🍁设置-HTTP-响应报头的方法" class="headerlink" title="🍁设置 HTTP 响应报头的方法"></a>🍁设置 HTTP 响应报头的方法</h3><p>下面的方法可用于在 Servlet 程序中设置 HTTP 响应报头。这些方法通过 <em>HttpServletResponse</em> 对象可用。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>String encodeRedirectURL(String url)</strong> 为 sendRedirect 方法中使用的指定的 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。</td></tr><tr><td align="left">2</td><td align="left"><strong>String encodeURL(String url)</strong> 对包含 session 会话 ID 的指定 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。</td></tr><tr><td align="left">3</td><td align="left"><strong>boolean containsHeader(String name)</strong> 返回一个布尔值，指示是否已经设置已命名的响应报头。</td></tr><tr><td align="left">4</td><td align="left"><strong>boolean isCommitted()</strong> 返回一个布尔值，指示响应是否已经提交。</td></tr><tr><td align="left">5</td><td align="left"><strong>void addCookie(Cookie cookie)</strong> 把指定的 cookie 添加到响应。</td></tr><tr><td align="left">6</td><td align="left"><strong>void addDateHeader(String name, long date)</strong> 添加一个带有给定的名称和日期值的响应报头。</td></tr><tr><td align="left">7</td><td align="left"><strong>void addHeader(String name, String value)</strong> 添加一个带有给定的名称和值的响应报头。</td></tr><tr><td align="left">8</td><td align="left"><strong>void addIntHeader(String name, int value)</strong> 添加一个带有给定的名称和整数值的响应报头。</td></tr><tr><td align="left">9</td><td align="left"><strong>void flushBuffer()</strong> 强制任何在缓冲区中的内容被写入到客户端。</td></tr><tr><td align="left">10</td><td align="left"><strong>void reset()</strong> 清除缓冲区中存在的任何数据，包括状态码和头。</td></tr><tr><td align="left">11</td><td align="left"><strong>void resetBuffer()</strong> 清除响应中基础缓冲区的内容，不清除状态码和头。</td></tr><tr><td align="left">12</td><td align="left"><strong>void sendError(int sc)</strong> 使用指定的状态码发送错误响应到客户端，并清除缓冲区。</td></tr><tr><td align="left">13</td><td align="left"><strong>void sendError(int sc, String msg)</strong> 使用指定的状态发送错误响应到客户端。</td></tr><tr><td align="left">14</td><td align="left"><strong>void sendRedirect(String location)</strong> 使用指定的重定向位置 URL 发送临时重定向响应到客户端。</td></tr><tr><td align="left">15</td><td align="left"><strong>void setBufferSize(int size)</strong> 为响应主体设置首选的缓冲区大小。</td></tr><tr><td align="left">16</td><td align="left"><strong>void setCharacterEncoding(String charset)</strong> 设置被发送到客户端的响应的字符编码（MIME 字符集）例如，UTF-8。</td></tr><tr><td align="left">17</td><td align="left"><strong>void setContentLength(int len)</strong> 设置在 HTTP Servlet 响应中的内容主体的长度，该方法设置 HTTP Content-Length 头。</td></tr><tr><td align="left">18</td><td align="left"><strong>void setContentType(String type)</strong> 如果响应还未被提交，设置被发送到客户端的响应的内容类型。</td></tr><tr><td align="left">19</td><td align="left"><strong>void setDateHeader(String name, long date)</strong> 设置一个带有给定的名称和日期值的响应报头。</td></tr><tr><td align="left">20</td><td align="left"><strong>void setHeader(String name, String value)</strong> 设置一个带有给定的名称和值的响应报头。</td></tr><tr><td align="left">21</td><td align="left"><strong>void setIntHeader(String name, int value)</strong> 设置一个带有给定的名称和整数值的响应报头。</td></tr><tr><td align="left">22</td><td align="left"><strong>void setLocale(Locale loc)</strong> 如果响应还未被提交，设置响应的区域。</td></tr><tr><td align="left">23</td><td align="left"><strong>void setStatus(int sc)</strong> 为该响应设置状态码。</td></tr></tbody></table><h3 id="🍁HTTP-Header-响应实例"><a href="#🍁HTTP-Header-响应实例" class="headerlink" title="🍁HTTP Header 响应实例"></a>🍁HTTP Header 响应实例</h3><p>您已经在前面的实例中看到 setContentType() 方法，下面的实例也使用了同样的方法，此外，我们会用 <strong>setIntHeader()</strong> 方法来设置 <strong>Refresh</strong> 头。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/Refresh"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Refresh</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">      </span>{</span><br><span class="line">          <span class="comment">// 设置刷新自动加载时间为 5 秒</span></span><br><span class="line">          response.setIntHeader(<span class="string">"Refresh"</span>, <span class="number">5</span>);</span><br><span class="line">          <span class="comment">// 设置响应内容类型</span></span><br><span class="line">          response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">         </span><br><span class="line">          <span class="comment">//使用默认时区和语言环境获得一个日历  </span></span><br><span class="line">          Calendar cale = Calendar.getInstance();  </span><br><span class="line">          <span class="comment">//将Calendar类型转换成Date类型  </span></span><br><span class="line">          Date tasktime=cale.getTime();  </span><br><span class="line">          <span class="comment">//设置日期输出的格式  </span></span><br><span class="line">          SimpleDateFormat df=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">          <span class="comment">//格式化输出  </span></span><br><span class="line">          String nowTime = df.format(tasktime);</span><br><span class="line">          PrintWriter out = response.getWriter();</span><br><span class="line">          String title = <span class="string">"自动刷新 Header 设置 - 云澈实例"</span>;</span><br><span class="line">          String docType =</span><br><span class="line">          <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">          out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;p&gt;当前时间是："</span> + nowTime + <span class="string">"&lt;/p&gt;\n"</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                         HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">         doGet(request, response);</span><br><span class="line">      }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上测试实例是位于 TomcatTest 项目下，对应的 web.xml 配置为：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">     <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.Refresh<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/Refresh<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在，调用上面的 Servlet，每隔 5 秒会显示当前系统时间。只要运行 Servlet 并稍等片刻，即可看到如下的结果：</p><p><a href="https://imgchr.com/i/wPwqQP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/03/wPwqQP.png" alt="wPwqQP.png"></a></p><h2 id="🌸Servlet-HTTP-状态码"><a href="#🌸Servlet-HTTP-状态码" class="headerlink" title="🌸Servlet HTTP 状态码"></a>🌸Servlet HTTP 状态码</h2><p>HTTP 请求和 HTTP 响应消息的格式是类似的，结构如下：</p><ul><li>初始状态行 + 回车换行符（回车+换行）</li><li>零个或多个标题行+回车换行符</li><li>一个空白行，即回车换行符</li><li>一个可选的消息主体，比如文件、查询数据或查询输出</li></ul><p>例如，服务器的响应头如下所示：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Header2: ...</span><br><span class="line">...</span><br><span class="line">HeaderN: ...</span><br><span class="line">  (Blank Line)</span><br><span class="line"><span class="meta">&lt;!doctype ...&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>状态行包括 HTTP 版本（在本例中为 HTTP/1.1）、一个状态码（在本例中为 200）和一个对应于状态码的短消息（在本例中为 OK）。</p><p>以下是可能从 Web 服务器返回的 HTTP 状态码和相关的信息列表：</p><table><thead><tr><th align="left">代码</th><th align="left">消息</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">服务器切换协议。</td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">该请求是完整的，并创建一个新的资源。</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">该请求被接受处理，但是该处理是不完整的。</td></tr><tr><td align="left">203</td><td align="left">Non-authoritative Information</td><td align="left"></td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left"></td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left"></td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left"></td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">所请求的页面已经转移到一个新的 URL。</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">所请求的页面可以在另一个不同的 URL 下被找到。</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left"></td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left"></td></tr><tr><td align="left">306</td><td align="left"><em>Unused</em></td><td align="left">在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">服务器不理解请求。</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">所请求的页面需要用户名和密码。</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left"><em>您还不能使用该代码。</em></td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">禁止访问所请求的页面。</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法找到所请求的页面。.</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">在请求中指定的方法是不允许的。</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器只生成一个不被客户端接受的响应。</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">在请求送达之前，您必须使用代理服务器的验证。</td></tr><tr><td align="left">408</td><td align="left">Request Timeout</td><td align="left">请求需要的时间比服务器能够等待的时间长，超时。</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">请求因为冲突无法完成。</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">所请求的页面不再可用。</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">“Content-Length” 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">请求中给出的先决条件被服务器评估为 false。</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">服务器不接受该请求，因为请求实体过大。</td></tr><tr><td align="left">414</td><td align="left">Request-url Too Long</td><td align="left">服务器不接受该请求，因为 URL 太长。当您转换一个 “post” 请求为一个带有长的查询信息的 “get” 请求时发生。</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器不接受该请求，因为媒体类型不被支持。</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed</td><td align="left"></td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">未完成的请求。服务器遇到了一个意外的情况。</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">未完成的请求。服务器不支持所需的功能。</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">未完成的请求。服务器从上游服务器收到无效响应。</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">未完成的请求。服务器暂时超载或死机。</td></tr><tr><td align="left">504</td><td align="left">Gateway Timeout</td><td align="left">网关超时。</td></tr><tr><td align="left">505</td><td align="left">HTTP Version Not Supported</td><td align="left">服务器不支持”HTTP协议”版本。### 🍁HTTP 请求和 HTTP 响应消息的格式是类似的，结构如下：</td></tr></tbody></table><h3 id="🍁设置-HTTP-状态代码的方法"><a href="#🍁设置-HTTP-状态代码的方法" class="headerlink" title="🍁设置 HTTP 状态代码的方法"></a>🍁设置 HTTP 状态代码的方法</h3><p>下面的方法可用于在 Servlet 程序中设置 HTTP 状态码。这些方法通过 <em>HttpServletResponse</em> 对象可用。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void setStatus ( int statusCode )</strong> 该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的响应包含了一个特殊的状态码和文档，请确保在使用 <em>PrintWriter</em> 实际返回任何内容之前调用 setStatus。</td></tr><tr><td align="left">2</td><td align="left"><strong>public void sendRedirect(String url)</strong> 该方法生成一个 302 响应，连同一个带有新文档 URL 的 <em>Location</em> 头。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void sendError(int code, String message)</strong> 该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。</td></tr></tbody></table><h3 id="🍁HTTP-状态码实例"><a href="#🍁HTTP-状态码实例" class="headerlink" title="🍁HTTP 状态码实例"></a>🍁HTTP 状态码实例</h3><p>下面的例子把 407 错误代码发送到客户端浏览器，浏览器会显示 “Need authentication!!!” 消息。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/showError"</span>)</span><br><span class="line"><span class="comment">// 扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">showError</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 设置错误代码和原因</span></span><br><span class="line">      response.sendError(<span class="number">407</span>, <span class="string">"Need authentication!!!"</span> );</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                     HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">     doGet(request, response);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在，调用上面的 Servlet 将显示以下结果：</p><p><a href="https://imgchr.com/i/wPro0f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/03/wPro0f.png" alt="wPro0f.png"></a></p><hr><h2 id="🌸Servlet-编写过滤器"><a href="#🌸Servlet-编写过滤器" class="headerlink" title="🌸Servlet 编写过滤器"></a>🌸Servlet 编写过滤器</h2><p>Servlet 过滤器可以动态地拦截请求和响应，以变换或使用包含在请求或响应中的信息。</p><p>可以将一个或多个 Servlet 过滤器附加到一个 Servlet 或一组 Servlet。Servlet 过滤器也可以附加到 JavaServer Pages (JSP) 文件和 HTML 页面。调用 Servlet 前调用所有附加的 Servlet 过滤器。</p><p>Servlet 过滤器是可用于 Servlet 编程的 Java 类，可以实现以下目的：</p><ul><li>在客户端的请求访问后端资源之前，拦截这些请求。</li><li>在服务器的响应发送回客户端之前，处理这些响应。</li></ul><p>根据规范建议的各种类型的过滤器：</p><ul><li>身份验证过滤器（Authentication Filters）。</li><li>数据压缩过滤器（Data compression Filters）。</li><li>加密过滤器（Encryption Filters）。</li><li>触发资源访问事件过滤器。</li><li>图像转换过滤器（Image Conversion Filters）。</li><li>日志记录和审核过滤器（Logging and Auditing Filters）。</li><li>MIME-TYPE 链过滤器（MIME-TYPE Chain Filters）。</li><li>标记化过滤器（Tokenizing Filters）。</li><li>XSL/T 过滤器（XSL/T Filters），转换 XML 内容。</li></ul><p>过滤器通过 Web 部署描述符（web.xml）中的 XML 标签来声明，然后映射到您的应用程序的部署描述符中的 Servlet 名称或 URL 模式。</p><p>当 Web 容器启动 Web 应用程序时，它会为您在部署描述符中声明的每一个过滤器创建一个实例。</p><p>Filter的执行顺序与在web.xml配置文件中的配置顺序一致，一般把Filter配置在所有的Servlet之前。</p><h3 id="🍁Servlet-过滤器方法"><a href="#🍁Servlet-过滤器方法" class="headerlink" title="🍁Servlet 过滤器方法"></a>🍁Servlet 过滤器方法</h3><p>过滤器是一个实现了 javax.servlet.Filter 接口的 Java 类。javax.servlet.Filter 接口定义了三个方法：</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void doFilter (ServletRequest, ServletResponse, FilterChain)</strong> 该方法完成实际的过滤操作，当客户端请求方法与过滤器设置匹配的URL时，Servlet容器将先调用过滤器的doFilter方法。FilterChain用户访问后续过滤器。</td></tr><tr><td align="left">2</td><td align="left"><strong>public void init(FilterConfig filterConfig)</strong> web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void destroy()</strong> Servlet容器在销毁过滤器实例前调用该方法，在该方法中释放Servlet过滤器占用的资源。</td></tr></tbody></table><h3 id="🍁FilterConfig-使用"><a href="#🍁FilterConfig-使用" class="headerlink" title="🍁FilterConfig 使用"></a>🍁FilterConfig 使用</h3><p>Filter 的 init 方法中提供了一个 FilterConfig 对象。</p><p>如 web.xml 文件配置如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;LogFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">runoob</span>.<span class="title">test</span>.<span class="title">LogFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">Site</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;云澈&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在 init 方法使用 FilterConfig 对象获取参数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">    <span class="comment">// 获取初始化参数</span></span><br><span class="line">    String site = config.getInitParameter(<span class="string">"Site"</span>); </span><br><span class="line">    <span class="comment">// 输出初始化参数</span></span><br><span class="line">    System.out.println(<span class="string">"网站名称: "</span> + site); </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁Servlet-过滤器实例"><a href="#🍁Servlet-过滤器实例" class="headerlink" title="🍁Servlet 过滤器实例"></a>🍁Servlet 过滤器实例</h3><p>以下是 Servlet 过滤器的实例，将输出网站名称和地址。本实例让您对 Servlet 过滤器有基本的了解，您可以使用相同的概念编写更复杂的过滤器应用程序：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">        <span class="comment">// 获取初始化参数</span></span><br><span class="line">        String site = config.getInitParameter(<span class="string">"Site"</span>); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出初始化参数</span></span><br><span class="line">        System.out.println(<span class="string">"网站名称: "</span> + site); </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> java.io.IOException, ServletException </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出站点名称</span></span><br><span class="line">        System.out.println(<span class="string">"站点网址：http://liudufu.github.io"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把请求传回过滤链</span></span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">( )</span></span>{</span><br><span class="line">        <span class="comment">/* 在 Filter 实例被 Web 容器从服务移除之前调用 */</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这边使用前文提到的 DisplayHeader.java 为例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/DisplayHeader"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayHeader</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"HTTP Header 请求实例 - 云澈实例"</span>;</span><br><span class="line">        String docType =</span><br><span class="line">            <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">            out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=\"100%\" border=\"1\" align=\"center\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;tr bgcolor=\"#949494\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;th&gt;Header 名称&lt;/th&gt;&lt;th&gt;Header 值&lt;/th&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;/tr&gt;\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">Enumeration headerNames = request.getHeaderNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(headerNames.hasMoreElements()) {</span><br><span class="line">            String paramName = (String)headerNames.nextElement();</span><br><span class="line">            out.print(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + paramName + <span class="string">"&lt;/td&gt;\n"</span>);</span><br><span class="line">            String paramValue = request.getHeader(paramName);</span><br><span class="line">            out.println(<span class="string">"&lt;td&gt; "</span> + paramValue + <span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        out.println(<span class="string">"&lt;/table&gt;\n&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁Web-xml-中的-Servlet-过滤器映射（Servlet-Filter-Mapping）"><a href="#🍁Web-xml-中的-Servlet-过滤器映射（Servlet-Filter-Mapping）" class="headerlink" title="🍁Web.xml 中的 Servlet 过滤器映射（Servlet Filter Mapping）"></a>🍁Web.xml 中的 Servlet 过滤器映射（Servlet Filter Mapping）</h3><p>定义过滤器，然后映射到一个 URL 或 Servlet，这与定义 Servlet，然后映射到一个 URL 模式方式大致相同。在部署描述符文件 <strong>web.xml</strong> 中为 filter 标签创建下面的条目：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.runoob.test.LogFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>Site<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>云澈<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DisplayHeader<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- 所在的包 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.DisplayHeader<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DisplayHeader<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- 访问的网址 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/DisplayHeader<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上述过滤器适用于所有的 Servlet，因为我们在配置中指定 <strong>/*</strong> 。如果您只想在少数的 Servlet 上应用过滤器，您可以指定一个特定的 Servlet 路径。</p><p>现在试着以常用的方式调用任何 Servlet，您将会看到在 Web 服务器中生成的日志。您也可以使用 Log4J 记录器来把上面的日志记录到一个单独的文件中。</p><p>接下来我们访问这个实例地址 <strong><a href="http://localhost:8080/TomcatTest/DisplayHeader" target="_blank" rel="noopener">http://localhost:8080/TomcatTest/DisplayHeader</a></strong>, 然后在控制台看下输出内容，如下所示：</p><p><a href="https://imgchr.com/i/0UGZTg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/06/0UGZTg.png" alt="0UGZTg.png"></a></p><h3 id="🍁使用多个过滤器"><a href="#🍁使用多个过滤器" class="headerlink" title="🍁使用多个过滤器"></a>🍁使用多个过滤器</h3><p>Web 应用程序可以根据特定的目的定义若干个不同的过滤器。假设您定义了两个过滤器 <em>AuthenFilter</em> 和 <em>LogFilter</em>。您需要创建一个如下所述的不同的映射，其余的处理与上述所讲解的大致相同：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.runoob.test.LogFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>test-param<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Initialization Paramter<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.runoob.test.AuthenFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>test-param<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Initialization Paramter<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="🍁过滤器的应用顺序"><a href="#🍁过滤器的应用顺序" class="headerlink" title="🍁过滤器的应用顺序"></a>🍁过滤器的应用顺序</h3><p>web.xml 中的 filter-mapping 元素的顺序决定了 Web 容器应用过滤器到 Servlet 的顺序。若要反转过滤器的顺序，您只需要在 web.xml 文件中反转 filter-mapping 元素即可。</p><p>例如，上面的实例将先应用 LogFilter，然后再应用 AuthenFilter，但是下面的实例将颠倒这个顺序：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="🍁web-xml配置各节点说明"><a href="#🍁web-xml配置各节点说明" class="headerlink" title="🍁web.xml配置各节点说明"></a>🍁web.xml配置各节点说明</h3><ul><li><code>&lt;filter&gt;</code>指定一个过滤器。<ul><li><code>&lt;filter-name&gt;</code>用于为过滤器指定一个名字，该元素的内容不能为空。</li><li><code>&lt;filter-class&gt;</code>元素用于指定过滤器的完整的限定类名。</li><li><code>&lt;init-param&gt;</code>元素用于为过滤器指定初始化参数，它的子元素<code>&lt;param-name&gt;</code>指定参数的名字，<code>&lt;param-value&gt;</code>指定参数的值。</li><li>在过滤器中，可以使用<code>FilterConfig</code>接口对象来访问初始化参数。</li></ul></li><li><code>&lt;filter-mapping&gt;</code>元素用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径<ul><li><code>&lt;filter-name&gt;</code>子元素用于设置filter的注册名称。该值必须是在<code>&lt;filter&gt;</code>元素中声明过的过滤器的名字</li><li><code>&lt;url-pattern&gt;</code>设置 filter 所拦截的请求路径(过滤器关联的URL样式)</li></ul></li><li><code>&lt;servlet-name&gt;</code>指定过滤器所拦截的Servlet名称。</li><li><code>&lt;dispatcher&gt;</code>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是<code>REQUEST</code>,<code>INCLUDE</code>,<code>FORWARD</code>和<code>ERROR</code>之一，默认<code>REQUEST</code>。用户可以设置多个<code>&lt;dispatcher&gt;</code>子元素用来指定 Filter 对资源的多种调用方式进行拦截。</li><li><code>&lt;dispatcher&gt;</code>子元素可以设置的值及其意义<ul><li><code>REQUEST</code>：当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过<code>RequestDispatcher</code>的include()或forward()方法访问时，那么该过滤器就不会被调用。</li><li><code>INCLUDE</code>：如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。</li><li><code>FORWARD</code>：如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。</li><li><code>ERROR</code>：如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。</li></ul></li></ul><h2 id="🌸Servlet-异常处理"><a href="#🌸Servlet-异常处理" class="headerlink" title="🌸Servlet 异常处理"></a>🌸Servlet 异常处理</h2><p>当一个 Servlet 抛出一个异常时，Web 容器在使用了 exception-type 元素的 <strong>web.xml</strong> 中搜索与抛出异常类型相匹配的配置。</p><p>您必须在 web.xml 中使用 <strong>error-page</strong> 元素来指定对特定<strong>异常</strong> 或 HTTP <strong>状态码</strong> 作出相应的 Servlet 调用。</p><h3 id="🍁web-xml-配置"><a href="#🍁web-xml-配置" class="headerlink" title="🍁web.xml 配置"></a>🍁web.xml 配置</h3><p>假设，有一个 <em>ErrorHandler</em> 的 Servlet 在任何已定义的异常或错误出现时被调用。以下将是在 web.xml 中创建的项。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- servlet 定义 --&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;ErrorHandler&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">ErrorHandler</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!-- <span class="title">servlet</span> 映射 --&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">ErrorHandler</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">ErrorHandler</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;!-- <span class="title">error</span>-<span class="title">code</span> 相关的错误页面 --&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">error</span>-<span class="title">code</span>&gt;404&lt;/<span class="title">error</span>-<span class="title">code</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">location</span>&gt;/<span class="title">ErrorHandler</span>&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">error</span>-<span class="title">code</span>&gt;403&lt;/<span class="title">error</span>-<span class="title">code</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">location</span>&gt;/<span class="title">ErrorHandler</span>&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;!-- <span class="title">exception</span>-<span class="title">type</span> 相关的错误页面 --&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">exception</span>-<span class="title">type</span>&gt;</span></span><br><span class="line"><span class="class">          <span class="title">javax</span>.<span class="title">servlet</span>.<span class="title">ServletException</span></span></span><br><span class="line"><span class="class">    &lt;/<span class="title">exception</span>-<span class="title">type</span> &gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">location</span>&gt;/<span class="title">ErrorHandler</span>&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">exception</span>-<span class="title">type</span>&gt;<span class="title">java</span>.<span class="title">io</span>.<span class="title">IOException</span>&lt;/<span class="title">exception</span>-<span class="title">type</span> &gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">location</span>&gt;/<span class="title">ErrorHandler</span>&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">error</span>-<span class="title">page</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果您想对所有的异常有一个通用的错误处理程序，那么应该定义下面的 error-page，而不是为每个异常定义单独的 error-page 元素：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="name">exception-type</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>以下是关于上面的 web.xml 异常处理要注意的点：</p><ul><li>Servlet ErrorHandler 与其他的 Servlet 的定义方式一样，且在 web.xml 中进行配置。</li><li>如果有错误状态代码出现，不管为 404（Not Found 未找到）或 403（Forbidden 禁止），则会调用 ErrorHandler 的 Servlet。</li><li>如果 Web 应用程序抛出 <em>ServletException</em> 或 <em>IOException</em>，那么 Web 容器会调用 ErrorHandler 的 Servlet。</li><li>您可以定义不同的错误处理程序来处理不同类型的错误或异常。上面的实例是非常通用的，希望您能通过实例理解基本的概念。</li></ul><h3 id="🍁请求属性-错误-异常"><a href="#🍁请求属性-错误-异常" class="headerlink" title="🍁请求属性 - 错误/异常"></a>🍁请求属性 - 错误/异常</h3><p>以下是错误处理的 Servlet 可以访问的请求属性列表，用来分析错误/异常的性质。</p><table><thead><tr><th align="left">序号</th><th align="left">属性 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>javax.servlet.error.status_code</strong> 该属性给出状态码，状态码可被存储，并在存储为 java.lang.Integer 数据类型后可被分析。</td></tr><tr><td align="left">2</td><td align="left"><strong>javax.servlet.error.exception_type</strong> 该属性给出异常类型的信息，异常类型可被存储，并在存储为 java.lang.Class 数据类型后可被分析。</td></tr><tr><td align="left">3</td><td align="left"><strong>javax.servlet.error.message</strong> 该属性给出确切错误消息的信息，信息可被存储，并在存储为 java.lang.String 数据类型后可被分析。</td></tr><tr><td align="left">4</td><td align="left"><strong>javax.servlet.error.request_uri</strong> 该属性给出有关 URL 调用 Servlet 的信息，信息可被存储，并在存储为 java.lang.String 数据类型后可被分析。</td></tr><tr><td align="left">5</td><td align="left"><strong>javax.servlet.error.exception</strong> 该属性给出异常产生的信息，信息可被存储，并在存储为 java.lang.Throwable 数据类型后可被分析。</td></tr><tr><td align="left">6</td><td align="left"><strong>javax.servlet.error.servlet_name</strong> 该属性给出 Servlet 的名称，名称可被存储，并在存储为 java.lang.String 数据类型后可被分析。</td></tr></tbody></table><h3 id="🍁Servlet-错误处理程序实例"><a href="#🍁Servlet-错误处理程序实例" class="headerlink" title="🍁Servlet 错误处理程序实例"></a>🍁Servlet 错误处理程序实例</h3><p>以下是 Servlet 实例，将应对任何您所定义的错误或异常发生时的错误处理程序。</p><p>本实例让您对 Servlet 中的异常处理有基本的了解，您可以使用相同的概念编写更复杂的异常处理应用程序：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="comment">//import java.util.*;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展 HttpServlet 类</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorHandler</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      Throwable throwable = (Throwable)</span><br><span class="line">      request.getAttribute(<span class="string">"javax.servlet.error.exception"</span>);</span><br><span class="line">      Integer statusCode = (Integer)</span><br><span class="line">      request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>);</span><br><span class="line">      String servletName = (String)</span><br><span class="line">      request.getAttribute(<span class="string">"javax.servlet.error.servlet_name"</span>);</span><br><span class="line">      <span class="keyword">if</span> (servletName == <span class="keyword">null</span>){</span><br><span class="line">          servletName = <span class="string">"Unknown"</span>;</span><br><span class="line">      }</span><br><span class="line">      String requestUri = (String)</span><br><span class="line">      request.getAttribute(<span class="string">"javax.servlet.error.request_uri"</span>);</span><br><span class="line">      <span class="keyword">if</span> (requestUri == <span class="keyword">null</span>){</span><br><span class="line">          requestUri = <span class="string">"Unknown"</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">  </span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      String title = <span class="string">"云澈Error/Exception 信息"</span>;</span><br><span class="line">     </span><br><span class="line">      String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">          <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">           <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">           <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span>);</span><br><span class="line">         out.println(<span class="string">"&lt;h1&gt;云澈异常信息实例演示&lt;/h1&gt;"</span>);</span><br><span class="line">         <span class="keyword">if</span> (throwable == <span class="keyword">null</span> &amp;&amp; statusCode == <span class="keyword">null</span>){</span><br><span class="line">            out.println(<span class="string">"&lt;h2&gt;错误信息丢失&lt;/h2&gt;"</span>);</span><br><span class="line">            out.println(<span class="string">"请返回 &lt;a href=\""</span> + </span><br><span class="line">          response.encodeURL(<span class="string">"http://localhost:8080/"</span>) + </span><br><span class="line">              <span class="string">"\"&gt;主页&lt;/a&gt;。"</span>);</span><br><span class="line">         }<span class="keyword">else</span> <span class="keyword">if</span> (statusCode != <span class="keyword">null</span>) {</span><br><span class="line">            out.println(<span class="string">"错误代码 : "</span> + statusCode);</span><br><span class="line">      }<span class="keyword">else</span>{</span><br><span class="line">             out.println(<span class="string">"&lt;h2&gt;错误信息&lt;/h2&gt;"</span>);</span><br><span class="line">            out.println(<span class="string">"Servlet Name : "</span> + servletName + </span><br><span class="line">                            <span class="string">"&lt;/br&gt;&lt;/br&gt;"</span>);</span><br><span class="line">            out.println(<span class="string">"异常类型 : "</span> + </span><br><span class="line">                            throwable.getClass( ).getName( ) + </span><br><span class="line">                            <span class="string">"&lt;/br&gt;&lt;/br&gt;"</span>);</span><br><span class="line">            out.println(<span class="string">"请求 URI: "</span> + requestUri + </span><br><span class="line">                            <span class="string">"&lt;br&gt;&lt;br&gt;"</span>);</span><br><span class="line">            out.println(<span class="string">"异常信息: "</span> + </span><br><span class="line">                                throwable.getMessage( ));</span><br><span class="line">         }</span><br><span class="line">         out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">         out.println(<span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">      doGet(request, response);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以通常的方式编译 <strong>ErrorHandler.java</strong>，把您的类文件放入<tomcat-installation-directory>/webapps/ROOT/WEB-INF/classes 中。</tomcat-installation-directory></p><p>让我们在 web.xml 文件中添加如下配置来处理异常：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.ErrorHandler<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- servlet mappings --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/ErrorHandler<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/TomcatTest/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="name">exception-type</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在，尝试使用一个会产生异常的 Servlet，或者输入一个错误的 URL，这将触发 Web 容器调用 <strong>ErrorHandler</strong> 的 Servlet，并显示适当的消息。例如，如果您输入了一个错误的 URL（如：<a href="http://localhost:8080/TomcatTest/UnKonwPage），那么它将显示下面的结果：" target="_blank" rel="noopener">http://localhost:8080/TomcatTest/UnKonwPage），那么它将显示下面的结果：</a></p><p><a href="https://imgchr.com/i/0UNCE8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/06/0UNCE8.png" alt="0UNCE8.png"></a></p><hr><h2 id="🌸Servlet-Cookie-处理"><a href="#🌸Servlet-Cookie-处理" class="headerlink" title="🌸Servlet  Cookie 处理"></a>🌸Servlet  Cookie 处理</h2><p>Cookie 是存储在客户端计算机上的文本文件，并保留了各种跟踪信息。Java Servlet 显然支持 HTTP Cookie。</p><p>识别返回用户包括三个步骤：</p><ul><li>服务器脚本向浏览器发送一组 Cookie。例如：姓名、年龄或识别号码等。</li><li>浏览器将这些信息存储在本地计算机上，以备将来使用。</li><li>当下一次浏览器向 Web 服务器发送任何请求时，浏览器会把这些 Cookie 信息发送到服务器，服务器将使用这些信息来识别用户。</li></ul><p>本章将向您讲解如何设置或重置 Cookie，如何访问它们，以及如何将它们删除。</p><p>Servlet Cookie 处理需要对中文进行编码与解码，方法如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String   str   =   java.net.URLEncoder.encode(<span class="string">"中文"</span>，<span class="string">"UTF-8"</span>);            <span class="comment">//编码</span></span><br><span class="line">String   str   =   java.net.URLDecoder.decode(<span class="string">"编码后的字符串"</span>,<span class="string">"UTF-8"</span>);   <span class="comment">// 解码</span></span><br></pre></td></tr></tbody></table></figure><h3 id="🍁Cookie-剖析"><a href="#🍁Cookie-剖析" class="headerlink" title="🍁Cookie 剖析"></a>🍁Cookie 剖析</h3><p>Cookie 通常设置在 HTTP 头信息中（虽然 JavaScript 也可以直接在浏览器上设置一个 Cookie）。设置 Cookie 的 Servlet 会发送如下的头信息：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Fri, <span class="number">04</span> Feb <span class="number">2000</span> <span class="number">21</span>:<span class="number">03</span>:<span class="number">38</span> GMT</span><br><span class="line">Server: Apache/<span class="number">1.3</span><span class="number">.9</span> (UNIX) PHP/<span class="number">4.0</span>b3</span><br><span class="line">Set-Cookie: name=xyz; expires=Friday, <span class="number">04</span>-Feb-<span class="number">07</span> <span class="number">22</span>:<span class="number">03</span>:<span class="number">38</span> GMT; </span><br><span class="line">                 path=/; domain=runoob.com</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html</span><br></pre></td></tr></tbody></table></figure><p>正如您所看到的，Set-Cookie 头包含了一个名称值对、一个 GMT 日期、一个路径和一个域。名称和值会被 URL 编码。expires 字段是一个指令，告诉浏览器在给定的时间和日期之后”忘记”该 Cookie。</p><p>如果浏览器被配置为存储 Cookie，它将会保留此信息直到到期日期。如果用户的浏览器指向任何匹配该 Cookie 的路径和域的页面，它会重新发送 Cookie 到服务器。浏览器的头信息可能如下所示：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.0</span></span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">User-Agent: Mozilla/<span class="number">4.6</span> (X11; I; Linux <span class="number">2.2</span><span class="number">.6</span><span class="number">-15</span>apmac ppc)</span><br><span class="line">Host: zink.demon.co.uk:<span class="number">1126</span></span><br><span class="line">Accept: image/gif, *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">Accept-Charset: iso-8859-1,*,utf-8</span></span><br><span class="line"><span class="comment">Cookie: name=xyz</span></span><br></pre></td></tr></tbody></table></figure><p>Servlet 就能够通过请求方法 <em>request.getCookies()</em> 访问 Cookie，该方法将返回一个 <em>Cookie</em> 对象的数组。</p><h3 id="🍁Servlet-Cookie-方法"><a href="#🍁Servlet-Cookie-方法" class="headerlink" title="🍁Servlet Cookie 方法"></a>🍁Servlet Cookie 方法</h3><p>以下是在 Servlet 中操作 Cookie 时可使用的有用的方法列表。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void setDomain(String pattern)</strong> 该方法设置 cookie 适用的域，例如 runoob.com。</td></tr><tr><td align="left">2</td><td align="left"><strong>public String getDomain()</strong> 该方法获取 cookie 适用的域，例如 runoob.com。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void setMaxAge(int expiry)</strong> 该方法设置 cookie 过期的时间（以秒为单位）。如果不这样设置，cookie 只会在当前 session 会话中持续有效。</td></tr><tr><td align="left">4</td><td align="left"><strong>public int getMaxAge()</strong> 该方法返回 cookie 的最大生存周期（以秒为单位），默认情况下，-1 表示 cookie 将持续下去，直到浏览器关闭。</td></tr><tr><td align="left">5</td><td align="left"><strong>public String getName()</strong> 该方法返回 cookie 的名称。名称在创建后不能改变。</td></tr><tr><td align="left">6</td><td align="left"><strong>public void setValue(String newValue)</strong> 该方法设置与 cookie 关联的值。</td></tr><tr><td align="left">7</td><td align="left"><strong>public String getValue()</strong> 该方法获取与 cookie 关联的值。</td></tr><tr><td align="left">8</td><td align="left"><strong>public void setPath(String uri)</strong> 该方法设置 cookie 适用的路径。如果您不指定路径，与当前页面相同目录下的（包括子目录下的）所有 URL 都会返回 cookie。</td></tr><tr><td align="left">9</td><td align="left"><strong>public String getPath()</strong> 该方法获取 cookie 适用的路径。</td></tr><tr><td align="left">10</td><td align="left"><strong>public void setSecure(boolean flag)</strong> 该方法设置布尔值，表示 cookie 是否应该只在加密的（即 SSL）连接上发送。</td></tr><tr><td align="left">11</td><td align="left"><strong>public void setComment(String purpose)</strong> 设置cookie的注释。该注释在浏览器向用户呈现 cookie 时非常有用。</td></tr><tr><td align="left">12</td><td align="left"><strong>public String getComment()</strong> 获取 cookie 的注释，如果 cookie 没有注释则返回 null。</td></tr></tbody></table><h3 id="🍁通过-Servlet-设置-Cookie"><a href="#🍁通过-Servlet-设置-Cookie" class="headerlink" title="🍁通过 Servlet 设置 Cookie"></a>🍁通过 Servlet 设置 Cookie</h3><p>通过 Servlet 设置 Cookie 包括三个步骤：</p><p><strong>(1) 创建一个 Cookie 对象：</strong>您可以调用带有 cookie 名称和 cookie 值的 Cookie 构造函数，cookie 名称和 cookie 值都是字符串。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"key"</span>,<span class="string">"value"</span>);</span><br></pre></td></tr></tbody></table></figure><p>请记住，无论是名字还是值，都不应该包含空格或以下任何字符：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ ] ( ) = , <span class="string">" / ? @ : ;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>(2) 设置最大生存周期：</strong>您可以使用 setMaxAge 方法来指定 cookie 能够保持有效的时间（以秒为单位）。下面将设置一个最长有效期为 24 小时的 cookie。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>(3) 发送 Cookie 到 HTTP 响应头：</strong>您可以使用 <strong>response.addCookie</strong> 来添加 HTTP 响应头中的 Cookie，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁实例"><a href="#🍁实例" class="headerlink" title="🍁实例"></a>🍁实例</h3><p>让我们修改我们的 <a href="">表单数据实例</a>，为名字和姓氏设置 Cookie。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/HelloForm"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloForm</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloForm</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 为名字和姓氏创建 Cookie      </span></span><br><span class="line">        Cookie name = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>,</span><br><span class="line">                URLEncoder.encode(request.getParameter(<span class="string">"name"</span>), <span class="string">"UTF-8"</span>)); <span class="comment">// 中文转码</span></span><br><span class="line">        Cookie url = <span class="keyword">new</span> Cookie(<span class="string">"url"</span>,</span><br><span class="line">                      request.getParameter(<span class="string">"url"</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 为两个 Cookie 设置过期日期为 24 小时后</span></span><br><span class="line">        name.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>); </span><br><span class="line">        url.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在响应头中添加两个 Cookie</span></span><br><span class="line">        response.addCookie( name );</span><br><span class="line">        response.addCookie( url );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"设置 Cookie 实例"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">                <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;ul&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;站点名：&lt;/b&gt;："</span></span><br><span class="line">                + request.getParameter(<span class="string">"name"</span>) + <span class="string">"\n&lt;/li&gt;"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;站点 URL：&lt;/b&gt;："</span></span><br><span class="line">                + request.getParameter(<span class="string">"url"</span>) + <span class="string">"\n&lt;/li&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;/ul&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译上面的 Servlet <strong>HelloForm</strong>，并在 web.xml 文件中创建适当的条目:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloForm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.HelloForm<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloForm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/HelloForm<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>最后尝试下面的 HTML 页面来调用 Servlet。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>云澈<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/TomcatTest/HelloForm"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">站点名 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">站点 URL：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>保存上面的 HTML 内容到文件 /TomcatTest/test.html 中。</p><p>接下来我们访问<a href="http://localhost:8080/TomcatTest/test.html，如下：" target="_blank" rel="noopener">http://localhost:8080/TomcatTest/test.html，如下：</a></p><p><img src="https://s1.ax1x.com/2020/10/08/007Dl8.png" alt="007Dl8.png"></p><p><img src="https://s1.ax1x.com/2020/10/08/007WYq.png" alt="007WYq.png"></p><h3 id="🍁通过-Servlet-读取-Cookie"><a href="#🍁通过-Servlet-读取-Cookie" class="headerlink" title="🍁通过 Servlet 读取 Cookie"></a>🍁通过 Servlet 读取 Cookie</h3><p>要读取 Cookie，您需要通过调用 <em>HttpServletRequest</em> 的 <strong>getCookies( )</strong> 方法创建一个 <em>javax.servlet.http.Cookie</em> 对象的数组。然后循环遍历数组，并使用 getName() 和 getValue() 方法来访问每个 cookie 和关联的值。</p><h4 id="🍂-实例"><a href="#🍂-实例" class="headerlink" title="🍂 实例"></a>🍂 实例</h4><p>让我们读取上面的实例中设置的 Cookie</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ReadCookies</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ReadCookies"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadCookies</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReadCookies</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        Cookie cookie = <span class="keyword">null</span>;</span><br><span class="line">        Cookie[] cookies = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 获取与该域相关的 Cookie 的数组</span></span><br><span class="line">        cookies = request.getCookies();</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 设置响应内容类型</span></span><br><span class="line">         response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    </span><br><span class="line">         PrintWriter out = response.getWriter();</span><br><span class="line">         String title = <span class="string">"Delete Cookie Example"</span>;</span><br><span class="line">         String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">         out.println(docType +</span><br><span class="line">                   <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                   <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                   <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> );</span><br><span class="line">          <span class="keyword">if</span>( cookies != <span class="keyword">null</span> ){</span><br><span class="line">            out.println(<span class="string">"&lt;h2&gt;Cookie 名称和值&lt;/h2&gt;"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++){</span><br><span class="line">               cookie = cookies[i];</span><br><span class="line">               <span class="keyword">if</span>((cookie.getName( )).compareTo(<span class="string">"name"</span>) == <span class="number">0</span> ){</span><br><span class="line">                    cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line">                    out.print(<span class="string">"已删除的 cookie："</span> + </span><br><span class="line">                                 cookie.getName( ) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">               }</span><br><span class="line">               out.print(<span class="string">"名称："</span> + cookie.getName( ) + <span class="string">"，"</span>);</span><br><span class="line">               out.print(<span class="string">"值："</span> +  URLDecoder.decode(cookie.getValue(), <span class="string">"utf-8"</span>) +<span class="string">" &lt;br/&gt;"</span>);</span><br><span class="line">            }</span><br><span class="line">         }<span class="keyword">else</span>{</span><br><span class="line">             out.println(</span><br><span class="line">               <span class="string">"&lt;h2 class=\"tutheader\"&gt;No Cookie founds&lt;/h2&gt;"</span>);</span><br><span class="line">         }</span><br><span class="line">         out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">         out.println(<span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁通过-Servlet-删除-Cookie"><a href="#🍁通过-Servlet-删除-Cookie" class="headerlink" title="🍁通过 Servlet 删除 Cookie"></a>🍁通过 Servlet 删除 Cookie</h3><p>删除 Cookie 是非常简单的。如果您想删除一个 cookie，那么您只需要按照以下三个步骤进行：</p><ul><li>读取一个现有的 cookie，并把它存储在 Cookie 对象中。</li><li>使用 <strong>setMaxAge()</strong> 方法设置 cookie 的年龄为零，来删除现有的 cookie。</li><li>把这个 cookie 添加到响应头。</li></ul><h4 id="🍂实例"><a href="#🍂实例" class="headerlink" title="🍂实例"></a>🍂实例</h4><p>下面的例子将删除现有的名为 “url” 的 cookie，当您下次运行 ReadCookies 的 Servlet 时，它会返回 url 为 null。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class DeleteCookies</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/DeleteCookies"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteCookies</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeleteCookies</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        Cookie cookie = <span class="keyword">null</span>;</span><br><span class="line">        Cookie[] cookies = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 获取与该域相关的 Cookie 的数组</span></span><br><span class="line">        cookies = request.getCookies();</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">   </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"删除 Cookie 实例"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">                  <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                  <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                  <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> );</span><br><span class="line">         <span class="keyword">if</span>( cookies != <span class="keyword">null</span> ){</span><br><span class="line">           out.println(<span class="string">"&lt;h2&gt;Cookie 名称和值&lt;/h2&gt;"</span>);</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++){</span><br><span class="line">              cookie = cookies[i];</span><br><span class="line">              <span class="keyword">if</span>((cookie.getName( )).compareTo(<span class="string">"url"</span>) == <span class="number">0</span> ){</span><br><span class="line">                   cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">                   response.addCookie(cookie);</span><br><span class="line">                   out.print(<span class="string">"已删除的 cookie："</span> + </span><br><span class="line">                                cookie.getName( ) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">              }</span><br><span class="line">              out.print(<span class="string">"名称："</span> + cookie.getName( ) + <span class="string">"，"</span>);</span><br><span class="line">              out.print(<span class="string">"值："</span> + cookie.getValue( )+<span class="string">" &lt;br/&gt;"</span>);</span><br><span class="line">           }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            out.println(</span><br><span class="line">              <span class="string">"&lt;h2 class=\"tutheader\"&gt;No Cookie founds&lt;/h2&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line">        out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸Servlet-Session-跟踪"><a href="#🌸Servlet-Session-跟踪" class="headerlink" title="🌸Servlet Session 跟踪"></a>🌸Servlet Session 跟踪</h2><p>HTTP 是一种”无状态”协议，这意味着每次客户端检索网页时，客户端打开一个单独的连接到 Web 服务器，服务器会自动不保留之前客户端请求的任何记录。</p><p>但是仍然有以下三种方式来维持 Web 客户端和 Web 服务器之间的 session 会话：</p><h3 id="🍁Cookies"><a href="#🍁Cookies" class="headerlink" title="🍁Cookies"></a>🍁Cookies</h3><p>一个 Web 服务器可以分配一个唯一的 session 会话 ID 作为每个 Web 客户端的 cookie，对于客户端的后续请求可以使用接收到的 cookie 来识别。</p><p>这可能不是一个有效的方法，因为很多浏览器不支持 cookie，所以我们建议不要使用这种方式来维持 session 会话。</p><h3 id="🍁隐藏的表单字段"><a href="#🍁隐藏的表单字段" class="headerlink" title="🍁隐藏的表单字段"></a>🍁隐藏的表单字段</h3><h3 id="🍁Servlet一个-Web-服务器可以发送一个隐藏的-HTML-表单字段，以及一个唯一的-session-会话-ID，如下所示："><a href="#🍁Servlet一个-Web-服务器可以发送一个隐藏的-HTML-表单字段，以及一个唯一的-session-会话-ID，如下所示：" class="headerlink" title="🍁Servlet一个 Web 服务器可以发送一个隐藏的 HTML 表单字段，以及一个唯一的 session 会话 ID，如下所示："></a>🍁Servlet一个 Web 服务器可以发送一个隐藏的 HTML 表单字段，以及一个唯一的 session 会话 ID，如下所示：</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"sessionid"</span> value=<span class="string">"12345"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>该条目意味着，当表单被提交时，指定的名称和值会被自动包含在 GET 或 POST 数据中。每次当 Web 浏览器发送回请求时，session_id 值可以用于保持不同的 Web 浏览器的跟踪。</p><p>这可能是一种保持 session 会话跟踪的有效方式，但是点击常规的超文本链接（<a href...="">）不会导致表单提交，因此隐藏的表单字段也不支持常规的 session 会话跟踪。</a></p><a href...=""></a><h3 id="🍁URL-重写"><a href...=""></a><a href="#🍁URL-重写" class="headerlink" title="🍁URL 重写"></a>🍁URL 重写</h3><p>您可以在每个 URL 末尾追加一些额外的数据来标识 session 会话，服务器会把该 session 会话标识符与已存储的有关 session 会话的数据相关联。</p><p>例如，http://w3cschool.cc/file.htm;sessionid=12345，session 会话标识符被附加为 sessionid=12345，标识符可被 Web 服务器访问以识别客户端。</p><p>URL 重写是一种更好的维持 session 会话的方式，它在浏览器不支持 cookie 时能够很好地工作，但是它的缺点是会动态生成每个 URL 来为页面分配一个 session 会话 ID，即使是在很简单的静态 HTML 页面中也会如此。</p><h3 id="🍁HttpSession-对象"><a href="#🍁HttpSession-对象" class="headerlink" title="🍁HttpSession 对象"></a>🍁HttpSession 对象</h3><p>除了上述的三种方式，Servlet 还提供了 HttpSession 接口，该接口提供了一种跨多个页面请求或访问网站时识别用户以及存储有关用户信息的方式。</p><p>Servlet 容器使用这个接口来创建一个 HTTP 客户端和 HTTP 服务器之间的 session 会话。会话持续一个指定的时间段，跨多个连接或页面请求。</p><p>您会通过调用 HttpServletRequest 的公共方法 <strong>getSession()</strong> 来获取 HttpSession 对象，如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br></pre></td></tr></tbody></table></figure><p>你需要在向客户端发送任何文档内容之前调用 <em>request.getSession()</em>。下面总结了 HttpSession 对象中可用的几个重要的方法：</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public Object getAttribute(String name)</strong> 该方法返回在该 session 会话中具有指定名称的对象，如果没有指定名称的对象，则返回 null。</td></tr><tr><td align="left">2</td><td align="left"><strong>public Enumeration getAttributeNames()</strong> 该方法返回 String 对象的枚举，String 对象包含所有绑定到该 session 会话的对象的名称。</td></tr><tr><td align="left">3</td><td align="left"><strong>public long getCreationTime()</strong> 该方法返回该 session 会话被创建的时间，自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。</td></tr><tr><td align="left">4</td><td align="left"><strong>public String getId()</strong> 该方法返回一个包含分配给该 session 会话的唯一标识符的字符串。</td></tr><tr><td align="left">5</td><td align="left"><strong>public long getLastAccessedTime()</strong> 该方法返回客户端最后一次发送与该 session 会话相关的请求的时间自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。</td></tr><tr><td align="left">6</td><td align="left"><strong>public int getMaxInactiveInterval()</strong> 该方法返回 Servlet 容器在客户端访问时保持 session 会话打开的最大时间间隔，以秒为单位。</td></tr><tr><td align="left">7</td><td align="left"><strong>public void invalidate()</strong> 该方法指示该 session 会话无效，并解除绑定到它上面的任何对象。</td></tr><tr><td align="left">8</td><td align="left"><strong>public boolean isNew()</strong> 如果客户端还不知道该 session 会话，或者如果客户选择不参入该 session 会话，则该方法返回 true。</td></tr><tr><td align="left">9</td><td align="left"><strong>public void removeAttribute(String name)</strong> 该方法将从该 session 会话移除指定名称的对象。</td></tr><tr><td align="left">10</td><td align="left"><strong>public void setAttribute(String name, Object value)</strong>  该方法使用指定的名称绑定一个对象到该 session 会话。</td></tr><tr><td align="left">11</td><td align="left"><strong>public void setMaxInactiveInterval(int interval)</strong> 该方法在 Servlet 容器指示该 session 会话无效之前，指定客户端请求之间的时间，以秒为单位。</td></tr></tbody></table><h3 id="🍁Session-跟踪实例"><a href="#🍁Session-跟踪实例" class="headerlink" title="🍁Session 跟踪实例"></a>🍁Session 跟踪实例</h3><p>本实例说明了如何使用 HttpSession 对象获取 session 会话创建时间和最后访问时间。如果不存在 session 会话，我们将通过请求创建一个新的 session 会话。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class SessionTrack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/SessionTrack"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionTrack</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 如果不存在 session 会话，则创建一个 session 对象</span></span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 获取 session 创建时间</span></span><br><span class="line">        Date createTime = <span class="keyword">new</span> Date(session.getCreationTime());</span><br><span class="line">        <span class="comment">// 获取该网页的最后一次访问时间</span></span><br><span class="line">        Date lastAccessTime = <span class="keyword">new</span> Date(session.getLastAccessedTime());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//设置日期输出的格式  </span></span><br><span class="line">        SimpleDateFormat df=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">    </span><br><span class="line">        String title = <span class="string">"Servlet Session 实例 - 云澈"</span>;</span><br><span class="line">        Integer visitCount = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">        String visitCountKey = <span class="keyword">new</span> String(<span class="string">"visitCount"</span>);</span><br><span class="line">        String userIDKey = <span class="keyword">new</span> String(<span class="string">"userID"</span>);</span><br><span class="line">        String userID = <span class="keyword">new</span> String(<span class="string">"Runoob"</span>);</span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(visitCountKey) == <span class="keyword">null</span>) {</span><br><span class="line">            session.setAttribute(visitCountKey, <span class="keyword">new</span> Integer(<span class="number">0</span>));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 检查网页上是否有新的访问者</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew()){</span><br><span class="line">            title = <span class="string">"Servlet Session 实例 - 云澈"</span>;</span><br><span class="line">             session.setAttribute(userIDKey, userID);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">             visitCount = (Integer)session.getAttribute(visitCountKey);</span><br><span class="line">             visitCount = visitCount + <span class="number">1</span>;</span><br><span class="line">             userID = (String)session.getAttribute(userIDKey);</span><br><span class="line">        }</span><br><span class="line">        session.setAttribute(visitCountKey,  visitCount);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">    </span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">                <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">                 <span class="string">"&lt;h2 align=\"center\"&gt;Session 信息&lt;/h2&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;table border=\"1\" align=\"center\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr bgcolor=\"#949494\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;th&gt;Session 信息&lt;/th&gt;&lt;th&gt;值&lt;/th&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;id&lt;/td&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;"</span> + session.getId() + <span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;创建时间&lt;/td&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;"</span> +  df.format(createTime) + </span><br><span class="line">                <span class="string">"  &lt;/td&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;最后访问时间&lt;/td&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;"</span> + df.format(lastAccessTime) + </span><br><span class="line">                <span class="string">"  &lt;/td&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;用户 ID&lt;/td&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;"</span> + userID + </span><br><span class="line">                <span class="string">"  &lt;/td&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;访问统计：&lt;/td&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;td&gt;"</span> + visitCount + <span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/table&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>); </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译上面的 Servlet <strong>SessionTrack</strong>，并在 web.xml 文件中创建适当的条目。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SessionTrack<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.SessionTrack<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SessionTrack<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/SessionTrack<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在浏览器地址栏输入 <em>http://localhost:8080/TomcatTest/SessionTrack</em>，当您第一次运行时将显示如下结果：</p><p><a href="https://imgchr.com/i/0rsYND" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/09/0rsYND.png" alt="0rsYND.png"></a></p><p>再次尝试运行相同的 Servlet，它将显示如下结果</p><p><a href="https://imgchr.com/i/0rsBut" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/09/0rsBut.png" alt="0rsBut.png"></a></p><h3 id="🍁删除-Session-会话数据"><a href="#🍁删除-Session-会话数据" class="headerlink" title="🍁删除 Session 会话数据"></a>🍁删除 Session 会话数据</h3><p>当您完成了一个用户的 session 会话数据，您有以下几种选择：</p><ul><li><strong>移除一个特定的属性：</strong>您可以调用 <em>public void removeAttribute(String name)</em> 方法来删除与特定的键相关联的值。</li><li><strong>删除整个 session 会话：</strong>您可以调用 <em>public void invalidate()</em> 方法来丢弃整个 session 会话。</li><li><strong>设置 session 会话过期时间：</strong>您可以调用 <em>public void setMaxInactiveInterval(int interval)</em> 方法来单独设置 session 会话超时。</li><li><strong>注销用户：</strong>如果使用的是支持 servlet 2.4 的服务器，您可以调用 <strong>logout</strong> 来注销 Web 服务器的客户端，并把属于所有用户的所有 session 会话设置为无效。</li><li><strong>web.xml 配置：</strong>如果您使用的是 Tomcat，除了上述方法，您还可以在 web.xml 文件中配置 session 会话超时，如下所示：</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上面实例中的超时时间是以分钟为单位，将覆盖 Tomcat 中默认的 30 分钟超时时间。</p><p>在一个 Servlet 中的 getMaxInactiveInterval() 方法会返回 session 会话的超时时间，以秒为单位。所以，如果在 web.xml 中配置 session 会话超时时间为 15 分钟，那么 getMaxInactiveInterval() 会返回 900。</p><h2 id="🌸Servlet数据库访问"><a href="#🌸Servlet数据库访问" class="headerlink" title="🌸Servlet数据库访问"></a>🌸Servlet数据库访问</h2><blockquote><p>在 java 项目中，只需要在 Eclipse 中引入 mysql-connector-java-5.1.39-bin.jar 就可以运行java项目。</p><p>但是在 Eclipse web 项目中，当执行 Class.forName(“com.mysql.jdbc.Driver”);时 不会去查找驱动的。所以本实例中我们需要把 mysql-connector-java-5.1.39-bin.jar 拷贝到 tomcat 下 lib 目录。</p></blockquote><h3 id="🍁创建测试数据"><a href="#🍁创建测试数据" class="headerlink" title="🍁创建测试数据"></a>🍁创建测试数据</h3><p>接下来我们在 MySQL 中创建 RUNOOB 数据库，并创建 websites 数据表，表结构如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`websites`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'站点名称'</span>,</span><br><span class="line">  <span class="string">`url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`alexa`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'Alexa 排名'</span>,</span><br><span class="line">  <span class="string">`country`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'国家'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">10</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></tbody></table></figure><p>插入一些数据：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`websites`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'Google'</span>, <span class="string">'https://www.google.cm/'</span>, <span class="string">'1'</span>, <span class="string">'USA'</span>), (<span class="string">'2'</span>, <span class="string">'淘宝'</span>, <span class="string">'https://www.taobao.com/'</span>, <span class="string">'13'</span>, <span class="string">'CN'</span>), (<span class="string">'3'</span>, <span class="string">'菜鸟教程'</span>, <span class="string">'http://www.runoob.com'</span>, <span class="string">'5892'</span>, <span class="string">''</span>), (<span class="string">'4'</span>, <span class="string">'微博'</span>, <span class="string">'http://weibo.com/'</span>, <span class="string">'20'</span>, <span class="string">'CN'</span>), (<span class="string">'5'</span>, <span class="string">'Facebook'</span>, <span class="string">'https://www.facebook.com/'</span>, <span class="string">'3'</span>, <span class="string">'USA'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁访问数据库"><a href="#🍁访问数据库" class="headerlink" title="🍁访问数据库"></a>🍁访问数据库</h3><p>下面的实例演示了如何使用 Servlet 访问 RUNOOB 数据库。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class DatabaseAccess</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/DatabaseAccess"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseAccess</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">// JDBC 驱动名及数据库 URL</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">"jdbc:mysql://localhost:3306/RUNOOB"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">"123456"</span>; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseAccess</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"Servlet Mysql 测试 - 菜鸟教程"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">        <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span>);</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            <span class="comment">// 注册 JDBC 驱动器</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 打开一个连接</span></span><br><span class="line">            conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行 SQL 查询</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            String sql;</span><br><span class="line">            sql = <span class="string">"SELECT id, name, url FROM websites"</span>;</span><br><span class="line">            ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 展开结果集数据库</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next()){</span><br><span class="line">                <span class="comment">// 通过字段检索</span></span><br><span class="line">                <span class="keyword">int</span> id  = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">                String url = rs.getString(<span class="string">"url"</span>);</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// 输出数据</span></span><br><span class="line">                out.println(<span class="string">"ID: "</span> + id);</span><br><span class="line">                out.println(<span class="string">", 站点名称: "</span> + name);</span><br><span class="line">                out.println(<span class="string">", 站点 URL: "</span> + url);</span><br><span class="line">                out.println(<span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line">            }</span><br><span class="line">            out.println(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 完成后关闭</span></span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        } <span class="keyword">catch</span>(SQLException se) {</span><br><span class="line">            <span class="comment">// 处理 JDBC 错误</span></span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span>(Exception e) {</span><br><span class="line">            <span class="comment">// 处理 Class.forName 错误</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }<span class="keyword">finally</span>{</span><br><span class="line">            <span class="comment">// 最后是用于关闭资源的块</span></span><br><span class="line">            <span class="keyword">try</span>{</span><br><span class="line">                <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)</span><br><span class="line">                stmt.close();</span><br><span class="line">            }<span class="keyword">catch</span>(SQLException se2){</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">try</span>{</span><br><span class="line">                <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">            }<span class="keyword">catch</span>(SQLException se){</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">       </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在让我们来编译上面的 Servlet，并在 web.xml 文件中创建以下条目：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DatabaseAccess<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.DatabaseAccess<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DatabaseAccess<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/DatabaseAccess<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="🍁笔记"><a href="#🍁笔记" class="headerlink" title="🍁笔记"></a>🍁笔记</h3><p>进行数据库插入操作的时候使用 PreparedStatement 更好，好处如下：</p><ul><li>1.PreparedStatement可以写动态参数化的查询；</li><li>2.PreparedStatement比 Statement 更快；</li><li>3.PreparedStatement可以防止SQL注入式攻击</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写预处理 SQL 语句</span></span><br><span class="line">String sql= <span class="string">"INSERT INTO websites1 VALUES(?,?,?,?,?)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化 PreparedStatement</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入参数，这里的参数来自于一个带有表单的jsp文件，很容易实现</span></span><br><span class="line">ps.setString(<span class="number">1</span>, request.getParameter(<span class="string">"id"</span>));</span><br><span class="line">ps.setString(<span class="number">2</span>, request.getParameter(<span class="string">"name"</span>));</span><br><span class="line">ps.setString(<span class="number">3</span>, request.getParameter(<span class="string">"url"</span>));</span><br><span class="line">ps.setString(<span class="number">4</span>, request.getParameter(<span class="string">"alexa"</span>));</span><br><span class="line">ps.setString(<span class="number">5</span>, request.getParameter(<span class="string">"country"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行数据库更新操作，不需要SQL语句</span></span><br><span class="line">ps.executeUpdate();</span><br><span class="line">sql = <span class="string">"SELECT id, name, url FROM websites1"</span>;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取查询结果</span></span><br><span class="line">ResultSet rs = ps.executeQuery();</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁注意"><a href="#🍁注意" class="headerlink" title="🍁注意"></a>🍁注意</h3><p>由于更新的 MySQL8.0，所以本网站提供的 jar 包：<strong>mysql-connector-java-5.1.39-bin.jar</strong> 就不能用了，连接时会报：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server</span><br></pre></td></tr></tbody></table></figure><p>这个异常。</p><p>需要重新下载，下载地址 <a href="https://dev.mysql.com/downloads/file/?id=484819，暂时我下载到的是" target="_blank" rel="noopener">https://dev.mysql.com/downloads/file/?id=484819，暂时我下载到的是</a> <strong>mysql-connector-java-8.0.15</strong> 替换这个 jar 包后，又出现异常 <strong>java.sql.SQLException: The server time zone value</strong>，只需在数据库地址后边添加 <strong>serverTimezone=UTC</strong> 即可，例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DB_URL = <span class="string">"jdbc:mysql://localhost:3306/servlet_db?serverTimezone=UTC"</span>;</span><br></pre></td></tr></tbody></table></figure><p>还有注册 jdbc 的驱动也换了。</p><p>注册 JDBC 驱动器：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸Servlet-文件上传"><a href="#🌸Servlet-文件上传" class="headerlink" title="🌸Servlet 文件上传"></a>🌸Servlet 文件上传</h2><p>Servlet 可以与 HTML form 标签一起使用，来允许用户上传文件到服务器。上传的文件可以是文本文件或图像文件或任何文档。</p><p>本文使用到的文件有：</p><ul><li>upload.jsp : 文件上传表单。</li><li>message.jsp : 上传成功后跳转页面。</li><li>UploadServlet.java : 上传处理 Servlet。</li><li>需要引入的 jar 文件：commons-fileupload-1.4、commons-io-2.8.jar。</li><li><em>Servlet3.0 已经内置了文件上传这一特性，开发者不再需要将 Commons FileUpload 组件导入到工程中去。</em></li></ul><h3 id="🍁创建一个文件上传表单"><a href="#🍁创建一个文件上传表单" class="headerlink" title="🍁创建一个文件上传表单"></a>🍁创建一个文件上传表单</h3><p>下面的 HTML 代码创建了一个文件上传表单。以下几点需要注意：</p><ul><li>表单 <strong>method</strong> 属性应该设置为 <strong>POST</strong> 方法，不能使用 GET 方法。</li><li>表单 <strong>enctype</strong> 属性应该设置为 <strong>multipart/form-data</strong>.</li><li>表单 <strong>action</strong> 属性应该设置为在后端服务器上处理文件上传的 Servlet 文件。下面的实例使用了 <strong>UploadServlet</strong> Servlet 来上传文件。</li><li>上传单个文件，您应该使用单个带有属性 type=”file” 的 &lt;input …/&gt; 标签。为了允许多个文件上传，请包含多个 name 属性值不同的 input 标签。输入标签具有不同的名称属性的值。浏览器会为每个 input 标签关联一个浏览按钮。</li></ul><p>upload.jsp 文件代码如下：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;文件上传实例 - 云澈&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;文件上传实例 - 云澈&lt;/h1&gt;</span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"/TomcatTest/UploadServlet"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    选择一个文件:</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span> /&gt;</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁编写后台-Servlet"><a href="#🍁编写后台-Servlet" class="headerlink" title="🍁编写后台 Servlet"></a>🍁编写后台 Servlet</h3><p>以下是 UploadServlet 的源代码，同于处理文件上传，在这之前我们先确保依赖包已经引入到项目的 WEB-INF/lib 目录下：</p><ul><li>下面的实例依赖于 FileUpload，所以一定要确保在您的 classpath 中有最新版本的 <strong>commons-fileupload.x.x.jar</strong>文件。可以从 <a href="http://commons.apache.org/proper/commons-fileupload/" target="_blank" rel="noopener">http://commons.apache.org/proper/commons-fileupload/</a> 下载。</li><li>FileUpload 依赖于 Commons IO，所以一定要确保在您的 classpath 中有最新版本的 <strong>commons-io-x.x.jar</strong> 文件。可以从 <a href="http://commons.apache.org/proper/commons-io/" target="_blank" rel="noopener">http://commons.apache.org/proper/commons-io/</a> 下载。</li></ul><p>UploadServlet 的源代码 如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class UploadServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/UploadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 上传文件存储目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UPLOAD_DIRECTORY = <span class="string">"upload"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 上传配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MEMORY_THRESHOLD   = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">3</span>;  <span class="comment">// 3MB</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_FILE_SIZE      = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">40</span>; <span class="comment">// 40MB</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_REQUEST_SIZE   = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span>; <span class="comment">// 50MB</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传数据及保存文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">        <span class="comment">// 检测是否为多媒体上传</span></span><br><span class="line">        <span class="keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) {</span><br><span class="line">            <span class="comment">// 如果不是则停止</span></span><br><span class="line">            PrintWriter writer = response.getWriter();</span><br><span class="line">            writer.println(<span class="string">"Error: 表单必须包含 enctype=multipart/form-data"</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 配置上传参数</span></span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">        <span class="comment">// 设置内存临界值 - 超过后将产生临时文件并存储于临时目录中</span></span><br><span class="line">        factory.setSizeThreshold(MEMORY_THRESHOLD);</span><br><span class="line">        <span class="comment">// 设置临时存储目录</span></span><br><span class="line">        factory.setRepository(<span class="keyword">new</span> File(System.getProperty(<span class="string">"java.io.tmpdir"</span>)));</span><br><span class="line"> </span><br><span class="line">        ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 设置最大文件上传值</span></span><br><span class="line">        upload.setFileSizeMax(MAX_FILE_SIZE);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 设置最大请求值 (包含文件和表单数据)</span></span><br><span class="line">        upload.setSizeMax(MAX_REQUEST_SIZE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中文处理</span></span><br><span class="line">        upload.setHeaderEncoding(<span class="string">"UTF-8"</span>); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造临时路径来存储上传的文件</span></span><br><span class="line">        <span class="comment">// 这个路径相对当前应用的目录</span></span><br><span class="line">        String uploadPath = request.getServletContext().getRealPath(<span class="string">"./"</span>) + File.separator + UPLOAD_DIRECTORY;</span><br><span class="line">       </span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 如果目录不存在则创建</span></span><br><span class="line">        File uploadDir = <span class="keyword">new</span> File(uploadPath);</span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists()) {</span><br><span class="line">            uploadDir.mkdir();</span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 解析请求的内容提取文件数据</span></span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            List&lt;FileItem&gt; formItems = upload.parseRequest(request);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (formItems != <span class="keyword">null</span> &amp;&amp; formItems.size() &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// 迭代表单数据</span></span><br><span class="line">                <span class="keyword">for</span> (FileItem item : formItems) {</span><br><span class="line">                    <span class="comment">// 处理不在表单中的字段</span></span><br><span class="line">                    <span class="keyword">if</span> (!item.isFormField()) {</span><br><span class="line">                        String fileName = <span class="keyword">new</span> File(item.getName()).getName();</span><br><span class="line">                        String filePath = uploadPath + File.separator + fileName;</span><br><span class="line">                        File storeFile = <span class="keyword">new</span> File(filePath);</span><br><span class="line">                        <span class="comment">// 在控制台输出文件的上传路径</span></span><br><span class="line">                        System.out.println(filePath);</span><br><span class="line">                        <span class="comment">// 保存文件到硬盘</span></span><br><span class="line">                        item.write(storeFile);</span><br><span class="line">                        request.setAttribute(<span class="string">"message"</span>,</span><br><span class="line">                            <span class="string">"文件上传成功!"</span>);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Exception ex) {</span><br><span class="line">            request.setAttribute(<span class="string">"message"</span>,</span><br><span class="line">                    <span class="string">"错误信息: "</span> + ex.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 跳转到 message.jsp</span></span><br><span class="line">        request.getServletContext().getRequestDispatcher(<span class="string">"/message.jsp"</span>).forward(</span><br><span class="line">                request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>message.jsp 文件代码如下：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;文件上传结果&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">        &lt;h2&gt;${message}&lt;/h2&gt;</span><br><span class="line">    &lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁编译和运行-Servlet"><a href="#🍁编译和运行-Servlet" class="headerlink" title="🍁编译和运行 Servlet"></a>🍁编译和运行 Servlet</h3><p>编译上面的 Servlet UploadServlet，并在 web.xml 文件中创建所需的条目，如下所示：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee   </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">     <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.UploadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/UploadServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="🌸Servlet-处理日期"><a href="#🌸Servlet-处理日期" class="headerlink" title="🌸Servlet 处理日期"></a>🌸Servlet 处理日期</h2><p>Date 类支持两个构造函数。第一个构造函数初始化当前日期和时间的对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date( )</span><br></pre></td></tr></tbody></table></figure><p>下面的构造函数接受一个参数，该参数等于 1970 年 1 月 1 日午夜以来经过的毫秒数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date(<span class="keyword">long</span> millisec)</span><br></pre></td></tr></tbody></table></figure><p>一旦您有一个可用的 Date 对象，您可以调用下列任意支持的方法来使用日期：</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>boolean after(Date date)</strong> 如果调用的 Date 对象中包含的日期在 date 指定的日期之后，则返回 true，否则返回 false。</td></tr><tr><td align="left">2</td><td align="left"><strong>boolean before(Date date)</strong> 如果调用的 Date 对象中包含的日期在 date 指定的日期之前，则返回 true，否则返回 false。</td></tr><tr><td align="left">3</td><td align="left"><strong>Object clone( )</strong> 重复调用 Date 对象。</td></tr><tr><td align="left">4</td><td align="left"><strong>int compareTo(Date date)</strong> 把调用对象的值与 date 的值进行比较。如果两个值是相等的，则返回 0。如果调用对象在 date 之前，则返回一个负值。如果调用对象在 date 之后，则返回一个正值。</td></tr><tr><td align="left">5</td><td align="left"><strong>int compareTo(Object obj)</strong> 如果 obj 是 Date 类，则操作等同于 compareTo(Date)。否则，它会抛出一个 ClassCastException。</td></tr><tr><td align="left">6</td><td align="left"><strong>boolean equals(Object date)</strong> 如果调用的 Date 对象中包含的时间和日期与 date 指定的相同，则返回 true，否则返回 false。</td></tr><tr><td align="left">7</td><td align="left"><strong>long getTime( )</strong> 返回 1970 年 1 月 1 日以来经过的毫秒数。</td></tr><tr><td align="left">8</td><td align="left"><strong>int hashCode( )</strong> 为调用对象返回哈希代码。</td></tr><tr><td align="left">9</td><td align="left"><strong>void setTime(long time)</strong> 设置 time 指定的时间和日期，这表示从 1970 年 1 月 1 日午夜以来经过的时间（以毫秒为单位）。</td></tr><tr><td align="left">10</td><td align="left"><strong>String toString( )</strong> 转换调用的 Date 对象为一个字符串，并返回结果。</td></tr></tbody></table><h3 id="🍁获取当前的日期和时间"><a href="#🍁获取当前的日期和时间" class="headerlink" title="🍁获取当前的日期和时间"></a>🍁获取当前的日期和时间</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class CurrentDate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CurrentDate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentDate</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentDate</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">          String title = <span class="string">"显示当前的日期和时间"</span>;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">          out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h2 align=\"center\"&gt;"</span> + date.toString() + <span class="string">"&lt;/h2&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CurrentDate<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.CurrentDate<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CurrentDate<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/CurrentDate<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="🍁日期比较"><a href="#🍁日期比较" class="headerlink" title="🍁日期比较"></a>🍁日期比较</h3><ul><li>可以使用 getTime() 来获取两个对象自 1970 年 1 月 1 日午夜以来经过的时间（以毫秒为单位），然后对这两个值进行比较。</li><li>可以使用方法 before( )、after( ) 和 equals( )。由于一个月里 12 号在 18 号之前，例如，new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回 true。</li><li>可以使用 compareTo( ) 方法，该方法由 Comparable 接口定义，由 Date 实现。</li></ul><h3 id="🍁使用-SimpleDateFormat-格式化日期"><a href="#🍁使用-SimpleDateFormat-格式化日期" class="headerlink" title="🍁使用 SimpleDateFormat 格式化日期"></a>🍁使用 SimpleDateFormat 格式化日期</h3><p>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和解析日期的具体类。 SimpleDateFormat 允许您选择任何用户定义的日期时间格式化的模式。</p><p>让我们修改上面的实例，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class CurrentDate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CurrentDate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentDate</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentDate</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"显示当前的日期和时间"</span>;</span><br><span class="line">        Date dNow = <span class="keyword">new</span> Date( );</span><br><span class="line">        SimpleDateFormat ft = </span><br><span class="line">                <span class="keyword">new</span> SimpleDateFormat (<span class="string">"yyyy.MM.dd  hh:mm:ss E a "</span>);</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h2 align=\"center\"&gt;"</span> + ft.format(dNow) + <span class="string">"&lt;/h2&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁简单的日期格式的格式代码"><a href="#🍁简单的日期格式的格式代码" class="headerlink" title="🍁简单的日期格式的格式代码"></a>🍁简单的日期格式的格式代码</h3><p>使用事件模式字符串来指定时间格式。在这种模式下，所有的 ASCII 字母被保留为模式字母，这些字母定义如下：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">G</td><td align="left">Era 指示器</td><td align="left">AD</td></tr><tr><td align="left">y</td><td align="left">四位数表示的年</td><td align="left">2001</td></tr><tr><td align="left">M</td><td align="left">一年中的月</td><td align="left">July 或 07</td></tr><tr><td align="left">d</td><td align="left">一月中的第几天</td><td align="left">10</td></tr><tr><td align="left">h</td><td align="left">带有 A.M./P.M. 的小时（1~12）</td><td align="left">12</td></tr><tr><td align="left">H</td><td align="left">一天中的第几小时（0~23）</td><td align="left">22</td></tr><tr><td align="left">m</td><td align="left">一小时中的第几分</td><td align="left">30</td></tr><tr><td align="left">s</td><td align="left">一分中的第几秒</td><td align="left">55</td></tr><tr><td align="left">S</td><td align="left">毫秒</td><td align="left">234</td></tr><tr><td align="left">E</td><td align="left">一周中的星期几</td><td align="left">Tuesday</td></tr><tr><td align="left">D</td><td align="left">一年中的第几天</td><td align="left">360</td></tr><tr><td align="left">F</td><td align="left">所在的周是这个月的第几周</td><td align="left">2 (second Wed. in July)</td></tr><tr><td align="left">w</td><td align="left">一年中的第几周</td><td align="left">40</td></tr><tr><td align="left">W</td><td align="left">一月中的第几周</td><td align="left">1</td></tr><tr><td align="left">a</td><td align="left">A.M./P.M. 标记</td><td align="left">PM</td></tr><tr><td align="left">k</td><td align="left">一天中的第几小时（1~24）</td><td align="left">24</td></tr><tr><td align="left">K</td><td align="left">带有 A.M./P.M. 的小时（0~11）</td><td align="left">10</td></tr><tr><td align="left">z</td><td align="left">时区</td><td align="left">Eastern Standard Time</td></tr><tr><td align="left">‘</td><td align="left">Escape for text</td><td align="left">Delimiter</td></tr><tr><td align="left">“</td><td align="left">单引号</td><td align="left">`</td></tr></tbody></table><h2 id="🌸"><a href="#🌸" class="headerlink" title="🌸"></a>🌸</h2><p>当文档移动到新的位置，我们需要向客户端发送这个新位置时，我们需要用到网页重定向。当然，也可能是为了负载均衡，或者只是为了简单的随机，这些情况都有可能用到网页重定向。</p><p>重定向请求到另一个网页的最简单的方式是使用 response 对象的 sendRedirect() 方法。下面是该方法的定义：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> HttpServletResponse.sendRedirect(String location)</span><br><span class="line"><span class="keyword">throws</span> IOException</span><br></pre></td></tr></tbody></table></figure><p>该方法把响应连同状态码和新的网页位置发送回浏览器。您也可以通过把 setStatus() 和 setHeader() 方法一起使用来达到同样的效果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">String site = <span class="string">"http://www.runoob.com"</span> ;</span><br><span class="line">response.setStatus(response.SC_MOVED_TEMPORARILY);</span><br><span class="line">response.setHeader(<span class="string">"Location"</span>, site); </span><br><span class="line">....</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁实例-1"><a href="#🍁实例-1" class="headerlink" title="🍁实例"></a>🍁实例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class PageRedirect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/PageRedirect"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageRedirect</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"static-access"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 要重定向的新位置</span></span><br><span class="line">      String site = <span class="keyword">new</span> String(<span class="string">"http://liudufu.gihub.io"</span>);</span><br><span class="line"></span><br><span class="line">      response.setStatus(response.SC_MOVED_TEMPORARILY);</span><br><span class="line">      response.setHeader(<span class="string">"Location"</span>, site);    </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PageRedirect<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>PageRedirect<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PageRedirect<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/PageRedirect<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在通过访问 URL <a href="http://localhost:8080/PageRedirect" target="_blank" rel="noopener">http://localhost:8080/PageRedirect</a> 来调用这个 Servlet</p><h2 id="🌸Servlet-点击计数器"><a href="#🌸Servlet-点击计数器" class="headerlink" title="🌸Servlet 点击计数器"></a>🌸Servlet 点击计数器</h2><p>很多时候，您可能有兴趣知道网站的某个特定页面上的总点击量。使用 Servlet 来计算这些点击量是非常简单的，因为一个 Servlet 的生命周期是由它运行所在的容器控制的。</p><p>以下是实现一个简单的基于 Servlet 生命周期的网页点击计数器需要采取的步骤：</p><ul><li>在 init() 方法中初始化一个全局变量。</li><li>每次调用 doGet() 或 doPost() 方法时，都增加全局变量。</li><li>如果需要，您可以使用一个数据库表来存储全局变量的值在 destroy() 中。在下次初始化 Servlet 时，该值可在 init() 方法内被读取。这一步是可选的。</li><li>如果您只想对一个 session 会话计数一次页面点击，那么请使用 isNew() 方法来检查该 session 会话是否已点击过相同页面。这一步是可选的。</li><li>您可以通过显示全局计数器的值，来在网站上展示页面的总点击量。这一步是可选的。</li></ul><p>在这里，我们假设 Web 容器将无法重新启动。如果是重新启动或 Servlet 被销毁，计数器将被重置。</p><h3 id="🍁实例-2"><a href="#🍁实例-2" class="headerlink" title="🍁实例"></a>🍁实例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class PageHitCounter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/PageHitCounter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageHitCounter</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hitCount; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>{ </span><br><span class="line">        <span class="comment">// 重置点击计数器</span></span><br><span class="line">        hitCount = <span class="number">0</span>;</span><br><span class="line">    } </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 增加 hitCount </span></span><br><span class="line">        hitCount++; </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"总点击量"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h2 align=\"center\"&gt;"</span> + hitCount + <span class="string">"&lt;/h2&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>{ </span><br><span class="line">        <span class="comment">// 这一步是可选的，但是如果需要，您可以把 hitCount 的值写入到数据库</span></span><br><span class="line">    } </span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PageHitCounter<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.PageHitCounter<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PageHitCounter<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/PageHitCounter<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="🍁网站点击计数器"><a href="#🍁网站点击计数器" class="headerlink" title="🍁网站点击计数器"></a>🍁网站点击计数器</h3><p>很多时候，您可能有兴趣知道整个网站的总点击量。在 Servlet 中，这也是非常简单的，我们可以使用过滤器做到这一点。</p><p>以下是实现一个简单的基于过滤器生命周期的网站点击计数器需要采取的步骤：</p><ul><li>在过滤器的 init() 方法中初始化一个全局变量。</li><li>每次调用 doFilter 方法时，都增加全局变量。</li><li>如果需要，您可以在过滤器的 destroy() 中使用一个数据库表来存储全局变量的值。在下次初始化过滤器时，该值可在 init() 方法内被读取, 这一步是可选的。</li></ul><p>在这里，我们假设 Web 容器将无法重新启动。如果是重新启动或 Servlet 被销毁，点击计数器将被重置。</p><h3 id="🍁实例-3"><a href="#🍁实例-3" class="headerlink" title="🍁实例"></a>🍁实例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SiteHitCounter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> hitCount; </span><br><span class="line">               </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">(FilterConfig config)</span> </span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> ServletException</span>{</span><br><span class="line">     <span class="comment">// 重置点击计数器</span></span><br><span class="line">     hitCount = <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">doFilter</span><span class="params">(ServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">              ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">              FilterChain chain)</span> </span></span><br><span class="line"><span class="function">              <span class="keyword">throws</span> java.io.IOException, ServletException </span>{</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把计数器的值增加 1</span></span><br><span class="line">      hitCount++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 输出计数器</span></span><br><span class="line">      System.out.println(<span class="string">"网站访问统计："</span>+ hitCount );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把请求传回到过滤器链</span></span><br><span class="line">      chain.doFilter(request,response);</span><br><span class="line">  }</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">  </span>{ </span><br><span class="line">      <span class="comment">// 这一步是可选的，但是如果需要，您可以把 hitCount 的值写入到数据库</span></span><br><span class="line">  } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SiteHitCounter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>SiteHitCounter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SiteHitCounter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在访问网站的任意页面，比如 <a href="http://localhost:8080/。这将会在每次任意页面被点击时，把计数器的值增加" target="_blank" rel="noopener">http://localhost:8080/。这将会在每次任意页面被点击时，把计数器的值增加</a> 1，它会在日志中显示以下消息：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">网站访问统计： 1</span><br><span class="line">网站访问统计： 2</span><br><span class="line">网站访问统计： 3</span><br><span class="line">网站访问统计： 4</span><br><span class="line">网站访问统计： 5</span><br><span class="line">..................</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸Servlet-自动刷新页面"><a href="#🌸Servlet-自动刷新页面" class="headerlink" title="🌸Servlet 自动刷新页面"></a>🌸Servlet 自动刷新页面</h2><p>假设有一个网页，它是显示现场比赛成绩或股票市场状况或货币兑换率。对于所有这些类型的页面，您需要定期刷新网页。</p><p>Java Servlet 提供了一个机制，使得网页会在给定的时间间隔自动刷新。</p><p>刷新网页的最简单的方式是使用响应对象的方法 <strong>setIntHeader()</strong>。以下是这种方法的定义：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void setIntHeader(String header, int headerValue)</span><br></pre></td></tr></tbody></table></figure><p>此方法把头信息 “Refresh” 连同一个表示时间间隔的整数值（以秒为单位）发送回浏览器。</p><h3 id="🍁自动刷新页面实例"><a href="#🍁自动刷新页面实例" class="headerlink" title="🍁自动刷新页面实例"></a>🍁自动刷新页面实例</h3><p>本实例演示了 Servlet 如何使用 <strong>setIntHeader()</strong> 方法来设置 <strong>Refresh</strong> 头信息，从而实现自动刷新页面。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class Refresh</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/Refresh"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Refresh</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置刷新自动加载的事件间隔为 5 秒</span></span><br><span class="line">        response.setIntHeader(<span class="string">"Refresh"</span>, <span class="number">5</span>);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 获取当前的时间</span></span><br><span class="line">        Calendar calendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        String am_pm;</span><br><span class="line">        <span class="keyword">int</span> hour = calendar.get(Calendar.HOUR);</span><br><span class="line">        <span class="keyword">int</span> minute = calendar.get(Calendar.MINUTE);</span><br><span class="line">        <span class="keyword">int</span> second = calendar.get(Calendar.SECOND);</span><br><span class="line">        <span class="keyword">if</span>(calendar.get(Calendar.AM_PM) == <span class="number">0</span>)</span><br><span class="line">            am_pm = <span class="string">"AM"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            am_pm = <span class="string">"PM"</span>;</span><br><span class="line">     </span><br><span class="line">        String CT = hour+<span class="string">":"</span>+ minute +<span class="string">":"</span>+ second +<span class="string">" "</span>+ am_pm;</span><br><span class="line">        </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"使用 Servlet 自动刷新页面"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">            <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span>+</span><br><span class="line">            <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;p&gt;当前时间是："</span> + CT + <span class="string">"&lt;/p&gt;\n"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.Refresh<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/Refresh<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="🌸Servlet-发送电子邮件"><a href="#🌸Servlet-发送电子邮件" class="headerlink" title="🌸Servlet 发送电子邮件"></a>🌸Servlet 发送电子邮件</h2><p>使用 Servlet 发送一封电子邮件是很简单的，但首先您必须在您的计算机上安装 <strong>JavaMail API</strong> 和 <strong>Java Activation Framework）JAF）</strong>。</p><ul><li>您可以从 Java 网站下载最新版本的 <a href="http://www.oracle.com/technetwork/java/javamail/index.html" target="_blank" rel="noopener">JavaMail</a>，打开网页右侧有个 <strong>Downloads</strong> 链接，点击它下载。</li><li>您可以从 Java 网站下载最新版本的 <a href="http://www.oracle.com/technetwork/articles/java/index-135046.html" target="_blank" rel="noopener">JAF（）</a>。</li></ul><p>下载并解压缩这些文件，在新创建的顶层目录中，您会发现这两个应用程序的一些 jar 文件。您需要把 <strong>mail.jar</strong> 和 <strong>activation.jar</strong> 文件添加到您的 CLASSPATH 中。</p><h3 id="🍁发送一封简单的电子邮件"><a href="#🍁发送一封简单的电子邮件" class="headerlink" title="🍁发送一封简单的电子邮件"></a>🍁发送一封简单的电子邮件</h3><p>下面的实例将从您的计算机上发送一封简单的电子邮件。这里假设您的<strong>本地主机</strong>已连接到互联网，并支持发送电子邮件。同时确保 Java Email API 包和 JAF 包的所有的 jar 文件在 CLASSPATH 中都是可用的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名 SendEmail.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.*;</span><br><span class="line"><span class="keyword">import</span> javax.activation.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmail</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 收件人的电子邮件 ID</span></span><br><span class="line">      String to = <span class="string">"abcd@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 发件人的电子邮件 ID</span></span><br><span class="line">      String from = <span class="string">"web@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 假设您是从本地主机发送电子邮件</span></span><br><span class="line">      String host = <span class="string">"localhost"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取系统的属性</span></span><br><span class="line">      Properties properties = System.getProperties();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 设置邮件服务器</span></span><br><span class="line">      properties.setProperty(<span class="string">"mail.smtp.host"</span>, host);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取默认的 Session 对象</span></span><br><span class="line">      Session session = Session.getDefaultInstance(properties);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>{</span><br><span class="line">         <span class="comment">// 创建一个默认的 MimeMessage 对象</span></span><br><span class="line">         MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">         <span class="comment">// 设置 From: header field of the header.</span></span><br><span class="line">         message.setFrom(<span class="keyword">new</span> InternetAddress(from));</span><br><span class="line">         <span class="comment">// 设置 To: header field of the header.</span></span><br><span class="line">         message.addRecipient(Message.RecipientType.TO,</span><br><span class="line">                                  <span class="keyword">new</span> InternetAddress(to));</span><br><span class="line">         <span class="comment">// 设置 Subject: header field</span></span><br><span class="line">         message.setSubject(<span class="string">"This is the Subject Line!"</span>);</span><br><span class="line">         <span class="comment">// 现在设置实际消息</span></span><br><span class="line">         message.setText(<span class="string">"This is actual message"</span>);</span><br><span class="line">         <span class="comment">// 发送消息</span></span><br><span class="line">         Transport.send(message);</span><br><span class="line">         String title = <span class="string">"发送电子邮件"</span>;</span><br><span class="line">         String res = <span class="string">"成功发送消息..."</span>;</span><br><span class="line">         String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">         out.println(docType +</span><br><span class="line">         <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;p align=\"center\"&gt;"</span> + res + <span class="string">"&lt;/p&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">      }<span class="keyword">catch</span> (MessagingException mex) {</span><br><span class="line">         mex.printStackTrace();</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SendEmail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>SendEmail<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SendEmail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/SendEmail<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在通过访问 URL <a href="http://localhost:8080/SendEmail" target="_blank" rel="noopener">http://localhost:8080/SendEmail</a> 来调用这个 Servlet。这将会发送一封电子邮件到给定的电子邮件 ID <em><a href="mailto:abcd@gmail.com">abcd@gmail.com</a></em>，并将显示下面所示的响应：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">发送电子邮件</span><br><span class="line">成功发送消息...</span><br></pre></td></tr></tbody></table></figure><p>如果您想要发送一封电子邮件给多个收件人，那么请使用下面的方法来指定多个电子邮件 ID：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addRecipients</span><span class="params">(Message.RecipientType type, </span></span></span><br><span class="line"><span class="function"><span class="params">                   Address[] addresses)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> MessagingException</span></span><br></pre></td></tr></tbody></table></figure><p>下面是对参数的描述：</p><ul><li><strong>type：</strong>这将被设置为 TO、CC 或 BCC。在这里，CC 代表抄送，BCC 代表密件抄送。例如 <em>Message.RecipientType.TO</em>。</li><li><strong>addresses：</strong>这是电子邮件 ID 的数组。当指定电子邮件 ID 时，您需要使用 InternetAddress() 方法。</li></ul><h3 id="🍁发送一封-HTML-电子邮件"><a href="#🍁发送一封-HTML-电子邮件" class="headerlink" title="🍁发送一封 HTML 电子邮件"></a>🍁发送一封 HTML 电子邮件</h3><p>下面的实例将从您的计算机上发送一封 HTML 格式的电子邮件。这里假设您的<strong>本地主机</strong>已连接到互联网，并支持发送电子邮件。同时确保 Java Email API 包和 JAF 包的所有的 jar 文件在 CLASSPATH 中都是可用的。</p><p>本实例与上一个实例很类似，但是这里我们使用 setContent() 方法来设置第二个参数为 “text/html” 的内容，该参数用来指定 HTML 内容是包含在消息中的。</p><p>使用这个实例，您可以发送内容大小不限的 HTML 内容。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名 SendEmail.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.*;</span><br><span class="line"><span class="keyword">import</span> javax.activation.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmail</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 收件人的电子邮件 ID</span></span><br><span class="line">      String to = <span class="string">"abcd@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 发件人的电子邮件 ID</span></span><br><span class="line">      String from = <span class="string">"web@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 假设您是从本地主机发送电子邮件</span></span><br><span class="line">      String host = <span class="string">"localhost"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取系统的属性</span></span><br><span class="line">      Properties properties = System.getProperties();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 设置邮件服务器</span></span><br><span class="line">      properties.setProperty(<span class="string">"mail.smtp.host"</span>, host);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取默认的 Session 对象</span></span><br><span class="line">      Session session = Session.getDefaultInstance(properties);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>{</span><br><span class="line">         <span class="comment">// 创建一个默认的 MimeMessage 对象</span></span><br><span class="line">         MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">         <span class="comment">// 设置 From: header field of the header.</span></span><br><span class="line">         message.setFrom(<span class="keyword">new</span> InternetAddress(from));</span><br><span class="line">         <span class="comment">// 设置 To: header field of the header.</span></span><br><span class="line">         message.addRecipient(Message.RecipientType.TO,</span><br><span class="line">                                  <span class="keyword">new</span> InternetAddress(to));</span><br><span class="line">         <span class="comment">// 设置 Subject: header field</span></span><br><span class="line">         message.setSubject(<span class="string">"This is the Subject Line!"</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 设置实际的 HTML 消息，内容大小不限</span></span><br><span class="line">         message.setContent(<span class="string">"&lt;h1&gt;This is actual message&lt;/h1&gt;"</span>,</span><br><span class="line">                            <span class="string">"text/html"</span> );</span><br><span class="line">         <span class="comment">// 发送消息</span></span><br><span class="line">         Transport.send(message);</span><br><span class="line">         String title = <span class="string">"发送电子邮件"</span>;</span><br><span class="line">         String res = <span class="string">"成功发送消息..."</span>;</span><br><span class="line">         String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">         out.println(docType +</span><br><span class="line">         <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;p align=\"center\"&gt;"</span> + res + <span class="string">"&lt;/p&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">      }<span class="keyword">catch</span> (MessagingException mex) {</span><br><span class="line">         mex.printStackTrace();</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译并运行上面的 Servlet ，在给定的电子邮件 ID 上发送 HTML 消息。</p><h3 id="🍁在电子邮件中发送附件"><a href="#🍁在电子邮件中发送附件" class="headerlink" title="🍁在电子邮件中发送附件"></a>🍁在电子邮件中发送附件</h3><p>下面的实例将从您的计算机上发送一封带有附件的电子邮件。这里假设您的<strong>本地主机</strong>已连接到互联网，并支持发送电子邮件。同时确保 Java Email API 包和 JAF 包的所有的 jar 文件在 CLASSPATH 中都是可用的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名 SendEmail.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.*;</span><br><span class="line"><span class="keyword">import</span> javax.activation.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmail</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 收件人的电子邮件 ID</span></span><br><span class="line">      String to = <span class="string">"abcd@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 发件人的电子邮件 ID</span></span><br><span class="line">      String from = <span class="string">"web@gmail.com"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 假设您是从本地主机发送电子邮件</span></span><br><span class="line">      String host = <span class="string">"localhost"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取系统的属性</span></span><br><span class="line">      Properties properties = System.getProperties();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 设置邮件服务器</span></span><br><span class="line">      properties.setProperty(<span class="string">"mail.smtp.host"</span>, host);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取默认的 Session 对象</span></span><br><span class="line">      Session session = Session.getDefaultInstance(properties);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span>{</span><br><span class="line">         <span class="comment">// 创建一个默认的 MimeMessage 对象</span></span><br><span class="line">         MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 设置 From: header field of the header.</span></span><br><span class="line">         message.setFrom(<span class="keyword">new</span> InternetAddress(from));</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 设置 To: header field of the header.</span></span><br><span class="line">         message.addRecipient(Message.RecipientType.TO,</span><br><span class="line">                                  <span class="keyword">new</span> InternetAddress(to));</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 设置 Subject: header field</span></span><br><span class="line">         message.setSubject(<span class="string">"This is the Subject Line!"</span>);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 创建消息部分 </span></span><br><span class="line">         BodyPart messageBodyPart = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 填写消息</span></span><br><span class="line">         messageBodyPart.setText(<span class="string">"This is message body"</span>);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 创建一个多部分消息</span></span><br><span class="line">         Multipart multipart = <span class="keyword">new</span> MimeMultipart();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 设置文本消息部分</span></span><br><span class="line">         multipart.addBodyPart(messageBodyPart);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 第二部分是附件</span></span><br><span class="line">         messageBodyPart = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">         String filename = <span class="string">"file.txt"</span>;</span><br><span class="line">         DataSource source = <span class="keyword">new</span> FileDataSource(filename);</span><br><span class="line">         messageBodyPart.setDataHandler(<span class="keyword">new</span> DataHandler(source));</span><br><span class="line">         messageBodyPart.setFileName(filename);</span><br><span class="line">         multipart.addBodyPart(messageBodyPart);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 发送完整的消息部分</span></span><br><span class="line">         message.setContent(multipart );</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 发送消息</span></span><br><span class="line">         Transport.send(message);</span><br><span class="line">         String title = <span class="string">"发送电子邮件"</span>;</span><br><span class="line">         String res = <span class="string">"成功发送电子邮件..."</span>;</span><br><span class="line">         String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">         out.println(docType +</span><br><span class="line">         <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;p align=\"center\"&gt;"</span> + res + <span class="string">"&lt;/p&gt;\n"</span> +</span><br><span class="line">         <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">      }<span class="keyword">catch</span> (MessagingException mex) {</span><br><span class="line">         mex.printStackTrace();</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译并运行上面的 Servlet ，在给定的电子邮件 ID 上发送带有文件附件的消息。</p><h3 id="🍁用户身份认证部分"><a href="#🍁用户身份认证部分" class="headerlink" title="🍁用户身份认证部分"></a>🍁用户身份认证部分</h3><p>如果需要向电子邮件服务器提供用户 ID 和密码进行身份认证，那么您可以设置如下属性：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">props.setProperty(<span class="string">"mail.user"</span>, <span class="string">"myuser"</span>);</span><br><span class="line">props.setProperty(<span class="string">"mail.password"</span>, <span class="string">"mypwd"</span>);</span><br></pre></td></tr></tbody></table></figure><p>电子邮件发送机制的其余部分与上面讲解的保持一致。</p><h2 id="🌸Servlet包"><a href="#🌸Servlet包" class="headerlink" title="🌸Servlet包"></a>🌸Servlet包</h2><p>涉及到 WEB-INF 子目录的 Web 应用程序结构是所有的 Java web 应用程序的标准，并由 Servlet API 规范指定。给定一个顶级目录名 myapp，目录结构如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/myapp</span><br><span class="line">    /images</span><br><span class="line">    /WEB-INF</span><br><span class="line">        /classes</span><br><span class="line">        /lib</span><br></pre></td></tr></tbody></table></figure><p>WEB-INF 子目录中包含应用程序的部署描述符，名为 web.xml。所有的 HTML 文件都位于顶级目录 <em>myapp</em> 下。对于 admin 用户，您会发现 ROOT 目录是 myApp 的父目录。</p><h3 id="🍁创建包中的-Servlet"><a href="#🍁创建包中的-Servlet" class="headerlink" title="🍁创建包中的 Servlet"></a>🍁创建包中的 Servlet</h3><p>WEB-INF/classes 目录包含了所有的 Servlet 类和其他类文件，类文件所在的目录结构与他们的包名称匹配。例如，如果您有一个完全合格的类名称 <strong>com.myorg.MyServlet</strong>，那么这个 Servlet 类必须位于以下目录中：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/myapp/WEB-INF/classes/com/myorg/MyServlet.class</span><br></pre></td></tr></tbody></table></figure><p>下面的例子创建包名为 <em>com.myorg</em> 的 MyServlet 类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为包命名</span></span><br><span class="line"><span class="keyword">package</span> com.myorg;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/MyServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> String message;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 执行必需的的初始化</span></span><br><span class="line">      message = <span class="string">"Hello World"</span>;</span><br><span class="line">  }</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 实际的逻辑是在这里</span></span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;"</span> + message + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 什么也不做</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁编译包中的-Servlet"><a href="#🍁编译包中的-Servlet" class="headerlink" title="🍁编译包中的 Servlet"></a>🍁编译包中的 Servlet</h3><p>编译包中的类与编译其他的类没有什么大的不同。最简单的方法是让您的 java 文件保留完全限定路径，如上面提到的类，将被保留在 com.myorg 中。您还需要在 CLASSPATH 中添加该目录。</p><p>假设您的环境已正确设置，进入 <strong><tomcat-installation-directory>/webapps/ROOT/WEB-INF/classes</tomcat-installation-directory></strong> 目录，并编译 MyServlet.java，如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ javac MyServlet.java</span><br></pre></td></tr></tbody></table></figure><p>如果 Servlet 依赖于其他库，那么您必须在 CLASSPATH 中也要引用那些 JAR 文件。这里我只引用了 servlet-api.jar JAR 文件，因为我在 Hello World 程序中并没有使用任何其他库。</p><p>该命令行使用内置的 javac 编译器，它是 Sun Microsystems Java 软件开发工具包（JDK，全称 Java Software Development Kit）附带的。 Microsystems的Java软件开发工具包（JDK）。为了让该命令正常工作，必须包括您在 PATH 环境变量中所使用的 Java SDK 的位置。</p><p>如果一切顺利，上述编译会在同一目录下生成 <strong>MyServlet.class</strong> 文件。下一节将解释如何把一个已编译的 Servlet 部署到生产中。</p><h3 id="🍁Servlet-打包部署"><a href="#🍁Servlet-打包部署" class="headerlink" title="🍁Servlet 打包部署"></a>🍁Servlet 打包部署</h3><p>默认情况下，Servlet 应用程序位于路径 <tomcat-installation-directory>/webapps/ROOT 下，且类文件放在 <tomcat-installation-directory>/webapps/ROOT/WEB-INF/classes 中。</tomcat-installation-directory></tomcat-installation-directory></p><p>如果您有一个完全合格的类名称 <strong>com.myorg.MyServlet</strong>，那么这个 Servlet 类必须位于 WEB-INF/classes/com/myorg/MyServlet.class 中，您需要在位于 <tomcat-installation-directory>/webapps/ROOT/WEB-INF/ 的 web.xml 文件中创建以下条目：</tomcat-installation-directory></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.myorg.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上面的条目要被创建在 web.xml 文件中的 <web-app>…</web-app> 标签内。在该文件中可能已经有各种可用的条目，但不要在意。</p><p>到这里，您基本上已经完成了，现在让我们使用 <tomcat-installation-directory>\bin\startup.bat（在 Windows 上）或 <tomcat-installation-directory>/bin/startup.sh（在 Linux/Solaris 等上）启动 tomcat 服务器，最后在浏览器的地址栏中输入 <strong><a href="http://localhost:8080/MyServlet" target="_blank" rel="noopener">http://localhost:8080/MyServlet</a></strong>。</tomcat-installation-directory></tomcat-installation-directory></p><h2 id="🌸Servlet-调试"><a href="#🌸Servlet-调试" class="headerlink" title="🌸Servlet 调试"></a>🌸Servlet 调试</h2><p>测试/调试 Servlet 始终是开发使用过程中的难点。Servlet 往往涉及大量的客户端/服务器交互，可能会出现错误但又难以重现。</p><p>这里有一些提示和建议，可以帮助您调试。</p><h3 id="🍁System-out-println"><a href="#🍁System-out-println" class="headerlink" title="🍁System.out.println()"></a>🍁System.out.println()</h3><p>System.out.println() 是作为一个标记来使用的，用来测试一段特定的代码是否被执行。我们也可以打印出变量的值。此外：</p><ul><li>由于 System 对象是核心 Java 对象的一部分，它可以在不需要安装任何额外类的情况下被用于任何地方。这包括 Servlet、JSP、RMI、EJB’s、普通的 Beans 和类，以及独立的应用程序。</li><li>与在断点处停止不同，写入到 System.out 不会干扰到应用程序的正常执行流程，这使得它在时序是至关重要的时候显得尤为有价值。</li></ul><p>下面是使用 System.out.println() 的语法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println("Debugging message");</span><br></pre></td></tr></tbody></table></figure><p>通过上面的语法生成的所有消息将被记录在 Web 服务器日志文件中。</p><h3 id="🍁消息日志"><a href="#🍁消息日志" class="headerlink" title="🍁消息日志"></a>🍁消息日志</h3><p>使用适当的日志记录方法来记录所有调试、警告和错误消息，这是非常好的想法，推荐使用 <a href="https://logging.apache.org/log4j/2.0/download.html" target="_blank" rel="noopener">log4J</a> 来记录所有的消息。</p><p>Servlet API 还提供了一个简单的输出信息的方式，使用 log() 方法，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLog</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException,</span></span><br><span class="line"><span class="function">         java.io.IOException </span>{</span><br><span class="line">    </span><br><span class="line">      String par = request.getParameter(<span class="string">"par1"</span>);</span><br><span class="line">      <span class="comment">// 调用两个 ServletContext.log 方法</span></span><br><span class="line">      ServletContext context = getServletContext( );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (par == <span class="keyword">null</span> || par.equals(<span class="string">""</span>))</span><br><span class="line">      <span class="comment">// 通过 Throwable 参数记录版本</span></span><br><span class="line">      context.log(<span class="string">"No message received:"</span>,</span><br><span class="line">          <span class="keyword">new</span> IllegalStateException(<span class="string">"Missing parameter"</span>));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          context.log(<span class="string">"Here is the visitor's message: "</span> + par);</span><br><span class="line">      </span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      java.io.PrintWriter out = response.getWriter( );</span><br><span class="line">      String title = <span class="string">"Context Log"</span>;</span><br><span class="line">      String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">        <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;h2 align=\"center\"&gt;Messages sent&lt;/h2&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    } <span class="comment">//doGet</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ServletContext 把它的文本消息记录到 Servlet 容器的日志文件中。对于 Tomcat，这些日志可以在 <tomcat-installation-directory>/logs 目录中找到。</tomcat-installation-directory></p><p>这些日志文件确实对新出现的错误或问题的频率给出指示。正因为如此，建议在通常不会发生的异常的 catch 子句中使用 log() 函数。</p><h3 id="🍁使用-JDB-调试器"><a href="#🍁使用-JDB-调试器" class="headerlink" title="🍁使用 JDB 调试器"></a>🍁使用 JDB 调试器</h3><p>可以使用调试 applet 或应用程序的 jdb 命令来调试 Servlet。</p><p>为了调试一个 Servlet，我们可以调试 sun.servlet.http.HttpServer，然后把它看成是 HttpServer 执行 Servlet 来响应浏览器端的 HTTP 请求。这与调试 applet 小程序非常相似。与调试 applet 不同的是，实际被调试的程序是 sun.applet.AppletViewer。</p><p>大多数调试器会自动隐藏如何调试 applet 的细节。同样的，对于 servlet，您必须帮调试器执行以下操作：</p><ul><li>设置您的调试器的类路径 classpath，以便它可以找到 sun.servlet.http.Http-Server 和相关的类。</li><li>设置您的调试器的类路径 classpath，以便它可以找到您的 servlet 和支持的类，通常是在 server_root/servlets 和 server_root/classes 中。</li></ul><p>您通常不会希望 server_root/servlets 在您的 classpath 中，因为它会禁用 servlet 的重新加载。但是这种包含规则对于调试是非常有用的。它允许您的调试器在 HttpServer 中的自定义 Servlet 加载器加载 Servlet 之前在 Servlet 中设置断点。</p><p>如果您已经设置了正确的类路径 classpath，就可以开始调试 sun.servlet.http.HttpServer。可以在您想要调试的 Servlet 代码中设置断点，然后通过 Web 浏览器使用给定的 Servlet（<a href="http://localhost:8080/servlet/ServletToDebug）向" target="_blank" rel="noopener">http://localhost:8080/servlet/ServletToDebug）向</a> HttpServer 发出请求。您会看到程序执行到断点处会停止。</p><h3 id="🍁使用注释"><a href="#🍁使用注释" class="headerlink" title="🍁使用注释"></a>🍁使用注释</h3><p>代码中的注释有助于以各种方式进行调试。注释可用于调试过程的很多其他方式中。</p><p>该 Servlet 使用 Java 注释和单行注释（//…），多行注释（/* …*/）可用于暂时移除部分 Java 代码。如果 bug 消失，仔细看看您刚才注释的代码并找出问题所在。</p><h3 id="🍁客户端和服务器端头信息"><a href="#🍁客户端和服务器端头信息" class="headerlink" title="🍁客户端和服务器端头信息"></a>🍁客户端和服务器端头信息</h3><p>有时，当一个 Servlet 并没有像预期那样时，查看原始的 HTTP 请求和响应是非常有用的。如果您熟悉 HTTP 结构，您可以阅读请求和响应，看看这些头信息究竟是什么。</p><h3 id="🍁重要的调试技巧"><a href="#🍁重要的调试技巧" class="headerlink" title="🍁重要的调试技巧"></a>🍁重要的调试技巧</h3><p>下面列出了一些 Servlet 调试的技巧：</p><ul><li>请注意，server_root/classes 不会重载，而 server_root/servlets 可能会。</li><li>要求浏览器显示它所显示的页面的原始内容。这有助于识别格式的问题。它通常是”视图”菜单下的一个选项。</li><li>通过强制执行完全重新加载页面来确保浏览器还没有缓存前一个请求的输出。在 Netscape Navigator 中，请使用 Shift-Reload，在 Internet Explorer 中，请使用 Shift-Refresh。</li><li>请确认 servlet 的 init() 方法接受一个 ServletConfig 参数，并调用 super.init(config)。</li></ul><h2 id="🌸servlet国际化"><a href="#🌸servlet国际化" class="headerlink" title="🌸servlet国际化"></a>🌸servlet国际化</h2><p>在我们开始之前，先来看看三个重要术语：</p><ul><li><strong>国际化（i18n）：</strong>这意味着一个网站提供了不同版本的翻译成访问者的语言或国籍的内容。</li><li><strong>本地化（l10n）：</strong>这意味着向网站添加资源，以使其适应特定的地理或文化区域，例如网站翻译成印地文（Hindi）。</li><li><strong>区域设置（locale）：</strong>这是一个特殊的文化或地理区域。它通常指语言符号后跟一个下划线和一个国家符号。例如 “en_US” 表示针对 US 的英语区域设置。</li></ul><p>当建立一个全球性的网站时有一些注意事项。本教程不会讲解这些注意事项的完整细节，但它会通过一个很好的实例向您演示如何通过差异化定位（即区域设置）来让网页以不同语言呈现。</p><p>Servlet 可以根据请求者的区域设置拾取相应版本的网站，并根据当地的语言、文化和需求提供相应的网站版本。以下是 request 对象中返回 Locale 对象的方法。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.Locale request.getLocale()</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁检测区域设置"><a href="#🍁检测区域设置" class="headerlink" title="🍁检测区域设置"></a>🍁检测区域设置</h3><p>下面列出了重要的区域设置方法，您可以使用它们来检测请求者的地理位置、语言和区域设置。下面所有的方法都显示了请求者浏览器中设置的国家名称和语言名称。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>String getCountry()</strong> 该方法以 2 个大写字母形式的 ISO 3166 格式返回该区域设置的国家/地区代码。</td></tr><tr><td align="left">2</td><td align="left"><strong>String getDisplayCountry()</strong> 该方法返回适合向用户显示的区域设置的国家的名称。</td></tr><tr><td align="left">3</td><td align="left"><strong>String getLanguage()</strong> 该方法以小写字母形式的 ISO 639 格式返回该区域设置的语言代码。</td></tr><tr><td align="left">4</td><td align="left"><strong>String getDisplayLanguage()</strong> 该方法返回适合向用户显示的区域设置的语言的名称。</td></tr><tr><td align="left">5</td><td align="left"><strong>String getISO3Country()</strong> 该方法返回该区域设置的国家的三个字母缩写。</td></tr><tr><td align="left">6</td><td align="left"><strong>String getISO3Language()</strong> 该方法返回该区域设置的语言的三个字母的缩写。</td></tr></tbody></table><h3 id="🍁实例-4"><a href="#🍁实例-4" class="headerlink" title="🍁实例"></a>🍁实例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetLocale</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">      <span class="comment">// 获取客户端的区域设置</span></span><br><span class="line">      Locale locale = request.getLocale();</span><br><span class="line">      String language = locale.getLanguage();</span><br><span class="line">      String country = locale.getCountry();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">      String title = <span class="string">"检测区域设置"</span>;</span><br><span class="line">      String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">        <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + language + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;h2 align=\"center\"&gt;"</span> + country + <span class="string">"&lt;/h2&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁语言设置"><a href="#🍁语言设置" class="headerlink" title="🍁语言设置"></a>🍁语言设置</h3><p>Servlet 可以输出以西欧语言（如英语、西班牙语、德语、法语、意大利语、荷兰语等）编写的页面。在这里，为了能正确显示所有的字符，设置 Content-Language 头是非常重要的。</p><p>第二点是使用 HTML 实体显示所有的特殊字符，例如，”ñ” 表示 “ñ”，”¡” 表示 “¡”，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplaySpanish</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="comment">// 设置响应内容类型</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">// 设置西班牙语言代码</span></span><br><span class="line">    response.setHeader(<span class="string">"Content-Language"</span>, <span class="string">"es"</span>);</span><br><span class="line"></span><br><span class="line">    String title = <span class="string">"En Espa&amp;ntilde;ol"</span>;</span><br><span class="line">    String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">     out.println(docType +</span><br><span class="line">     <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">     <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">     <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">     <span class="string">"&lt;h1&gt;"</span> + <span class="string">"En Espa&amp;ntilde;ol:"</span> + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">     <span class="string">"&lt;h1&gt;"</span> + <span class="string">"&amp;iexcl;Hola Mundo!"</span> + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">     <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁特定于区域设置的日期"><a href="#🍁特定于区域设置的日期" class="headerlink" title="🍁特定于区域设置的日期"></a>🍁特定于区域设置的日期</h3><p>可以使用 java.text.DateFormat 类及其静态方法 getDateTimeInstance() 来格式化特定于区域设置的日期和时间。下面的实例演示了如何格式化特定于某个给定的区域设置的日期：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateLocale</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="comment">// 设置响应内容类型</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">// 获取客户端的区域设置</span></span><br><span class="line">    Locale locale = request.getLocale( );</span><br><span class="line">    String date = DateFormat.getDateTimeInstance(</span><br><span class="line">                                  DateFormat.FULL, </span><br><span class="line">                                  DateFormat.SHORT, </span><br><span class="line">                                  locale).format(<span class="keyword">new</span> Date( ));</span><br><span class="line"></span><br><span class="line">    String title = <span class="string">"特定于区域设置的日期"</span>;</span><br><span class="line">    String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">      <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + date + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁特定于区域设置的货币"><a href="#🍁特定于区域设置的货币" class="headerlink" title="🍁特定于区域设置的货币"></a>🍁特定于区域设置的货币</h3><p>可以使用 java.text.NumberFormat 类及其静态方法 getCurrencyInstance() 来格式化数字（比如 long 类型或 double 类型）为特定于区域设置的货币。下面的实例演示了如何格式化特定于某个给定的区域设置的货币：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">javaimport java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrencyLocale</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="comment">// 设置响应内容类型</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">// 获取客户端的区域设置</span></span><br><span class="line">    Locale locale = request.getLocale( );</span><br><span class="line">    NumberFormat nft = NumberFormat.getCurrencyInstance(locale);</span><br><span class="line">    String formattedCurr = nft.format(<span class="number">1000000</span>);</span><br><span class="line"></span><br><span class="line">    String title = <span class="string">"特定于区域设置的货币"</span>;</span><br><span class="line">    String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">      <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + formattedCurr + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁特特定于区域设置的百分比"><a href="#🍁特特定于区域设置的百分比" class="headerlink" title="🍁特特定于区域设置的百分比"></a>🍁特特定于区域设置的百分比</h3><p>可以使用 java.text.NumberFormat 类及其静态方法 getPercentInstance() 来格式化特定于区域设置的百分比。下面的实例演示了如何格式化特定于某个给定的区域设置的百分比：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PercentageLocale</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="comment">// 设置响应内容类型</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">// 获取客户端的区域设置</span></span><br><span class="line">    Locale locale = request.getLocale( );</span><br><span class="line">    NumberFormat nft = NumberFormat.getPercentInstance(locale);</span><br><span class="line">    String formattedPerc = nft.format(<span class="number">0.51</span>);</span><br><span class="line"></span><br><span class="line">    String title = <span class="string">"特定于区域设置的百分比"</span>;</span><br><span class="line">    String docType = <span class="string">"&lt;!DOCTYPE html&gt; \n"</span>;</span><br><span class="line">      out.println(docType +</span><br><span class="line">      <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + formattedPerc + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">      <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://liudufu.github.io/tags/java/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Servlet" scheme="https://liudufu.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JPA与JDBC的区别和基本用法</title>
    <link href="https://liudufu.github.io/The_difference_and_basic_usage_of_JPA_and_JDBC/"/>
    <id>https://liudufu.github.io/The_difference_and_basic_usage_of_JPA_and_JDBC/</id>
    <published>2020-12-08T10:43:05.000Z</published>
    <updated>2020-12-08T10:44:37.057Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JPA（Java Persistence API）用于对象持久化的 API，是 Java EE 5.0 平台标准的 ORM 规范，使得应用程序以统一的方式访问持久层。</p></blockquote><a id="more"></a><h1 id="JPA-与-JDBC-的区别和基本用法"><a href="#JPA-与-JDBC-的区别和基本用法" class="headerlink" title="JPA 与 JDBC 的区别和基本用法"></a>JPA 与 JDBC 的区别和基本用法</h1><p><a href="https://www.cnblogs.com/yunche/p/10279324.html" target="_blank" rel="noopener">原文地址</a></p><h2 id="JPA-概念"><a href="#JPA-概念" class="headerlink" title="JPA 概念"></a>JPA 概念</h2><p>JPA（Java Persistence API）用于对象持久化的 API，是 Java EE 5.0 平台标准的 ORM 规范，使得应用程序以统一的方式访问持久层。</p><h3 id="与-JDBC-的对比"><a href="#与-JDBC-的对比" class="headerlink" title="与 JDBC 的对比"></a>与 JDBC 的对比</h3><p>JDBC 也是一种规范和接口，不过 JDBC 是面向 SQL 的，使用起来比较繁琐。所以就有了 ORM 框架，建立了 Java 对象与数据库表之间的映射关系，可以通过直接操作对象来实现持久化，简化了操作的繁杂度。而 JPA 就是 ORM 框架的规范，值得一提的是 Hibernate 是符合 JPA 规范的，而 MyBatis 却不符合，因为 MyBatis 还是需要写 SQL 的。</p><p>JDBC 示意图：</p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_jdbc.png" alt="img"></p><p>JPA 示意图：</p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_JPA.png" alt="img"></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>在 IDEA 下创建一个 JPA 项目，并实现基本的 CRUD。</p><p>1、创建一个 JavaEE Persistence 项目，具体如下所示</p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_1.png" alt="img"></p><p>采用 Hibernate 实现 JPA。</p><p>2、导入相应的 Maven 依赖</p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_2.1.png" alt="img"></p><p>添加 Maven 支持。</p><p>pom.xml:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>groupId<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jpa-helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-entitymanager --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3、配置数据库（MySQL 8）相关内容 persistence.xml</p><p>注意此文件要位于类路径下，这里放在 resources/META-INF 下。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/persistence"</span> <span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">"jpa-1"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--是 PersistenceProvider 接口的实现类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--添加持久化类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.yunche.helloworld.Customer<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/jpa?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.archive.autodetection"</span> <span class="attr">value</span>=<span class="string">"class"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--注意这个属性，自动生成的文件前面没有 hibernate，要加上 hibernate --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span> <span class="attr">value</span>=<span class="string">"update"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用 MySQL8Dialect --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.dialect.MySQL8Dialect"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>4、新建一个持久化对象类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yunche.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Customer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: yunche</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/01/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"customers"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>并在 persistence.xml 中的 persistence-unit 节点下加入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--添加持久化类--&gt;</span><br><span class="line">&lt;!--后来发现：似乎可以不加--&gt;</span><br><span class="line">&lt;class&gt;com.yunche.helloworld.Customer&lt;/class&gt;</span><br></pre></td></tr></tbody></table></figure><p>5、Main 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yunche.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityTransaction;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Persistence;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Main</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: yunche</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/01/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//persistence.xml 中的 persistence-unit</span></span><br><span class="line">        String persistenceUnitName = <span class="string">"jpa-1"</span>;</span><br><span class="line">        <span class="comment">//1、创建 EntityManagerFactory</span></span><br><span class="line">        EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory(persistenceUnitName);</span><br><span class="line">        <span class="comment">//2、创建 EntityManager</span></span><br><span class="line">        EntityManager entityManager = entityManagerFactory.createEntityManager();</span><br><span class="line">        <span class="comment">//3、开启事务</span></span><br><span class="line">        EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">        transaction.begin();</span><br><span class="line">        <span class="comment">//4、进行持久化操作</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setAge(<span class="number">13</span>);</span><br><span class="line">        customer.setLastName(<span class="string">"li"</span>);</span><br><span class="line">        customer.setEmail(<span class="string">"123@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">        entityManager.persist(customer);</span><br><span class="line">        <span class="comment">//5、提交事务</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">        <span class="comment">//6、关闭 EntityManager</span></span><br><span class="line">        entityManager.close();</span><br><span class="line">        <span class="comment">//7、关闭 EntityManagerFactory</span></span><br><span class="line">        entityManagerFactory.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>6、结果</p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_output.png" alt="img"></p><p><img src="https://www.cnblogs.com/images/cnblogs_com/yunche/1384050/o_result.png" alt="img"></p><p>7、注意事项<br>我后来发现了一点问题，关于包 javax.persistence-api 的，我创建项目的时候选中了 persistence 2.0 , IDEA 自动导入了 javax.persistence-api-2.0.jar，而 maven 下的 hibernate-entitymanager 依赖含有 javax.persistence-api-2.2.jar ，所以 jar 包重复了，并且我发现2.0版本的有些方法没有，所以还是将2.0版本的jar包删除，用 2.2 版本的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JPA（Java Persistence API）用于对象持久化的 API，是 Java EE 5.0 平台标准的 ORM 规范，使得应用程序以统一的方式访问持久层。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://liudufu.github.io/tags/java/"/>
    
      <category term="JPA" scheme="https://liudufu.github.io/tags/JPA/"/>
    
      <category term="JDBC" scheme="https://liudufu.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>关于数据库和mybatis的mapper关系</title>
    <link href="https://liudufu.github.io/Mapper_relation_of_mybatis/"/>
    <id>https://liudufu.github.io/Mapper_relation_of_mybatis/</id>
    <published>2020-12-08T10:39:42.000Z</published>
    <updated>2020-12-08T10:42:24.493Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。</p></blockquote><a id="more"></a><h1 id="关于数据库mybatis的mapper关系"><a href="#关于数据库mybatis的mapper关系" class="headerlink" title="关于数据库mybatis的mapper关系"></a>关于数据库mybatis的mapper关系</h1><p><a href="https://blog.csdn.net/weixin_42603009/article/details/91981037" target="_blank" rel="noopener">原文地址</a></p><p>这里说明一下关于数据库，数据库对应实体各种复杂情况关系映射。<br>最基本的实体：<br>比如：（这里面不涉及复杂map,list,set等）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer testUserNo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String testUserName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String testUserSex;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>数据库：<br><img src="https://img-blog.csdnimg.cn/20190614160536245.png" alt="在这里插入图片描述"><br>resultMap最终将数据库查出的结果，映射到pojo（实体）上<br>type是指定映射到哪一个实体；id是相对应的resultMap的id</p><p>这里有两种属性，主键属性和普通属性<br>1,主键属性方式（是主键）<br>user_no是主键：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;id property=<span class="string">"testUserNo"</span> column=<span class="string">"user_no"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><p>2,普通属性（即不是主键）<br>user_name不是主键</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;result property=<span class="string">"testUserName"</span> column=<span class="string">"user_name"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><p>完整的mapper.xml</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://www.mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!-- namespace是对应的定义方法mapper，会去拿到对应的geTestUsers方法。这样才建立起了输入，返回的对应的关系 --&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.cun.mapper.TestUserMapper"</span>&gt;</span><br><span class="line">&lt;resultMap type=<span class="string">"com.cun.entity.TestUser"</span> id=<span class="string">"TestUser"</span>&gt;</span><br><span class="line">&lt;!-- property是对应的实体属性，column是对应的数据库column项--&gt;</span><br><span class="line">&lt;id property=<span class="string">"testUserNo"</span> column=<span class="string">"user_no"</span>/&gt; </span><br><span class="line">&lt;result property=<span class="string">"testUserName"</span> column=<span class="string">"user_name"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"testUserSex"</span> column=<span class="string">"user_sex"</span>/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"geTestUsers"</span> resultMap=<span class="string">"TestUser"</span>&gt;</span><br><span class="line">    select * from test_user</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></tbody></table></figure><p>在我们深入更加复杂情况前，我们需要了解mapper3.0下常用的标签。我们从mapper开始讲起。<br>mapper: 是总标签，所有标签都包含在内。<br>namespace：命名空间。如果采用的是Mapper接口代理的方式开发，Mapper的映射文件中namespace必须为接口的全名，比如这里namespace=“com.cun.mapper.TestUserMapper”。<br><img src="https://img-blog.csdnimg.cn/2019061420233673.png" alt="在这里插入图片描述"><br>最常见的增删改查select，insert，update，delete。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"Mapper.EmpMapper"</span>&gt;</span><br><span class="line"><span class="comment">// CURD操作标签</span></span><br><span class="line"><span class="comment">// 查  parameterType入参类型   resultType返回类型  id是唯一标识符</span></span><br><span class="line">&lt;select id="" parameterType="" resultType=""&gt; &lt;/select&gt;</span><br><span class="line">&lt;insert id="" parameterType=""&gt; &lt;/insert&gt;</span><br><span class="line">&lt;delete id="" parameterType=""&gt; &lt;/delete&gt;</span><br><span class="line">&lt;update id="" parameterType=""&gt; &lt;/update&gt;</span><br><span class="line">    <span class="comment">// if片段</span></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></tbody></table></figure><p>每一个其中的内含标签：<br><img src="https://img-blog.csdnimg.cn/20190614212707731.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190614212756788.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190614212942527.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190614213051667.png" alt="在这里插入图片描述"><br>下面逐一介绍其中的Content Model(内容模型)<br>selectKey : 标签表示子查询中主键的提取问题<br>它其中的标记：<br>keyColumn表示查询语句返回结果的列名<br>keyProperty表示将属性设置到某个列中<br>order=”BEFORE表示在插入语句之前执行<br>resultType=”int”表示返回值得类型为int类型<br><img src="https://img-blog.csdnimg.cn/20190614222555214.png" alt="在这里插入图片描述"><br>include：引入定义号的公共sql<br>这里不得不的引入另一个标签sql,因为这两者搭配使用。<br>例子：（通常用于有一段sql文，很长而且重复多次使用，我们把它抽象出来，之后直接引用）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="number">1</span>、首先定义一个sql标签，一定要定义唯一id。（name,age是要查询的字段）--&gt;</span><br><span class="line">&lt;sql id="Base_Column_List" &gt;name,age&lt;/sql&gt;</span><br><span class="line">&lt;!--<span class="number">2</span>、然后通过id引用--&gt;</span><br><span class="line">&lt;select id=<span class="string">"selectAll"</span>&gt;</span><br><span class="line">select </span><br><span class="line">&lt;include refid=<span class="string">"Base_Column_List"</span> /&gt;</span><br><span class="line">from student</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;!--这个&lt;include refid=<span class="string">"Base_Column_List"</span> /&gt;会自动把上面的代码贴过来。--&gt;</span><br></pre></td></tr></tbody></table></figure><p>trim : （这个不常用）<br>prefix：前缀；suffix：后缀<br>prefixOverrides：忽略第一个指定分隔符；suffixOverrides：会略最后一个分隔符。</p><p>如果id为null执行的sql语句为:<br>select * from user where name=“xxx” and gender=“xxx”<br>where : 主要是用来简化 sql 语句中 where 条件判断，自动地处理 AND/OR 条件。<br>例子：（并自动地把首个 and / or 给忽略。）</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"geTestUsers"</span> parameterType=<span class="string">"com.cun.entity.TestUser"</span> resultMap=<span class="string">"TestUser"</span>&gt;</span><br><span class="line">    select user_no,user_name,user_sex </span><br><span class="line">    from test_user </span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"testUserNo != null"</span>&gt;</span><br><span class="line">            user_no = #{testUserNo}</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"testUserName != null"</span>&gt;</span><br><span class="line">            and user_name = #{testUserName}</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"testUserSex != null"</span>&gt;</span><br><span class="line">            and user_sex = #{testUserSex}</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><p>set : （主要作用于update语句）时若使用if标签，如果前面的if没有执行，则可能导致有多余逗号的错误。使用set标签可以将动态的配置SET 关键字，和剔除追加到条件末尾的任何不相关的逗号。<br>例子：（这里有一个坑，写完需要加逗号）</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateByPrimaryKeySelective"</span> parameterType=<span class="string">"RecruitmentConfBanner"</span>&gt;</span><br><span class="line">    UPDATE conf_banner t</span><br><span class="line">    &lt;set&gt; </span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"bannerName != null"</span>&gt;</span><br><span class="line">            t.banner_name = #{bannerName},</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"bannerUrl != null"</span>&gt;</span><br><span class="line">            t.banner_url = #{bannerUrl},</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"bannerLogo != null"</span>&gt;</span><br><span class="line">            t.banner_logo = #{bannerLogo},</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    where t.banner_id = #{bannerId}</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></tbody></table></figure><p>foreach : 主要用于批量删除或批量插入。<br>它的6个参数说明：<br>collection：要循环的集合<br>index：循环索引；<br>item：集合中的一个元素（item和collection，按foreach循环理解）；<br>open：以什么开始；<br>close：以什么结束；<br>separator：循环内容之间以什么分隔<br>mybatis接受的参数分为：（1）基本类型；（2）对象；（3）List；（4）数组；（5）Map<br>例子：（入参为list，collection为list）</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">"deleteWorkshopByIds"</span> parameterType=<span class="string">"Integer"</span> &gt;</span><br><span class="line">update workshop set status =<span class="number">0</span></span><br><span class="line">where id in</span><br><span class="line">  &lt;foreach collection=<span class="string">"list"</span> index=<span class="string">"i"</span> item=<span class="string">"id"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">  #{id}</span><br><span class="line">  &lt;/foreach&gt;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></tbody></table></figure><p>choose : 是按顺序判断其内部when标签中的test条件出否成立，如果有一个成立，则 choose 结束。当 choose 中所有 when 的条件都不满则时，则执行 otherwise 中的sql。<br>例子：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  choose(判断参数) - 按顺序将实体类 User 第一个不为空的属性作为：where条件 --&gt;  </span><br><span class="line">&lt;select id=<span class="string">"getUserList_choose"</span> resultMap=<span class="string">"resultMap_user"</span> parameterType=<span class="string">"com.yiibai.pojo.User"</span>&gt;  </span><br><span class="line">SELECT *  </span><br><span class="line">  FROM User u   </span><br><span class="line">&lt;where&gt;  </span><br><span class="line">    &lt;choose&gt;  </span><br><span class="line">        &lt;when test=<span class="string">"username !=null "</span>&gt;  </span><br><span class="line">            u.<span class="function">username LIKE <span class="title">CONCAT</span><span class="params">(CONCAT(<span class="string">'%'</span>, #{username, jdbcType=VARCHAR})</span>,'%')  </span></span><br><span class="line"><span class="function">        &lt;/when &gt;  </span></span><br><span class="line"><span class="function">        &lt;when test</span>=<span class="string">"sex != null and sex != '' "</span>&gt;  </span><br><span class="line">            AND u.sex = #{sex, jdbcType=INTEGER}  </span><br><span class="line">        &lt;/when &gt;  </span><br><span class="line">        &lt;when test=<span class="string">"birthday != null "</span>&gt;  </span><br><span class="line">            AND u.birthday = #{birthday, jdbcType=DATE}  </span><br><span class="line">        &lt;/when &gt;  </span><br><span class="line">        &lt;otherwise&gt;  </span><br><span class="line">        &lt;/otherwise&gt;  </span><br><span class="line">    &lt;/choose&gt;  </span><br><span class="line">&lt;/where&gt;</span><br></pre></td></tr></tbody></table></figure><p>标签<br>if : 这个签前面已经涉及到了。<br>bind : 可以从 OGNL 表达式中创建一个变量并将其绑定到上下文</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectBlogsLike"</span> resultType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">&lt;bind name=<span class="string">"pattern"</span> value=<span class="string">"'%' + _parameter.getTitle() + '%'"</span> /&gt;</span><br><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE title LIKE #{pattern}</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><p>回到原先的话题映射涉及复杂map,list,set等。<br>一对多collection 例子：一个班级相关的学生。StudentEntity是学生实体。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClazzEntity</span> </span>{</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> clazzID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String clazzName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;StudentEntity&gt; studentList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>例子：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">"ClazzResultMap"</span> type=<span class="string">"com.cn.hnust.pojo.ClazzEntity"</span> &gt;</span><br><span class="line">  &lt;id column=<span class="string">"classID"</span> property=<span class="string">"clazzID"</span> jdbcType=<span class="string">"INTEGER"</span> /&gt;</span><br><span class="line"> &lt;result column=<span class="string">"className"</span> property=<span class="string">"clazzName"</span> jdbcType=<span class="string">"VARCHAR"</span> /&gt;</span><br><span class="line">&lt;collection property=<span class="string">"studentList"</span> column=<span class="string">"classID"</span> javaType=<span class="string">"ArrayList"</span> </span><br><span class="line">            ofType=<span class="string">"com.cn.hnust.pojo.StudentEntity"</span> select=<span class="string">"getStudentByClassID"</span>/&gt;</span><br><span class="line"> &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line"> &lt;resultMap id=<span class="string">"StudentResultMap"</span> type=<span class="string">"com.cn.hnust.pojo.StudentEntity"</span>&gt;  </span><br><span class="line"> &lt;id property=<span class="string">"stuID"</span> column=<span class="string">"stuID"</span> /&gt;  </span><br><span class="line">&lt;result property=<span class="string">"stuName"</span> column=<span class="string">"stuName"</span> /&gt;  </span><br><span class="line">&lt;result property=<span class="string">"stuAge"</span> column=<span class="string">"stuAge"</span> /&gt;  </span><br><span class="line">&lt;result property=<span class="string">"stuAddress"</span> column=<span class="string">"stuAddress"</span> /&gt;</span><br><span class="line">  &lt;/resultMap&gt;  </span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getClassByID"</span> resultMap=<span class="string">"ClazzResultMap"</span> parameterType=<span class="string">"java.lang.Integer"</span> &gt;</span><br><span class="line">select classID,className</span><br><span class="line">from class_t</span><br><span class="line">where classID = #{clazzID}</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getStudentByClassID"</span> resultMap=<span class="string">"StudentResultMap"</span> parameterType=<span class="string">"java.lang.Integer"</span> &gt;</span><br><span class="line">select stuID,stuName,stuAge,stuAddress,classID</span><br><span class="line"> from student_t</span><br><span class="line">where classID = #{clazzID}</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><p>一对多，一对一（association ）：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=<span class="string">"Bill"</span> id=<span class="string">"ResultBill"</span>&gt;  </span><br><span class="line">       &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;  </span><br><span class="line">       &lt;result property=<span class="string">"dh"</span> column=<span class="string">"dh"</span>  /&gt;          </span><br><span class="line">       &lt;result property=<span class="string">"rq"</span> column=<span class="string">"rq"</span>/&gt;  </span><br><span class="line">       &lt;association property=<span class="string">"author"</span>  javaType=<span class="string">"Author"</span>  &gt;  </span><br><span class="line">          &lt;id  property=<span class="string">"id"</span>  column=<span class="string">"idAutor"</span> /&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"name"</span> column=<span class="string">"authorName"</span> /&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"email"</span> column=<span class="string">"authorEmail"</span>/&gt;  </span><br><span class="line">       &lt;/association&gt;          </span><br><span class="line">       &lt;collection property=<span class="string">"det1"</span>  javaType=<span class="string">"ArrayList"</span> ofType=<span class="string">"BillDet1"</span> &gt;  </span><br><span class="line">          &lt;id property=<span class="string">"id"</span> column=<span class="string">"idDet1"</span>/&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"dh"</span> column=<span class="string">"dhDet1"</span>/&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"wlbm"</span> column=<span class="string">"wlbm"</span>/&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"wlmc"</span> column=<span class="string">"wlmc"</span>/&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"unit"</span> column=<span class="string">"unit"</span>/&gt;  </span><br><span class="line">          &lt;result property=<span class="string">"qty"</span> column=<span class="string">"qty"</span>/&gt;  </span><br><span class="line">       &lt;/collection&gt;  </span><br><span class="line">&lt;/resultMap&gt;  </span><br><span class="line">&lt;resultMap type=<span class="string">"com.sailod.shiro.dto.HtAuthorityMenuDTO"</span> id=<span class="string">"OneMenuAuthority"</span>&gt;  </span><br><span class="line">    &lt;id property=<span class="string">"htAuthorityId"</span> column=<span class="string">"htAuthorityId"</span> javaType=<span class="string">"java.lang.Long"</span> /&gt;  </span><br><span class="line">    &lt;result property=<span class="string">"name"</span> column=<span class="string">"name"</span> javaType=<span class="string">"java.lang.String"</span> /&gt;  </span><br><span class="line">    &lt;result property=<span class="string">"currentUserId"</span> column=<span class="string">"currentUserId"</span> javaType=<span class="string">"java.lang.Long"</span> /&gt;  </span><br><span class="line">    &lt;collection property=<span class="string">"htAuthorityDTO"</span>  ofType=<span class="string">"com.sailod.shiro.dto.HtAuthorityDTO"</span>  </span><br><span class="line">     select=<span class="string">"selectAuthority"</span> column=<span class="string">"{htAuthorityId2 = htAuthorityId ,currentUserId2 = currentUserId}"</span>   &gt;  </span><br><span class="line">     &lt;/collection&gt;  </span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://liudufu.github.io/tags/java/"/>
    
      <category term="mybatis" scheme="https://liudufu.github.io/tags/mybatis/"/>
    
      <category term="mappers" scheme="https://liudufu.github.io/tags/mappers/"/>
    
      <category term="数据库" scheme="https://liudufu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>windows下如何安装redis</title>
    <link href="https://liudufu.github.io/How_to_install_redis_under_Windows/"/>
    <id>https://liudufu.github.io/How_to_install_redis_under_Windows/</id>
    <published>2020-12-08T09:59:45.000Z</published>
    <updated>2020-12-08T10:32:53.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows和Linux下Redis的安装和使用-最新"><a href="#windows和Linux下Redis的安装和使用-最新" class="headerlink" title="windows和Linux下Redis的安装和使用(最新)"></a>windows和Linux下Redis的安装和使用(最新)</h1><blockquote><p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p><p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p></blockquote><a id="more"></a><h2 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h2><p>1、到<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a>,前往下载页面</p><p><a href="https://imgchr.com/i/DvHmdS" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHmdS.png" alt="DvHmdS.png"></a></p><p>2、在下载网页中，找到最后发行的版本（此处是3.2.100）。找到Redis-x64-3.2.100.msi和Redis-x64-3.2.100.zip，点击下载。这里说明一下，第一个是msi微软格式的安装包，第二个是压缩包。</p><p><a href="https://imgchr.com/i/DvHeZ8" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHeZ8.png" alt="DvHeZ8.png"></a></p><p>3、双击刚下载好的msi格式的安装包（Redis-x64-3.2.100.msi）开始安装</p><p><a href="https://imgchr.com/i/DvHEsP" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHEsP.png" alt="DvHEsP.png"></a></p><p>4、选择“同意协议”，点击下一步继续。</p><p>5、勾选“添加Redis目录到环境变量PATH中”，这样方便系统自动识别Redis执行文件在哪里。</p><p>6、端口号可保持默认的6379，并选择防火墙例外，从而保证外部可以正常访问Redis服务</p><p>7、设定最大值为100M。作为实验和学习，100M足够了。</p><p>8、击安装后，正式的安装过程开始。稍等一会即可完成。</p><p>9、安装完毕后，需要先做一些设定工作，以便服务启动后能正常运行。使用文本编辑器，这里使用Notepad++，打开Redis服务配置文件。<strong>注意：不要找错了，通常为redis.windows-service.conf，而不是redis.windows.conf。后者是以非系统服务方式启动程序使用的配置文件。</strong></p><p>10、找到含有requirepass字样的地方，追加一行，输入requirepass 密码。这是访问Redis时所需的密码，一般测试情况下可以不用设定密码。不过，即使是作为本地访问，也建议设定一个密码。</p><p><a href="https://imgchr.com/i/DvHVqf" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHVqf.png" alt="DvHVqf.png"></a></p><p>11、点击“开始”&gt;右击“计算机”&gt;选择“管理”。在左侧栏中依次找到并点击“计算机管理（本地）”&gt;服务和应用程序&gt;服务。再在右侧找到Redis名称的服务，查看启动情况。如未启动，则手动启动之。正常情况下，服务应该正常启动并运行了,如果启动了，就点击重新启动。</p><p>12、最后来测试一下Redis是否正常提供服务。进入Redis的目录，cd D:\Redis。输入redis-cli并回车。（redis-cli是客户端程序）如图正常提示进入，并显示正确端口号，则表示服务已经启动。</p><p><a href="https://imgchr.com/i/DvHAMt" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHAMt.png" alt="DvHAMt.png"></a></p><p>13、使用服务前需要先通过密码验证。输入“auth 密码“回车（密码是之前设定的密码）。返回提示OK表示验证通过。</p><p>14、实际测试一下读写。输入set mykey1 “I love you all!”并回车，用来保存一个键值。再输入get mykey1，获取刚才保存的键值。</p><p><a href="https://imgchr.com/i/DvHnIg" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DvHnIg.png" alt="DvHnIg.png"></a></p><p>15、注意事项</p><ul><li>1.Windows使用的这个Redis是64位版本的，32位操作系统的同学就不要折腾了。</li><li>2.<strong>作为服务运行的Redis配置文件，通常为redis.windows-service.conf，而不是redis.windows.conf。小心不要选错了。</strong></li></ul><p>参考：<a href="https://www.cnblogs.com/liuqingzheng/p/9831331.html" target="_blank" rel="noopener">liuqingzheng</a></p><h2 id="Linux源码安装"><a href="#Linux源码安装" class="headerlink" title="Linux源码安装"></a>Linux源码安装</h2><p>下载地址：<a href="http://redis.io/download" target="_blank" rel="noopener">http://redis.io/download</a>,下载稳定最新版本</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wget http://download.redis.io/releases/redis-6.0.8.tar.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar xzf redis-6.0.8.tar.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> redis-6.0.8</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make</span></span><br></pre></td></tr></tbody></table></figure><p>执行完 <strong>make</strong> 命令后，redis-6.0.8 的 <strong>src</strong> 目录下会出现编译后的 redis 服务程序 redis-server，还有用于测试的客户端程序 redis-cli：</p><p>下面启动 redis 服务：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> src</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./redis-server</span></span><br></pre></td></tr></tbody></table></figure><p>注意这种方式启动 redis 使用的是默认配置。也可以通过启动参数告诉 redis 使用指定配置文件使用下面命令启动。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> src</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./redis-server ../redis.conf</span></span><br></pre></td></tr></tbody></table></figure><p><strong>redis.conf</strong> 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。</p><p>启动 redis 服务进程后，就可以使用测试客户端程序 redis-cli 和 redis 服务交互了。 比如：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> src</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./redis-cli</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> <span class="built_in">set</span> foo bar</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> get foo</span></span><br><span class="line">"bar"</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Ubuntu-apt-命令安装"><a href="#Ubuntu-apt-命令安装" class="headerlink" title="Ubuntu apt 命令安装"></a>Ubuntu apt 命令安装</h2><p>在 Ubuntu 系统安装 Redis 可以使用以下命令:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sudo apt update</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt install redis-server</span></span><br></pre></td></tr></tbody></table></figure><h3 id="启动-Redis"><a href="#启动-Redis" class="headerlink" title="启动 Redis"></a>启动 Redis</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> redis-server</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查看-redis-是否启动？"><a href="#查看-redis-是否启动？" class="headerlink" title="查看 redis 是否启动？"></a>查看 redis 是否启动？</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> redis-cli</span></span><br></pre></td></tr></tbody></table></figure><p>以上命令将打开以下终端：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></tbody></table></figure><p>127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></tbody></table></figure><p>以上说明我们已经成功安装了redis。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;windows和Linux下Redis的安装和使用-最新&quot;&gt;&lt;a href=&quot;#windows和Linux下Redis的安装和使用-最新&quot; class=&quot;headerlink&quot; title=&quot;windows和Linux下Redis的安装和使用(最新)&quot;&gt;&lt;/a&gt;windows和Linux下Redis的安装和使用(最新)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。&lt;/p&gt;
&lt;p&gt;Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。&lt;/p&gt;
&lt;p&gt;它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Redis" scheme="https://liudufu.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>SQLyog连接数据库报错plugin caching_sha2_password could not be loaded</title>
    <link href="https://liudufu.github.io/SQL_log_connection_database_report/"/>
    <id>https://liudufu.github.io/SQL_log_connection_database_report/</id>
    <published>2020-12-08T09:57:08.000Z</published>
    <updated>2020-12-08T09:59:22.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQLyog连接数据库报错plugin-caching-sha2-password-could-not-be-loaded"><a href="#SQLyog连接数据库报错plugin-caching-sha2-password-could-not-be-loaded" class="headerlink" title="SQLyog连接数据库报错plugin caching_sha2_password could not be loaded"></a>SQLyog连接数据库报错plugin caching_sha2_password could not be loaded</h1><a id="more"></a><p><a href="https://imgchr.com/i/Dth1yR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/24/Dth1yR.png" alt="Dth1yR.png"></a></p><h2 id="出错原因"><a href="#出错原因" class="headerlink" title="出错原因"></a>出错原因</h2><blockquote><p>MySQL新版默认使用caching_sha2_password作为身份验证插件，而旧版是使用mysql_native_password。<br>当连接MySQL时报错“plugin caching_sha2_password could not be loaded”时，可换回旧版插件。</p></blockquote><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ul><li>cmd:进入数据库，<code>mysql -uroot -p</code></li><li>依次执行<ul><li><code>mysql&gt; alter user 'root'@'localhost' identified by 'yours password' password expire never; # 重置root密码，修改密码加密规则</code></li><li><code>mysql&gt; alter user 'root'@'localhost' identified with mysql_native_password by 'yours password' # 更新用户密码;</code></li><li><code>mysql&gt; flush privileges;  # 刷新权限</code></li></ul></li><li>然后再次连接SQLyog即可成功访问</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQLyog连接数据库报错plugin-caching-sha2-password-could-not-be-loaded&quot;&gt;&lt;a href=&quot;#SQLyog连接数据库报错plugin-caching-sha2-password-could-not-be-loaded&quot; class=&quot;headerlink&quot; title=&quot;SQLyog连接数据库报错plugin caching_sha2_password could not be loaded&quot;&gt;&lt;/a&gt;SQLyog连接数据库报错plugin caching_sha2_password could not be loaded&lt;/h1&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Debug" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/Debug/"/>
    
    
      <category term="MySql" scheme="https://liudufu.github.io/tags/MySql/"/>
    
      <category term="Debug" scheme="https://liudufu.github.io/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>git教程</title>
    <link href="https://liudufu.github.io/Git_tutorial/"/>
    <id>https://liudufu.github.io/Git_tutorial/</id>
    <published>2020-12-08T09:47:32.000Z</published>
    <updated>2020-12-08T09:51:04.509Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p></blockquote><a id="more"></a><h1 id="Git教程"><a href="#Git教程" class="headerlink" title="Git教程"></a>Git教程</h1><p>注明：学习自<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰老师</a></p><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><ol><li><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ul><li><h5 id="在Linux上安装Git"><a href="#在Linux上安装Git" class="headerlink" title="在Linux上安装Git"></a>在Linux上安装Git</h5><p>首先，你可以试着输入<code>git</code>，看看系统有没有安装Git：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git</span><br><span class="line">The program 'git' is currently not installed. You can install it by typing:</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></tbody></table></figure><p>像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。</p><p>如果你碰巧用Debian或Ubuntu Linux，通过一条<code>sudo apt-get install git</code>就可以直接完成Git的安装，非常简单。</p><p>老一点的Debian或Ubuntu Linux，要把命令改为<code>sudo apt-get install git-core</code>，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫<code>git-core</code>了。由于Git名气实在太大，后来就把GNU Interactive Tools改成<code>gnuit</code>，<code>git-core</code>正式改为<code>git</code>。</p><p>如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：<code>./config</code>，<code>make</code>，<code>sudo make install</code>这几个命令安装就好了。</p></li><li><h5 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h5><p>如果你正在使用Mac做开发，有两种安装Git的方法。</p><p>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/。" target="_blank" rel="noopener">http://brew.sh/。</a></p><p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p></li><li><h5 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h5><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载安装程序</a>，然后按默认选项安装即可。</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name "Your Name"</span><br><span class="line">$ git config --global user.email "email@example.com"</span><br></pre></td></tr></tbody></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></li></ul></li><li><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br><span class="line">/Users/michael/learngit</span><br></pre></td></tr></tbody></table></figure><p><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/michael/learngit</code>。</p><p>第二步，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/michael/learngit/.git/</span><br></pre></td></tr></tbody></table></figure><p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><p>也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。不过，不建议你使用自己正在开发的公司项目来学习Git，否则造成的一切后果概不负责。</p><h5 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h5><p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p><p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p><p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p><p>使用Windows的童鞋要特别注意：</p><p>千万不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载<a href="http://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可</p><p>言归正传，现在我们编写一个<code>readme.txt</code>文件，内容如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></tbody></table></figure><p>一定要放到<code>learngit</code>目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p><p>和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。</p><p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></tbody></table></figure><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p><p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m "wrote a readme file"</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></tbody></table></figure><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>嫌麻烦不想输入<code>-m "xxx"</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m "add 3 files."</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>现在总结一下今天学的两点内容：</p><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li></ol></li></ol><h2 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h2><ol><li><p>版本回退</p><ul><li><code>HEAD</code>指向的版本就是当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。因此，Git允许我们在版本的历史之间穿梭，还可以写成使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul></li><li><p>工作区和暂存区</p><ul><li><p>工作区：电脑里能看到的目录，前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。（所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。）</p></li><li><p>Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master(仓库)</p><p>工作区&gt;&gt;&gt;&gt;暂存区&gt;&gt;&gt;&gt;仓库</p><p><code>git add</code>把文件从工作区&gt;&gt;&gt;&gt;暂存区，``git commit`把文件从暂存区&gt;&gt;&gt;&gt;仓库，</p><p><code>git diff</code>查看工作区和暂存区差异，</p><p><code>git diff</code> –cached查看暂存区和仓库差异，</p><p><code>git diff HEAD</code>查看工作区和仓库的差异，</p><p><code>git add</code>的反向命令<code>git checkout</code>，撤销工作区修改，即把暂存区最新版本转移到工作区，</p><p><code>git commit</code>的反向命令``git reset HEAD`，就是把仓库最新版本转移到暂存区。</p></li></ul></li><li><p>管理修改</p><ul><li>理解了Git是如何跟踪修改的，每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</li></ul></li><li><p>撤销修改</p><ul><li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</li><li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</li><li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192" target="_blank" rel="noopener">版本回退</a>一节，不过前提是没有推送到远程库。</li></ul></li><li><p>删除文件</p><ul><li><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：<code>$ rm test.txt</code></p></li><li><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200602163313271.png" alt="image-20200602163313271"></p></li><li><p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：<code>$ git rm test.txt</code> <code>rm 'test.txt'</code> 现在，文件就从版本库中被删除了</p></li><li><p>小提示：先手动删除文件，然后使用<code>git rm &lt;file&gt;</code>和<code>git add&lt;file&gt;</code>效果是一样的。</p></li><li><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：<code>$ git checkout -- test.txt</code>。<code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。但是，<u><strong>从来没有被添加到版本库就被删除的文件，是无法恢复的！</strong></u></p></li><li><p>小结：命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p></li></ul></li></ol><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ol><li><p>添加远程库</p><ul><li><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；以<code>github</code>为例子：<code>git remote add origin git@github.com:liudufu/First_Git_Text.git</code></p></li><li><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p></li><li><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而<code>SVN</code>在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了</p></li></ul></li><li><p>从远程库克隆</p><ul><li><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。例如：<code>git clone git@github.com:michaelliao/gitskills.git</code></p></li><li><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。你也许还注意到，<code>GitHub</code>给出的地址不止一个，还可以用<code>https://github.com/michaelliao/gitskills.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p><p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放<code>http</code>端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p></li><li><p>Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快。</p></li></ul></li></ol><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><ol><li><p>简介：分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p></li><li><p>创建与合并分支</p><ul><li><p><code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200603203525643.png" alt="image-20200603203525643"></p></li><li><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200603203559448.png" alt="image-20200603203559448"></p></li><li><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支</p><figure class="highlight plain"><figcaption><span>checkout -b dev```</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`git checkout`命令加上`-b`参数表示创建并切换，相当于以下两条命令：</span><br></pre></td></tr></tbody></table></figure><p>$ git branch dev<br>$ git checkout dev<br>Switched to branch ‘dev’</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 把`dev`分支的工作成果合并到`master`分支上：</span><br><span class="line"></span><br><span class="line">  ```git</span><br><span class="line">  $ git merge dev</span><br><span class="line">  Updating d46f35e..b17d20e</span><br><span class="line">  Fast-forward</span><br><span class="line">   readme.txt | 1 +</span><br><span class="line">   1 file changed, 1 insertion(+)</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p><p>当然，也不是每次合并都能<code>Fast-forward</code></p></li><li><p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。</p><p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支：</p><p>创建并切换到新的<code>dev</code>分支，可以使用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git switch -c dev</span><br></pre></td></tr></tbody></table></figure></li><li><p>直接切换到已有的<code>master</code>分支，可以使用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git switch master</span><br></pre></td></tr></tbody></table></figure><p>​    使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p></li><li><p>小结：查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p></li></ul></li><li><p>解决冲突</p><ul><li>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</li><li>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</li><li>用<code>git log --graph</code>命令可以看到分支合并图。</li></ul></li><li><p>分支管理策略</p><ul><li><p>Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：</p></li><li><p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m "merge with no-ff" dev</span><br></pre></td></tr></tbody></table></figure></li><li><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。合并后，我们用<code>git log</code>看看分支历史：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200603213003612.png" alt="image-20200603213003612"></p></li><li><p>在Git中，干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p></li></ul></li><li><p>bug分支</p><ul><li><p>哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch 'master'</span><br><span class="line">Your branch is ahead of 'origin/master' by 6 commits.</span><br><span class="line">  (use "git push" to publish your local commits)</span><br><span class="line"></span><br><span class="line">$ git checkout -b issue-101</span><br><span class="line">Switched to a new branch 'isse-101'</span><br></pre></td></tr></tbody></table></figure></li><li><p>bug 修复后把文件add以及commit，切换回master分支，删除<code>issue-101</code>分支：<code>$ git switch master</code> <code>git merge --no-ff -m "merged bug fix 101" issue-101</code></p></li><li><p>查看刚才的工作现场<code>git stash list</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@{0}: WIP on dev: f52c633 add merge</span><br></pre></td></tr></tbody></table></figure></li><li><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p><p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p><p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：再用<code>git stash list</code>查看，就看不到任何stash内容了：</p><p>你可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply stash@{0}</span><br></pre></td></tr></tbody></table></figure></li><li><p>同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p><p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git cherry-pick 4c805e2</span><br><span class="line">[master 1d4b803] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></tbody></table></figure><p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，因为这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍。</p><p>有些聪明的童鞋会想了，既然可以在master分支上修复bug后，在dev分支上可以“重放”这个修复过程，那么直接在dev分支上修复bug，然后在master分支上“重放”行不行？当然可以，不过你仍然需要<code>git stash</code>命令保存现场，才能从dev分支切换到master分支。</p></li><li><p>小结：修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p><p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动</p></li></ul></li><li><p>Feature分支</p><ul><li><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p></li></ul></li><li><p>多人协作</p><ul><li><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。要查看远程库的信息，用<code>git remote</code>用<code>git remote -v</code>显示更详细的信息：</p></li><li><p><code>master</code>分支是主分支，因此要时刻与远程同步；<code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p></li><li><p>抓取分支，现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：<code>$ git clone git@github.com:michaelliao/learngit.git</code></p></li><li><p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：<code>$ git push origin dev</code>,这个时候会推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：如果<code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --set-upstream-to=origin/dev dev</span><br><span class="line">Branch 'dev' set up to track remote branch 'dev' from 'origin'.</span><br></pre></td></tr></tbody></table></figure><p>在进行pull,这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="http://www.liaoxuefeng.com/wiki/896043488029600/900004111093344" target="_blank" rel="noopener">解决冲突</a>完全一样。解决后，提交，再push：</p></li><li><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p></li><li><p>小结：查看远程库信息，使用<code>git remote -v</code>；</p><ul><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul></li></ul></li><li><p>Rebase</p><ul><li><p>多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。</p><p>每次合并再push后，分支变成了这样</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* d1be385 (HEAD -&gt; master, origin/master) init hello</span><br><span class="line">*   e5e69f1 Merge branch 'dev'</span><br><span class="line">|\  </span><br><span class="line">| *   57c53ab (origin/dev, dev) fix env conflict</span><br><span class="line">| |\  </span><br><span class="line">| | * 7a5e5dd add env</span><br><span class="line">| * | 7bd91f1 add new env</span><br><span class="line">| |/  </span><br><span class="line">* |   12a631b merged bug fix 101</span><br><span class="line">|\ \  </span><br><span class="line">| * | 4c805e2 fix bug 101</span><br><span class="line">|/ /  </span><br><span class="line">* |   e1e9c68 merge with no-ff</span><br><span class="line">|\ \  </span><br><span class="line">| |/  </span><br><span class="line">| * f52c633 add merge</span><br><span class="line">|/  </span><br><span class="line">*   cf810e4 conflict fixed</span><br></pre></td></tr></tbody></table></figure></li><li><p>这个时候，rebase就派上了用场。我们输入命令<code>git rebase</code>试试</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: add comment</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">Mhello.py</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging hello.py</span><br><span class="line">Applying: add author</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">Mhello.py</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging hello.py</span><br></pre></td></tr></tbody></table></figure></li><li><p>输出了一大堆操作，到底是啥效果？再用<code>git log</code>看看：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 7e61ed4 (HEAD -&gt; master) add author</span><br><span class="line">* 3611cfe add comment</span><br><span class="line">* f005ed4 (origin/master) set exit=1</span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure></li><li><p>原本分叉的提交现在变成一条直线了！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了<code>f005ed4 (origin/master) set exit=1</code>之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于<code>d1be385 init hello</code>，而是基于<code>f005ed4 (origin/master) set exit=1</code>，但最后的提交<code>7e61ed4</code>内容是一致的。</p><p>这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p><p>最后，通过push操作把本地分支推送到远程：</p></li><li><p>再用<code>git log</code>看看效果</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 7e61ed4 (HEAD -&gt; master, origin/master) add author</span><br><span class="line">* 3611cfe add comment</span><br><span class="line">* f005ed4 set exit=1</span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>远程分支的提交历史也是一条直线。</p></li><li><p>小结：</p><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul></li></ul></li></ol><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><ol><li><p>简介：发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。例如：</p><p>请把上周一的那个版本打包发布，版本号是v1.2”</p><p>“好的，按照tag v1.2查找commit就行！”</p><p>所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p></li><li><p>创建标签</p><ul><li>打标签很简单,切换到打标签的分支</li></ul></li></ol><pre><code><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">* dev</span><br><span class="line">master</span><br><span class="line">$ git checkout master</span><br></pre></td></tr></tbody></table></figure>敲`git tag &lt;name&gt;`打一个新的标签<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.0</span><br></pre></td></tr></tbody></table></figure>使用`git tag` 查看所有标签<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1.0</span><br></pre></td></tr></tbody></table></figure>比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？方法是找到历史提交的commit id，然后打上就可以了<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline --abbrev-commit</span><br><span class="line">12a631b (HEAD -&gt; master, tag: v1.0, origin/master) merged bug fix 101</span><br><span class="line">4c805e2 fix bug 101</span><br><span class="line">e1e9c68 merge with no-ff</span><br><span class="line">f52c633 add merge</span><br><span class="line">cf810e4 conflict fixed</span><br><span class="line">5dc6824 &amp; simple</span><br><span class="line">14096d0 AND simple</span><br><span class="line">b17d20e branch test</span><br><span class="line">d46f35e remove test.txt</span><br><span class="line">b84166e add test.txt</span><br><span class="line">519219b git tracks changes</span><br><span class="line">e43a48b understand how stage works</span><br><span class="line">1094adb append GPL</span><br><span class="line">e475afc add distributed</span><br><span class="line">eaadf4e wrote a readme file</span><br></pre></td></tr></tbody></table></figure>比方说要对`add merge`这次提交打标签，它对应的commit id是`f52c633`，敲入命令：`$ git tag v0.9 f52c633`</code></pre><ul><li><p>标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</p></li><li><p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.1 -m "version 0.1 released" 1094adb</span><br></pre></td></tr></tbody></table></figure><p>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0.1</span><br><span class="line">tag v0.1</span><br><span class="line">Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 22:48:43 2018 +0800</span><br><span class="line"></span><br><span class="line">version 0.1 released</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</strong></p></li><li><p>小结：</p><ul><li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li><li>命令<code>git tag -a &lt;tagname&gt; -m "blablabla..."</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签。</li></ul></li></ul><ol start="3"><li><p>操作标签</p><ul><li><p>删除一个标签：<code>git tag -d v0.1</code></p></li><li><p>因为创建的标签都保存在本地，不会自动推送到远程。所以打错的标签可以在本地安全的删除，如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1.0</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></tbody></table></figure><p>或者，一次性推送全部尚未推送到远程的本地标签：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v0.9 -&gt; v0.9</span><br></pre></td></tr></tbody></table></figure></li><li><p>如果需要删除已经推送到远程的标签，需要先删除本地标签</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.9</span><br><span class="line">Deleted tag 'v0.9' (was f52c633)</span><br></pre></td></tr></tbody></table></figure><p>然后，从远程删除，命令也是push，但是格式却不同：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/v0.9</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> - [deleted]         v0.9</span><br></pre></td></tr></tbody></table></figure><p>登录GitHub查看是否删除了标签</p></li><li><p>小结：</p><ul><li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li></ul></li></ul></li></ol><h2 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h2><ol><li><p>如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a href="https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：" target="_blank" rel="noopener">https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:michaelliao/bootstrap.git</span><br></pre></td></tr></tbody></table></figure><p>一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址<code>git@github.com:twbs/bootstrap.git</code>克隆，因为没有权限，你将不能推送修改。</p><p>Bootstrap的官方仓库<code>twbs/bootstrap</code>、你在GitHub上克隆的仓库<code>my/bootstrap</code>，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200605203808429.png" alt="image-20200605203808429"></p><p>如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。</p><p>如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。</p><p>如果你没能力修改bootstrap，但又想要试一把pull request，那就Fork一下我的仓库：<a href="https://github.com/michaelliao/learngit，创建一个`your-github-id.txt`的文本文件，写点自己学习Git的心得，然后推送一个pull" target="_blank" rel="noopener">https://github.com/michaelliao/learngit，创建一个`your-github-id.txt`的文本文件，写点自己学习Git的心得，然后推送一个pull</a> request给我，我会视心情而定是否接受。<a href="https://github.com" target="_blank" rel="noopener">liudufu</a>     <a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p></li><li><p><strong>小结</strong></p><ul><li>在GitHub上，可以任意Fork开源仓库；</li><li>自己拥有Fork后的仓库的读写权限；</li><li>可以推送pull request给官方仓库来贡献代码。</li></ul></li></ol><h2 id="使用Gitee"><a href="#使用Gitee" class="headerlink" title="使用Gitee"></a>使用Gitee</h2><ol><li><p>和GitHub相比，Gitee也提供免费的Git仓库。此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，Gitee还提供了项目管理、代码托管、文档管理的服务，5人以下小团队免费。</p><p>Gitee的免费版本也提供私有库功能，只是有5人的成员上限。</p><p>使用Gitee和使用GitHub类似，我们在Gitee上注册账号并登录后，需要先上传自己的SSH公钥。选择右上角用户头像 -&gt; 菜单“修改资料”，然后选择“SSH公钥”，填写一个便于识别的标题，然后把用户主目录下的<code>.ssh/id_rsa.pub</code>文件的内容粘贴进去：</p></li><li><p>如果我们已经有了一个本地的git仓库（例如，一个名为learngit的本地库），如何把它关联到Gitee的远程库上呢？</p><p>首先，我们在Gitee上创建一个新的项目项目名称最好与本地库保持一致：</p><p>然后，我们在本地库上使用命令<code>git remote add</code>把它和Gitee的远程库关联：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">(git remote add origin git@gitee.com:https://gitee.com/dufu-03-13/git_repo_Text)</span><br></pre></td></tr></tbody></table></figure><p>之后，就可以正常地用<code>git push</code>和<code>git pull</code>推送了！</p><p>如果在使用命令<code>git remote add</code>时报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">fatal: remote origin already exists.</span><br></pre></td></tr></tbody></table></figure><p>这说明本地库已经关联了一个名叫<code>origin</code>的远程库，此时，可以先用<code>git remote -v</code>查看远程库信息：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origingit@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origingit@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></tbody></table></figure><p>可以看到，本地库已经关联了<code>origin</code>的远程库，并且，该远程库指向GitHub。</p><p>我们可以删除已有的GitHub远程库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></tbody></table></figure><p>再关联Gitee的远程库（注意路径中需要填写正确的用户名）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></tbody></table></figure><p>此时，我们再查看远程库信息：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origingit@gitee.com:liaoxuefeng/learngit.git (fetch)</span><br><span class="line">origingit@gitee.com:liaoxuefeng/learngit.git (push)</span><br></pre></td></tr></tbody></table></figure><p>现在可以看到，origin已经被关联到Gitee的远程库了。通过<code>git push</code>命令就可以把本地库推送到Gitee上。</p><p>git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。</p><p>使用多个远程库时，我们要注意，git给远程库起的默认名称是<code>origin</code>，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。</p><p>仍然以<code>learngit</code>本地库为例，我们先删除已关联的名为<code>origin</code>的远程库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></tbody></table></figure><p>然后，先关联GitHub的远程库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add github git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></tbody></table></figure><p>注意，远程库的名称叫<code>github</code>，不叫<code>origin</code>了。</p><p>接着，再关联Gitee的远程库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></tbody></table></figure><p>同样注意，远程库的名称叫<code>gitee</code>，不叫<code>origin</code>。</p><p>现在，我们用<code>git remote -v</code>查看远程库信息，可以看到两个远程库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">giteegit@gitee.com:liaoxuefeng/learngit.git (fetch)</span><br><span class="line">giteegit@gitee.com:liaoxuefeng/learngit.git (push)</span><br><span class="line">githubgit@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">githubgit@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></tbody></table></figure><p>如果要推送到GitHub，使用命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push github master</span><br></pre></td></tr></tbody></table></figure><p>如果要推送到Gitee，使用命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u gitee master</span><br></pre></td></tr></tbody></table></figure><p>这样一来，我们的本地库就可以同时与多个远程库互相同步：</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;/p&gt;
&lt;p&gt;Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Git" scheme="https://liudufu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>MySql基础学习</title>
    <link href="https://liudufu.github.io/MySQL_basic_learning/"/>
    <id>https://liudufu.github.io/MySQL_basic_learning/</id>
    <published>2020-12-08T09:44:55.000Z</published>
    <updated>2020-12-08T09:56:17.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MySQL是一个<strong><a href="https://baike.baidu.com/item/关系型数据库管理系统/696511" target="_blank" rel="noopener">关系型数据库管理系统</a>**</strong>，**由瑞典MySQL AB 公司开发，属于 <a href="https://baike.baidu.com/item/Oracle" target="_blank" rel="noopener">Oracle</a> 旗下产品。MySQL 是最流行的<a href="https://baike.baidu.com/item/关系型数据库管理系统/696511" target="_blank" rel="noopener">关系型数据库管理系统</a>之一，在 WEB 应用方面，MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260" target="_blank" rel="noopener">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p></blockquote><a id="more"></a><h1 id="MySql基础学习"><a href="#MySql基础学习" class="headerlink" title="MySql基础学习"></a>MySql基础学习</h1><h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><h3 id="1-1-现有的数据存储方式有哪些？"><a href="#1-1-现有的数据存储方式有哪些？" class="headerlink" title="1.1 现有的数据存储方式有哪些？"></a>1.1 现有的数据存储方式有哪些？</h3><ul><li>Java程序存储数据（变量、对象、数组、集合），数据保存在内存中，属于瞬时状态存储。</li><li>文件（File）存储数据，保存在硬盘上，属于持久状态存储。</li></ul><h3 id="1-2-以上存储方式存在哪些缺点？"><a href="#1-2-以上存储方式存在哪些缺点？" class="headerlink" title="1.2 以上存储方式存在哪些缺点？"></a>1.2 以上存储方式存在哪些缺点？</h3><ul><li>没有数据类型的区分。</li><li>存储数据量极小。</li><li>没有安全访问限制。</li><li>没有备份、恢复机制。 </li></ul><h2 id="二、数据库"><a href="#二、数据库" class="headerlink" title="二、数据库"></a>二、数据库</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p> 数据库是按照数据接口来<strong>组织</strong>、<strong>存储和管理数据的仓库</strong>。是一个长期存储在计算机内的、有组织的、有共享的、统一管理的数据集合。</p><h3 id="2-2-数据库的分类"><a href="#2-2-数据库的分类" class="headerlink" title="2.2 数据库的分类"></a>2.2 数据库的分类</h3><ul><li>网状结构数据库：美国通用电气公司IDS（Integrated Data Store），以节点形式存储和访问。</li><li>层次结构数据库：IBM公司IMS（Information Management System）定向有序的树状结构实现存储和访问。</li><li>关系结构数据库：Oracle、DB2、MySQL、SQL Server，以表格（Table）存储，多表间建立关联关系，通过分类、合并、连接、选取等运算实现访问。</li><li>非关系型数据库：ElastecSearch、MongoDB、Redis，多数使用哈希表，表中以键值（key-value）的方式实现特定的键和一个指针指向的特定数据。</li></ul><h2 id="三、数据库管理系统"><a href="#三、数据库管理系统" class="headerlink" title="三、数据库管理系统"></a>三、数据库管理系统</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><blockquote><p> <strong>数据库管理系统</strong>（DataBase Management System，DBMS）：指一种操作和管理数据库的大型软件，用于建立、使用、和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中的数据。</p></blockquote><h3 id="3-2-常见数据库管理系统"><a href="#3-2-常见数据库管理系统" class="headerlink" title="3.2 常见数据库管理系统"></a>3.2 常见数据库管理系统</h3><ul><li>Oracle：被认为是业界目前比较成功的关系型数据库管理系统。Oracle数据库可以运行在UNIX、Windows等主流操作平台，完全支持所有的工业标准，并获得最高级别的ISO标准安全性认证。</li><li>DB2：IBM公司的产品，DB2数据库采用多进程多线索体系结构，其功能足以满足大中公司的需求，并可灵活地服务于中小型电子商务解决方案。</li><li>SQL Server： Microsoft公司退出的关系型数据库管理系统。具有使用方便可伸缩性好与相关软件集成程度高等优点。</li><li>SQLLite：应用在手机端的数据库。</li></ul><h2 id="四、MySQL"><a href="#四、MySQL" class="headerlink" title="四、MySQL"></a>四、MySQL</h2><h3 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h3><blockquote><p> MySQL是一个<strong>关系型数据库管理系统</strong>，由瑞典MySQL AB公司开发，属于Oracle旗下产品。MySQL是最流行的关系型数据库管理系统之一，在WEB应用方面，MySQL是最好RDBM（Relational Database Management System，关系型数据库管理系统）应用软件之一。</p></blockquote><h3 id="4-2-访问与下载"><a href="#4-2-访问与下载" class="headerlink" title="4.2 访问与下载"></a>4.2 访问与下载</h3><p>官网地址： <a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p><p>下载地址： <a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><p>mysql安装过程请查看<a href="https://blog.csdn.net/weixin_45333934/article/details/105065704" target="_blank" rel="noopener">mysql安装指南</a>。</p><h3 id="4-3-卸载"><a href="#4-3-卸载" class="headerlink" title="4.3 卸载"></a>4.3 卸载</h3><ul><li>控制台卸载。</li><li>找到mysql的安装目录进行删除。</li><li>programdata删除mysql。</li></ul><blockquote><ul><li>如果卸载后，有未删除的MySQL服务，可采用手动删除。</li><li>以管理员身份打开命令行，输入<code>sc delete MySQL57</code>，回车。</li></ul></blockquote><p>如果某个MySQL组件无法删除，可以尝试从注册表搜索信息删除相关文件夹。具体可百度。</p><h3 id="4-4-配置环境变量"><a href="#4-4-配置环境变量" class="headerlink" title="4.4 配置环境变量"></a>4.4 配置环境变量</h3><p><strong>Windows</strong></p><ul><li>创建MYSQL_HOME: <code>C:\Program Files\MySQL\MySQL Server5.7</code></li><li>追加PATH: <code>%MYSQL_HOME%\bin;</code></li></ul><h3 id="4-5-MySQL目录结构"><a href="#4-5-MySQL目录结构" class="headerlink" title="4.5 MySQL目录结构"></a>4.5 MySQL目录结构</h3><p>核心文件介绍：</p><table><thead><tr><th>文件夹名称</th><th>内容</th></tr></thead><tbody><tr><td>bin</td><td>命令文件</td></tr><tr><td>lib</td><td>库文件</td></tr><tr><td>include</td><td>头文件</td></tr><tr><td>Share</td><td>字符集、语言等信息</td></tr></tbody></table><h3 id="4-6-MySQL配置文件"><a href="#4-6-MySQL配置文件" class="headerlink" title="4.6 MySQL配置文件"></a>4.6 MySQL配置文件</h3><blockquote><p> 在MySQL安装目录中找到my.ini文件，并打开my.ini文件查看几个常用配置参数。</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>default-character-set</td><td>客户端默认字符集</td></tr><tr><td>character-set-server</td><td>服务器端默认字符集</td></tr><tr><td>port</td><td>客户端和服务器端的端口号</td></tr><tr><td>default-storage-engine</td><td>MySQL默认存储引擎INNODB</td></tr></tbody></table><p>通过安装程序安装的MySQL配置文件在C盘的隐藏文件ProgramData中，点进去找到对应的MYSQL目录就能看到my.ini文件了。</p><p>客户端默认字符集和服务器端默认字符集必须保持一致，它们在初始的配置文件中都是被注释掉的，那么默认的字符集会跟随你的系统默认字符集。</p><h2 id="五、SQL语言"><a href="#五、SQL语言" class="headerlink" title="五、SQL语言"></a>五、SQL语言</h2><h3 id="5-1概念"><a href="#5-1概念" class="headerlink" title="5.1概念"></a>5.1概念</h3><blockquote><p>SQL (Structured Query Language)结构化查询语言，用于存取数据、更新、查询和管理关系数据库系统的程序设计语言。</p></blockquote><ul><li>经验:通常执行对数据库的“增删改查”，简称c (create) R (Read) u (Update) D (Delete)。</li></ul><h3 id="5-2-MySql应用"><a href="#5-2-MySql应用" class="headerlink" title="5.2  MySql应用"></a>5.2  MySql应用</h3><blockquote><p>对于数据库的操作，需要在进入MySQL环境下进行指令输入，并在一句指令的末尾使用;结束</p></blockquote><h3 id="5-3基本命令"><a href="#5-3基本命令" class="headerlink" title="5.3基本命令"></a>5.3基本命令</h3><blockquote><p>查看MvSqL中所有数据库</p></blockquote><p><code>mysqls SHOW DATABASES;#显示当前MySQL中包含的所有数据库</code></p><table><thead><tr><th>数据库名称</th><th>作用</th></tr></thead><tbody><tr><td>information_schema</td><td>信息数据库</td></tr><tr><td>mysql</td><td>核心数据库</td></tr><tr><td>performance_schema</td><td>性能优化</td></tr><tr><td>sakila</td><td>样板数据库</td></tr><tr><td>sys</td><td>系统数据库</td></tr><tr><td>world</td><td>国家的编号等</td></tr></tbody></table><blockquote><p>创建自定义数据库</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database mydb1; # 创建数据库</span><br><span class="line">create database mydb2 character set gbk; # 编码格式为gbk</span><br><span class="line">create database if not exists mydb4;# 如果mudb4不存在就创建他</span><br></pre></td></tr></tbody></table></figure><blockquote><p>查看数据库创建信息</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> mydb2; <span class="comment"># 查看数据库创建信息</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改数据库</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database mydb2 character set utf8;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>删除数据库</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database mydb1; # 删除数据库</span><br></pre></td></tr></tbody></table></figure><blockquote><p>查看当前使用的数据库</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用数据库</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mydb2;</span><br></pre></td></tr></tbody></table></figure><h2 id="六、客户端工具"><a href="#六、客户端工具" class="headerlink" title="六、客户端工具"></a>六、客户端工具</h2><h3 id="6-1-Navicate"><a href="#6-1-Navicate" class="headerlink" title="6.1 Navicate"></a>6.1 Navicate</h3><blockquote><p>Navicat是一套快速、可靠并价格相宜的数据库管理工具，专为简化数据库的管理及降低系统管理成本而设。它的设计符合数据库管理员、开发人员及中小企业的需要。Navicat 是以直觉化的图形用户界面而建的，让你可以以安全并且简单的方式创建、组织、访问并共用信息。</p></blockquote><h3 id="6-2-SQLyog"><a href="#6-2-SQLyog" class="headerlink" title="6.2 SQLyog"></a>6.2 SQLyog</h3><blockquote><p>MySQL可能是世界上最流行的开源数据库引擎，但是使用基于文本的工具和配置文件可能很难进行管理。SQLyog提供了完整的图形界面，即使初学者也可以轻松使用MySQL的强大功能。其拥有广泛的预定义工具和查询、友好的视觉界面、类似Excel的查询结果编辑界面等优点。</p></blockquote><h2 id="七、数据查询【重点】"><a href="#七、数据查询【重点】" class="headerlink" title="七、数据查询【重点】"></a>七、数据查询【重点】</h2><h3 id="7-1-数据库表的基本结构"><a href="#7-1-数据库表的基本结构" class="headerlink" title="7.1 数据库表的基本结构"></a>7.1 数据库表的基本结构</h3><blockquote><p>关系数据库是以表格(Table)进行数据存储,表格由“行”和“列”组成</p></blockquote><ul><li>经验：执行查询语句返回的结果是一张虚拟表</li></ul><h3 id="7-2-基本查询"><a href="#7-2-基本查询" class="headerlink" title="7.2 基本查询"></a>7.2 基本查询</h3><blockquote><p>语法:SELECT列名FROM表名</p></blockquote><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>SELECT</td><td>指定要查询的列</td></tr><tr><td>FROM</td><td>指定要查询的表</td></tr></tbody></table><h4 id="7-2-1-查询部分列"><a href="#7-2-1-查询部分列" class="headerlink" title="7.2.1 查询部分列"></a>7.2.1 查询部分列</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查询员工表中所有员工的编号】你名字、邮箱</span><br><span class="line">select employee_id fist_name, email</span><br><span class="line">from t_employee</span><br></pre></td></tr></tbody></table></figure><h4 id="7-2-2查询所有列"><a href="#7-2-2查询所有列" class="headerlink" title="7.2.2查询所有列"></a>7.2.2查询所有列</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有列</span><br><span class="line"># 1、使用*的方式</span><br><span class="line">SELECT * FROM t_employees;</span><br><span class="line"># 2、使用列名的方式</span><br><span class="line">SELECT 所有列的列名 FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><ul><li>注意：生产环境下，优先使用列名查询，*的方式需要转换成全列名。效率低，可读性差</li></ul><h4 id="7-2-3-对列中的数据进行运算"><a href="#7-2-3-对列中的数据进行运算" class="headerlink" title="7.2.3 对列中的数据进行运算"></a>7.2.3 对列中的数据进行运算</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询员工的编号、名字、年薪</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY * 12 FROM t_employees</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>算数运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>两列做加法运算</td></tr><tr><td>-</td><td>两列做减法运算</td></tr><tr><td>*</td><td>两列做乘法运算</td></tr><tr><td>/</td><td>两列做除法运算</td></tr></tbody></table><ul><li>% 是占位符。而并非模运算符</li></ul><h4 id="7-2-4-列的别名"><a href="#7-2-4-列的别名" class="headerlink" title="7.2.4 列的别名"></a>7.2.4 列的别名</h4><blockquote><p>列 as 列名</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT EMPLOYEE_ID '编号',FIRST_NAME AS '姓氏',SALARY * 12 AS '年薪' FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-2-5-查询结果去重"><a href="#7-2-5-查询结果去重" class="headerlink" title="7.2.5 查询结果去重"></a>7.2.5 查询结果去重</h4><blockquote><p>distinct 列名</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询员工表中有多少个经理</span><br><span class="line">SELECT DISTINCT MANAGER_ID FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><h3 id="7-3-排序查询"><a href="#7-3-排序查询" class="headerlink" title="7.3  排序查询"></a>7.3  排序查询</h3><blockquote><p>语法:SELECT 列名 FROM 表名 <code>ORDER BY排序列[排序规则]</code></p></blockquote><table><thead><tr><th>排序规则</th><th>描述</th></tr></thead><tbody><tr><td>ASC</td><td>对前面排序列做升序排列</td></tr><tr><td>desc</td><td>对前面排序列做降序排序</td></tr></tbody></table><h4 id="7-3-1-依据单列排序"><a href="#7-3-1-依据单列排序" class="headerlink" title="7.3.1  依据单列排序"></a>7.3.1  依据单列排序</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 对员工工资进行升序排序</span><br><span class="line">SELECT EMPLOYEE_ID,salary FROM t_employees ORDER BY salary + 0 ASC;</span><br><span class="line"># 对员工工资进行降序排序</span><br><span class="line">SELECT EMPLOYEE_ID,salary FROM t_employees ORDER BY salary + 0 DESC;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-3-2-依据多列排序"><a href="#7-3-2-依据多列排序" class="headerlink" title="7.3.2  依据多列排序"></a>7.3.2  依据多列排序</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 按照工资高低进行降序排序，如果工资相等，按照员工编号升序进行排序</span><br><span class="line">SELECT EMPLOYEE_ID,salary FROM t_employees ORDER BY salary + 0 DESC, EMPLOYEE_ID DESC;</span><br></pre></td></tr></tbody></table></figure><h3 id="7-4-条件查询"><a href="#7-4-条件查询" class="headerlink" title="7.4  条件查询"></a>7.4  条件查询</h3><blockquote><p>语法:  SELECT 列名 FROM 表名 WHERE  条件</p></blockquote><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>where 条件</td><td>在查询结果中，筛选符合查询条件的查询结果，条件为布尔表达式</td></tr></tbody></table><h4 id="7-4-1-等值判断"><a href="#7-4-1-等值判断" class="headerlink" title="7.4.1  等值判断"></a>7.4.1  等值判断</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询符合条件的数据</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY = 11000</span><br><span class="line"></span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY = 24000</span><br></pre></td></tr></tbody></table></figure><ul><li>注意：与java不同（==），mysql中等值判断使用=</li></ul><h4 id="7-4-2-逻辑判断（and-、or、-not）"><a href="#7-4-2-逻辑判断（and-、or、-not）" class="headerlink" title="7.4.2  逻辑判断（and 、or、 not）"></a>7.4.2  逻辑判断（and 、or、 not）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY = 11000 AND COMMISSION_PCT = 0.30 AND EMPLOYEE_ID = '148';</span><br><span class="line"></span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY = 11000 OR COMMISSION_PCT = 0.30;</span><br><span class="line"></span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE NOT SALARY = 11000;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-4-3-不等值判断（-gt-、-lt-、-gt-、-lt-、-lt-gt-、-）"><a href="#7-4-3-不等值判断（-gt-、-lt-、-gt-、-lt-、-lt-gt-、-）" class="headerlink" title="7.4.3  不等值判断（>、 <、>=、<=、<>、!=）"></a>7.4.3  不等值判断（&gt;、 &lt;、&gt;=、&lt;=、&lt;&gt;、!=）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY != 11000;</span><br><span class="line"></span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY &lt;&gt; 11000;</span><br><span class="line"></span><br><span class="line"># 查询工资区间在[6000, 10000]之间</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY &gt;= 6000 AND salary &lt;= 10000;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-4-4-区间判断-between-起始and-终止"><a href="#7-4-4-区间判断-between-起始and-终止" class="headerlink" title="7.4.4  区间判断(between 起始and 终止)"></a>7.4.4  区间判断(between 起始and 终止)</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询工资区间在[6000, 10000]之间</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,salary</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE SALARY BETWEEN 6000 AND 10000;</span><br></pre></td></tr></tbody></table></figure><ul><li>注意：在区间判断中，小值在前，大值在后，反之，得不到结果</li></ul><h4 id="7-4-5-null值判断（is-null、is-not-null）"><a href="#7-4-5-null值判断（is-null、is-not-null）" class="headerlink" title="7.4.5 null值判断（is null、is not null）"></a>7.4.5 null值判断（is null、is not null）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询出经理编号为null的员工信息</span><br><span class="line">SELECT employee_id, FIRST_NAME,MANAGER_ID</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE MANAGER_ID IS NULL;</span><br><span class="line"></span><br><span class="line">SELECT employee_id, FIRST_NAME,MANAGER_ID</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE MANAGER_ID IS NOT NULL;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-4-6-枚举查询（IN（值1，-值2，值3））"><a href="#7-4-6-枚举查询（IN（值1，-值2，值3））" class="headerlink" title="7.4.6  枚举查询（IN（值1， 值2，值3））"></a>7.4.6  枚举查询（IN（值1， 值2，值3））</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查询部门编号为70,80,90 的员工信息</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,SALARY,department_id</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE department_id = 70 OR department_id = 80 OR department_id = 90;</span><br><span class="line"></span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME,SALARY,department_id</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE department_id IN (70,80,90);</span><br><span class="line"># in 的效率在大数据面前较低</span><br></pre></td></tr></tbody></table></figure><h4 id="7-4-7-模糊查询"><a href="#7-4-7-模糊查询" class="headerlink" title="7.4.7  模糊查询"></a>7.4.7  模糊查询</h4><blockquote><ul><li>LIKE_（单个任由字符）</li></ul><p>​       列名 LIKE ‘张__’</p><ul><li><p>LIKE %(任意长度的任意字符)</p><p>列名 LIKE ‘张%’</p></li></ul></blockquote><ul><li>注意：模糊查询只能和LIKE关键字结合使用</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询L开头的三个字的员工信息</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME, SALARY</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE FIRST_NAME LIKE 'L__';</span><br><span class="line"># 查询所有以L开头的员工信息</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY</span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE first_name LIKE '张%';</span><br></pre></td></tr></tbody></table></figure><h4 id="7-4-8-分支结构查询"><a href="#7-4-8-分支结构查询" class="headerlink" title="7.4.8 分支结构查询"></a>7.4.8 分支结构查询</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line">    WHEN 条件1 THEN 结果1</span><br><span class="line">    WHEN 条件2 THEN 结果2</span><br><span class="line">    WHEN 条件3 THEN 结果3</span><br><span class="line">    ELSE 结果</span><br><span class="line">END</span><br></pre></td></tr></tbody></table></figure><ul><li>注意：通过使用case  end进行条件判断，每条数据对应生成一个值</li><li>经验：类似java中的switch</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查询员工信息</span><br><span class="line">SELECT EMPLOYEE_ID, FIRST_NAME, SALARY,department_id,</span><br><span class="line">CASE</span><br><span class="line">WHEN SALARY &gt;= 10000 THEN 'A'</span><br><span class="line">WHEN SALARY &gt;= 8000 AND SALARY &lt; 10000 THEN 'B'</span><br><span class="line">WHEN SALARY &gt;= 6000 AND SALARY &lt; 8000 THEN 'C'</span><br><span class="line">WHEN SALARY &gt;= 4000 AND SALARY &lt; 6000 THEN 'D'</span><br><span class="line">ELSE 'E'</span><br><span class="line">END AS "level"</span><br><span class="line">FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><h3 id="7-5-时间查询"><a href="#7-5-时间查询" class="headerlink" title="7.5  时间查询"></a>7.5  时间查询</h3><blockquote><p>select     时间函数（[参数列表]）</p></blockquote><ul><li>经验：执行时间函数查询，会自动生成一张虚表</li></ul><table><thead><tr><th>时间函数</th><th>描述</th></tr></thead><tbody><tr><td>SYSDATE</td><td>当前系统时间（日月年时分秒）</td></tr><tr><td>CURDATE</td><td>获取当前日期</td></tr><tr><td>CURTIME</td><td>获取当前时间</td></tr><tr><td>WEEK(DATE)</td><td>获取指定日期为一年中的第几周</td></tr><tr><td>YEAR(DATE)</td><td>获取指定日期的年份</td></tr><tr><td>HOUR(TIME)</td><td>获取指定时间的小时值</td></tr><tr><td>MINUTE(TIME)</td><td>获取时间的分钟值</td></tr><tr><td>DATEDIFF(DATE,DATE2)</td><td>获取DATE1和DATE2之间相隔的天数</td></tr><tr><td>ADDDATE(DATE,N)</td><td>计算DATE加上N天后的日期</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 当前系统的时间</span><br><span class="line">SELECT SYSDATE();</span><br><span class="line"># 当前系统的ri期</span><br><span class="line">SELECT CURDATE();</span><br><span class="line"># 获取系统时间</span><br><span class="line">SELECT CURTIME();</span><br><span class="line"># 获取指定日期为一年中的第几周</span><br><span class="line">SELECT WEEK(SYSDATE());</span><br><span class="line"># 获取指定日期忠厚的年份</span><br><span class="line">SELECT YEAR(SYSDATE());</span><br><span class="line"># 获取小时值</span><br><span class="line">SELECT HOUR(CURTIME());</span><br><span class="line"># 获取分钟值</span><br><span class="line">SELECT MINUTE(CURTIME());</span><br><span class="line"># 指定日期之间的相隔天数</span><br><span class="line">SELECT DATEDIFF('2020-4-1','2019-4-1');</span><br><span class="line"># 计算date日期加上n天后的日期</span><br><span class="line">SELECTADDDATE('2020-4-1', 5);</span><br></pre></td></tr></tbody></table></figure><h3 id="7-6-字符串查询"><a href="#7-6-字符串查询" class="headerlink" title="7.6  字符串查询"></a>7.6  字符串查询</h3><blockquote><p>语法:    SELECT    字符串函数([参数列表])</p></blockquote><table><thead><tr><th>字符串函数</th><th>说明</th></tr></thead><tbody><tr><td>concat(str1, …)</td><td>将多个字符串拼接</td></tr><tr><td>insert(str, pos, len, newStr)</td><td>将str中指定pos位置开始len长度的内容替换为newStr</td></tr><tr><td>lower(str)</td><td>将指定字符串转换诶小写</td></tr><tr><td>upper(str)</td><td>将指定字符串转换为大写</td></tr><tr><td>substring(str, num, len)</td><td>将str字符串指定num位置开始截取len个内容</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 多个字符串拼接</span><br><span class="line">SELECT CONCAT('My', 'S,', 'QAL');</span><br><span class="line">SELECT CONCAT(FIRST_NAME,'-', last_name) FROM t_employees;</span><br><span class="line"># 字符串替换</span><br><span class="line">SELECT INSERT('这是一个数据库',3, 2, 'MySql')</span><br><span class="line"># 字符串转小写</span><br><span class="line">SELECT LOWER('LOWER')</span><br><span class="line"># 字符串转大写</span><br><span class="line">SELECT UPPER('shdiuashdui')</span><br><span class="line"># 指定内容截取</span><br><span class="line">SELECT SUBSTRING('JaavaMySqlStrSub',6,6);</span><br><span class="line"># MySqlS</span><br></pre></td></tr></tbody></table></figure><h3 id="7-7-聚合函数"><a href="#7-7-聚合函数" class="headerlink" title="7.7  聚合函数"></a>7.7  聚合函数</h3><blockquote><p>语法:    SELECT 聚合函数(列名)      FROM    表名;</p></blockquote><ul><li>经验：对多条数据的单列进行统计，返回统计后的一行结果</li></ul><table><thead><tr><th>聚合函数</th><th>说明</th></tr></thead><tbody><tr><td>SUM（）</td><td>求所有行中单列结果的总和</td></tr><tr><td>AVG()</td><td>平均值</td></tr><tr><td>MAX()</td><td>最大值</td></tr><tr><td>MIN()</td><td>最小值</td></tr><tr><td>COUNT()</td><td>求总行数</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 聚合函数</span><br><span class="line"># 求单列所有数据的和</span><br><span class="line">SELECT SUM(SALARY) FROM t_employees;</span><br><span class="line"># 求单列所有数据的平均值</span><br><span class="line">SELECT AVG(SALARY) FROM t_employees;</span><br><span class="line"># 求单列最大值</span><br><span class="line">SELECT MAX(SALARY + 0) FROM t_employees;</span><br><span class="line"># 求单列最小值</span><br><span class="line">SELECT MIN(salary + 0) FROM t_employees;</span><br><span class="line"># 求总行数 员工总数</span><br><span class="line">SELECT COUNT(EMPLOYEE_ID) FROM t_employees;</span><br><span class="line"># 统计有提成的人数 会自动忽略null值，不进行统计</span><br><span class="line">SELECT COUNT(COMMISSION_PCT) FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><ul><li>注意：聚合函数会自动忽略null值，不进行统计</li></ul><h3 id="7-8-分组查询"><a href="#7-8-分组查询" class="headerlink" title="7.8  分组查询"></a>7.8  分组查询</h3><blockquote><p>语法：<code>SELECT 列名 FROM 表名 WHERE 条件 GROUP BY 分组依据(列);</code></p></blockquote><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>GROUP BY</td><td>分组依据，必须在WHERE之后生效</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 查询各个部门的额总人数</span><br><span class="line">SELECT department_id, COUNT(employee_id)</span><br><span class="line">FROM t_employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"># 查询各个部门的平局工资</span><br><span class="line">SELECT department_id, AVG(salary)</span><br><span class="line">FROM t_employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"># 查询各个部门、各个岗位的总人数</span><br><span class="line">SELECT department_id,job_id, COUNT(employee_id)</span><br><span class="line">FROM t_employees</span><br><span class="line">GROUP BY department_id, job_id;</span><br><span class="line"># 常见问题：查询各个部门id，总人数、first_name</span><br><span class="line">SELECT department_id,COUNT(employee_id), first_name</span><br><span class="line">FROM t_employees</span><br><span class="line">GROUP BY department_id;</span><br></pre></td></tr></tbody></table></figure><ul><li>分组查询中，select显示的列只能是分组依据列，或者聚合函数列，不能出现其他列</li></ul><h3 id="7-9-分组过滤查询"><a href="#7-9-分组过滤查询" class="headerlink" title="7.9  分组过滤查询"></a>7.9  分组过滤查询</h3><blockquote><p>语法：<code>SELECT 列名 FROM 表名 WHERE 条件 GROUNP BY 分组列 HAVING 过滤规则</code></p></blockquote><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>HAVING过滤规则</td><td>过滤规则定义对分组后的数据进行过滤</td></tr></tbody></table><p>统计部门的最高工资</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#思路</span><br><span class="line">#1.确定分组依据（DEPARTMENT_ID）</span><br><span class="line">#2.对分组后的数据，过滤出部门编号是60、70、90信息</span><br><span class="line">#3.MAX()函数</span><br><span class="line">SELECT DEPARTMENT_ID,MAX(SALARY) </span><br><span class="line">FROM t_employees GROUP BY DEPARTMENT_ID </span><br><span class="line">HAVING DEPARTMENT_ID IN (60,70,90);</span><br><span class="line">#GROUP确定分组依据DEPARTMENT_ID</span><br><span class="line">#HAVING过滤出60，70，90的部门</span><br><span class="line">#SELECT查看部门编号和MAX函数</span><br></pre></td></tr></tbody></table></figure><h3 id="7-10-限定查询"><a href="#7-10-限定查询" class="headerlink" title="7.10  限定查询"></a>7.10  限定查询</h3><blockquote><p> <strong>语法</strong>：<code>SELECT 列名 FROM 表名 LIMIT 起始行,查询行数</code></p></blockquote><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>LIMIT offset_start,row_count</td><td>限定查询结果的起始行和总行数</td></tr></tbody></table><h4 id="7-10-1-查询前5行记录"><a href="#7-10-1-查询前5行记录" class="headerlink" title="7.10.1 查询前5行记录"></a>7.10.1 查询前5行记录</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询表中前五名员工的所有信息</span><br><span class="line">SELECT * FROM t_employees LIMIT 0,5;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>起始行是从0开始</strong>，<strong>代表了第一行</strong>，<strong>第二个参数代表的是从指定行开始查询几行</strong>。</li></ul><h4 id="7-10-2-查询范围记录"><a href="#7-10-2-查询范围记录" class="headerlink" title="7.10.2 查询范围记录"></a>7.10.2 查询范围记录</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询表中从第四行开始，查询10行</span><br><span class="line">SELECT * FROM t_employees LIMIT 3,10;</span><br></pre></td></tr></tbody></table></figure><h4 id="7-10-3-LIMIT典型应用"><a href="#7-10-3-LIMIT典型应用" class="headerlink" title="7.10.3 LIMIT典型应用"></a>7.10.3 LIMIT典型应用</h4><p>分页查询：一页显示10条，一共查询三页。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#思路：第一页是从0开始，显示10条</span><br><span class="line">SELECT * FROM t_employees LIMIT 0,10;</span><br><span class="line">#第二页是从10条开始，显示10条</span><br><span class="line">SELECT * FROM t_employees LIMIT 10,10;</span><br><span class="line">#第三页是从20条开始，显示10条</span><br><span class="line">SELECT * FROM t_employees LIMIT 20,10;</span><br></pre></td></tr></tbody></table></figure><ul><li>在分页应用场景中，起始行是变化的，但是一页显示的页数是不变的</li></ul><h3 id="7-11-查询总结"><a href="#7-11-查询总结" class="headerlink" title="7.11  查询总结"></a>7.11  查询总结</h3><h4 id="7-11-1-SQL语句编写顺序"><a href="#7-11-1-SQL语句编写顺序" class="headerlink" title="7.11.1 SQL语句编写顺序"></a>7.11.1 SQL语句编写顺序</h4><blockquote><p>COPYSELECT 列名 FROM 表名 WHERE 条件 GROUP BY 分组 HAVING 过滤条件 ORDER BY 排序列(ASC|DESC) LIMIT 起始行,查询行数</p></blockquote><h4 id="7-11-2-SQL语句执行顺序"><a href="#7-11-2-SQL语句执行顺序" class="headerlink" title="7.11.2 SQL语句执行顺序"></a>7.11.2 SQL语句执行顺序</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">COPY1.FROM:指定数据来源表</span><br><span class="line">2.WHERE:对查询数据第一次过滤</span><br><span class="line">3.GROUP BY:分组</span><br><span class="line">4.HAVING:对分组后的数据第二次过滤</span><br><span class="line">5.SELECT:查询各字段的值</span><br><span class="line">6.ORDER BY:排序</span><br><span class="line">7.LIMIT:限定查询结果</span><br></pre></td></tr></tbody></table></figure><h3 id="7-12-子查询（作为条件判断）"><a href="#7-12-子查询（作为条件判断）" class="headerlink" title="7.12  子查询（作为条件判断）"></a>7.12  子查询（作为条件判断）</h3><blockquote><p><strong>语法</strong>：<code>SELECT 列名 FROM 表名 WHERE 条件(子查询结果)</code></p></blockquote><h4 id="7-12-1-查询工资大于Bruce的员工信息"><a href="#7-12-1-查询工资大于Bruce的员工信息" class="headerlink" title="7.12.1 查询工资大于Bruce的员工信息"></a>7.12.1 查询工资大于Bruce的员工信息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#1.先查询到Bruce的工资（一行一列）</span><br><span class="line">SELECT SALARY FROM t_employees WHERE FIRST_NAME = 'Bruce';</span><br><span class="line">#2.查询工资大于Bruce的员工信息</span><br><span class="line">SELECT * FROM t_employees WHERE SALARY &gt; 6000;</span><br><span class="line">#3.将前两句整合</span><br><span class="line">SELECT * FROM t_employees </span><br><span class="line">WHERE SALARY &gt; </span><br><span class="line">(SELECT SALARY FROM t_employees WHERE FIRST_NAME = 'Bruce');</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>将子查询</strong>“<strong>一行一列</strong>”<strong>的结果作为外部查询的条件</strong>，<strong>做第二次查询</strong>。</li><li><strong>子查询得到一行一列的结果才能作为外部查询的等值判断条件或不等值判断条件</strong></li></ul><h3 id="7-13-子查询（作为枚举查询的条件）"><a href="#7-13-子查询（作为枚举查询的条件）" class="headerlink" title="7.13 子查询（作为枚举查询的条件）"></a>7.13 子查询（作为枚举查询的条件）</h3><blockquote><p> <strong>语法</strong>：<code>SELECT 列名 FROM 表名 WHERE 列名 IN (子查询结果);</code></p></blockquote><h4 id="7-13-1-查询与名为“KING”同一部门的员工信息"><a href="#7-13-1-查询与名为“KING”同一部门的员工信息" class="headerlink" title="7.13.1 查询与名为“KING”同一部门的员工信息"></a>7.13.1 查询与名为“KING”同一部门的员工信息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#思路</span><br><span class="line">#1.先查询KING所在的部门编号</span><br><span class="line">SELECT DEPARTMENT_ID FROM t_employees WHERE LAST_NAME = 'King';#80,90</span><br><span class="line">#2.再查询80，90号部门的员工信息</span><br><span class="line">SELECT * FROM t_employees WHERE DEPARTMENT_ID IN(80,90);</span><br><span class="line">#3.SQL:合并</span><br><span class="line">SELECT * FROM t_employees </span><br><span class="line">WHERE DEPARTMENT_ID IN</span><br><span class="line">(SELECT DEPARTMENT_ID FROM t_employees WHERE LAST_NAME = 'King');</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>将子查询</strong>“<strong>多行一列</strong>”<strong>的结果作为外部查询的枚举查询条件</strong>，<strong>做第二次查询</strong>。</li></ul><h4 id="7-13-2-工资高于60编号部门的员工信息"><a href="#7-13-2-工资高于60编号部门的员工信息" class="headerlink" title="7.13.2 工资高于60编号部门的员工信息"></a>7.13.2 工资高于60编号部门的员工信息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#1.查询60编号部门所有人的工资（多行单列）</span><br><span class="line">SELECT SALARY FROM t_employees WHERE DEPARTMENT_ID = 60;</span><br><span class="line">#2.查询工资高于60编号部门所有人的工资的员工信息（高于所有）</span><br><span class="line">SELECT * FROM t_employees </span><br><span class="line">WHERE SALARY &gt; </span><br><span class="line">ALL(SELECT SALARY FROM t_employees WHERE DEPARTMENT_ID = 60);</span><br><span class="line">#3.查询工资高于60编号部门的员工信息（高于部分）</span><br><span class="line">SELECT * FROM t_employees </span><br><span class="line">WHERE SALARY &gt; </span><br><span class="line">ANY(SELECT SALARY FROM t_employees WHERE DEPARTMENT_ID = 60);</span><br></pre></td></tr></tbody></table></figure><ul><li><p><strong>注意</strong>：<strong>当子查询结果集形式为多行单列时可以使用ANY或ALL关键字</strong>。</p></li><li><p>ALL表示查询高于部门所有员工工资的员工信息；ANY表示查询只需要高于部门中任意一名员工工资的员工信息</p></li></ul><h3 id="7-14-子查询（作为一张表）"><a href="#7-14-子查询（作为一张表）" class="headerlink" title="7.14  子查询（作为一张表）"></a>7.14  子查询（作为一张表）</h3><p>查询到一张多行多列的临时表，这张表也可以作为查询数据源。</p><blockquote><p> <strong>语法</strong>：<code>SELECT 列名 FROM (子查询的结果集) WHERE 条件;</code></p></blockquote><h4 id="7-14-1-查询员工表中工资排名前5名的员工信息"><a href="#7-14-1-查询员工表中工资排名前5名的员工信息" class="headerlink" title="7.14.1 查询员工表中工资排名前5名的员工信息"></a>7.14.1 查询员工表中工资排名前5名的员工信息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#思路：</span><br><span class="line">#1.先对所有员工的薪资进行排序（排序后的临时表）</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY FROM t_employees ORDER BY SALARY DESC;</span><br><span class="line">#2.再查询临时表中前5行员工信息</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY FROM (临时表) LIMIT 0,5;</span><br><span class="line">#3.合并</span><br><span class="line">SELECT * FROM </span><br><span class="line">(SELECT EMPLOYEE_ID,FIRST_NAME,SALARY FROM t_employees ORDER BY SALARY DESC) AS 临时表 LIMIT 0,5;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>将子查询</strong>“<strong>多行多列</strong>“<strong>的结果作为外部查询的一张表</strong>，<strong>做第二次查询</strong>。</li><li><strong>注意</strong>：<strong>子查询作为临时表</strong>，<strong>需要为其赋予一个临时表名</strong>。</li></ul><h3 id="7-15-合并查询"><a href="#7-15-合并查询" class="headerlink" title="7.15  合并查询"></a>7.15  合并查询</h3><blockquote><ul><li><code>SELECT * FROM 表名1 UNION SELECT * FROM 表名2</code></li><li><code>SELECT * FROM 表名1 UNION ALL SELECT * FROM 表名2</code></li></ul></blockquote><ul><li>返回的查询结果是将表1的结果和表2的结果做了一个合并。</li></ul><h4 id="15-1-合并两张表的结果（去除重复记录）"><a href="#15-1-合并两张表的结果（去除重复记录）" class="headerlink" title="15.1 合并两张表的结果（去除重复记录）"></a>15.1 合并两张表的结果（去除重复记录）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#合并两张表的结果，去除重复记录</span><br><span class="line">SELECT * FROM T1 UNION SELECT * FROM T2;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>合并结果的两张表</strong>，<strong>列数必须相同</strong>，<strong>列的数据类型可以不同</strong>。</li></ul><p>列数必须相同是因为该合并做了一个纵向合并，两个4列多行的结果集表合并后也是一个4列多行的表，但是合并后的列名以第一个结果集表为准。</p><h4 id="7-15-2-合并两张表的结果（保留重复记录）"><a href="#7-15-2-合并两张表的结果（保留重复记录）" class="headerlink" title="7.15.2 合并两张表的结果（保留重复记录）"></a>7.15.2 合并两张表的结果（保留重复记录）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#合并两张表的结果，不去除重复记录（显示所有）</span><br><span class="line">SELECT * FROM T1 UNION ALL SELECT * FROM T2;</span><br></pre></td></tr></tbody></table></figure><p>该合并结果会保留两张查询表中重复的记录，而UNION只保留第一个不重复的记录</p><p>7.16 表连接查询</p><blockquote><p>语法：<code>SELECT 列名 FROM 表1 连接方式 表2 ON 连接条件</code></p></blockquote><h4 id="7-16-1-内连接查询（INNER-JOIN-ON）"><a href="#7-16-1-内连接查询（INNER-JOIN-ON）" class="headerlink" title="7.16.1 内连接查询（INNER JOIN ON）"></a>7.16.1 内连接查询（INNER JOIN ON）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#1.查询所有员工的职员和职位信息 SQL标准</span><br><span class="line">SELECT * FROM t_employees INNER JOIN t_jobs </span><br><span class="line">ON t_employees.JOB_ID = t_jobs.JOB_ID;</span><br><span class="line">#2.查询所有员工的职员和职位信息 MYSQL</span><br><span class="line">SELECT * FROM t_employees,t_jobs WHERE t_employees.JOB_ID = t_jobs.JOB_ID;</span><br></pre></td></tr></tbody></table></figure><p>如果没有指定连接条件，则会造成笛卡尔积的结果，第一张表中的每行数据都会和第二张表进行连接。</p><ul><li><strong>经验</strong>：<strong>在MySQL中</strong>，<strong>第二种方式也可以作为内连接查询</strong>，<strong>但是不符合SQL标准</strong>。</li><li><strong>而第一种属于SQL标准</strong>，<strong>与其他关系型数据库通用</strong>。</li></ul><h4 id="7-16-2-三表连接查询"><a href="#7-16-2-三表连接查询" class="headerlink" title="7.16.2 三表连接查询"></a>7.16.2 三表连接查询</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#查询所有员工工号、名字、部门名称、部门所在国家ID</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,t_departments.DEPARTMENT_NAME,t_locations.COUNTRY_ID </span><br><span class="line">FROM t_employees</span><br><span class="line">INNER JOIN t_departments ON</span><br><span class="line">t_employees.DEPARTMENT_ID=t_departments.DEPARTMENT_ID</span><br><span class="line">INNER JOIN t_locations ON</span><br><span class="line">t_departments.LOCATION_ID=t_locations.LOCATION_ID;</span><br></pre></td></tr></tbody></table></figure><p>该语句查询出来的结果没有员工编号为178的员工信息，该名员工的部门ID为NULL，不符合连接条件，所以不包含在匹配出的结果集中，你可以自己动手尝试并查看结果。之所以提这个是因为可以与下节的语句区分开来。</p><h4 id="7-16-3-左外连接（LEFT-JOIN-ON）"><a href="#7-16-3-左外连接（LEFT-JOIN-ON）" class="headerlink" title="7.16.3 左外连接（LEFT JOIN ON）"></a>7.16.3 左外连接（LEFT JOIN ON）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查询所有员工的工号、名字、工资及其对应的部门名称（没有部门的员工也在查询结果中，部门名称以NULL值补充）</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,DEPARTMENT_NAME </span><br><span class="line">FROM t_employees</span><br><span class="line">LEFT JOIN t_departments </span><br><span class="line">ON t_departments.DEPARTMENT_ID=t_employees.DEPARTMENT_ID;</span><br></pre></td></tr></tbody></table></figure><p>该语句查询出来的结果包含没有部门的178号员工，DEPARTMENT_NAME的值被填充为NULL。</p><ul><li><strong>注意</strong>：<strong>左外连接</strong>，<strong>是以左表作为主表</strong>，<strong>依次向右匹配</strong>，<strong>匹配到则返回结果</strong>；</li><li><strong>匹配不到则返回NULL值填充</strong>。</li></ul><h4 id="7-16-4-右外连接（RIGHT-JOIN-ON）"><a href="#7-16-4-右外连接（RIGHT-JOIN-ON）" class="headerlink" title="7.16.4 右外连接（RIGHT JOIN ON）"></a>7.16.4 右外连接（RIGHT JOIN ON）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查询所有部门信息，以及此部门中的所有员工信息（没有员工的部门也在查询结果中，员工信息以NULL值填充）</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,DEPARTMENT_NAME </span><br><span class="line">FROM t_employees</span><br><span class="line">RIGHT JOIN t_departments </span><br><span class="line">ON t_departments.DEPARTMENT_ID=t_employees.DEPARTMENT_ID;</span><br></pre></td></tr></tbody></table></figure><p>该查询结果以部门表作为主表，有些部门没有员工，其员工信息全部为NULL。</p><ul><li><strong>注意</strong>：<strong>右外连接</strong>，<strong>是以右表为主表</strong>，<strong>依次向左匹配</strong>，<strong>匹配到返回结果</strong>。</li><li><strong>匹配不到</strong>，<strong>则返回NULL值填充</strong>。</li></ul><h2 id="八、DML操作【重点】"><a href="#八、DML操作【重点】" class="headerlink" title="八、DML操作【重点】"></a>八、DML操作【重点】</h2><blockquote><p> DDL（Data Manipulation Language）数据库操纵语言，是其中一类SQL语言，其实也就是<strong>增删改</strong>。</p></blockquote><h3 id="8-1-新增（INSERT）"><a href="#8-1-新增（INSERT）" class="headerlink" title="8.1 新增（INSERT）"></a>8.1 新增（INSERT）</h3><blockquote><p> <strong>语法</strong>：<code>INSERT INTO 表名(列1,列2,列3......) VALUES(值1,值2,值3......);</code></p></blockquote><h4 id="8-1-1-添加一条信息"><a href="#8-1-1-添加一条信息" class="headerlink" title="8.1.1 添加一条信息"></a>8.1.1 添加一条信息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#添加一条岗位信息</span><br><span class="line">INSERT INTO t_jobs(JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) </span><br><span class="line">VALUES('JAVA_LE','Java Lecturer',6000,1200);</span><br><span class="line">#添加一条员工信息</span><br><span class="line">INSERT INTO t_employees(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID)</span><br><span class="line">VALUES('194','Liu','YUNChe','xxx@qq.com','12345','2020-11-14','JAVA_LE','11000','0.6',null,'50');</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>表名后的列名要和VALUE里的值一一对应</strong>（<strong>个数</strong>、<strong>顺序</strong>、<strong>类型</strong>）。</li></ul><h3 id="8-2-修改（UPDATA）"><a href="#8-2-修改（UPDATA）" class="headerlink" title="8.2 修改（UPDATA）"></a>8.2 修改（UPDATA）</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#修改编号为100的员工工资为25000</span><br><span class="line">UPDATE t_employees SET SALARY = 25000 WHERE EMPLOYEE_ID = '100';</span><br><span class="line">#修改编号为100的员工信息岗位编号为 ST_MAN，工资为3500</span><br><span class="line">UPDATE t_employees SET JOB_ID = 'ST_MAN',SALARY = 3500 WHERE EMPLOYEE_ID = '135';</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>SET后多个列名=值</strong>，<strong>绝大多数情况下都要加WHERE条件指定修改</strong>，<strong>否则为整表更新</strong>。</li></ul><h3 id="8-3-删除（DELETE）"><a href="#8-3-删除（DELETE）" class="headerlink" title="8.3 删除（DELETE）"></a>8.3 删除（DELETE）</h3><p>语法：<code>DELETE FROM 表名 WHERE 条件;</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#删除编号为135的员工</span><br><span class="line">DELETE FROM t_employees WHERE EMPLOYEE_ID = '135';</span><br><span class="line">#删除姓Peter,并且名为Hall的员工</span><br><span class="line">DELETE FROM t_employees WHERE EMPLOYEE_ID = '135';</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>删除时</strong>，<strong>如果不加条件</strong>，<strong>则默认删除整张表</strong>。</li></ul><p><font color="cornflowerblue">用DELETE删除整表是不彻底的，它只是删除了内容，并没有改变表的结构。</font></p><h3 id="8-4-清空整表数据（TRUNCATE）"><a href="#8-4-清空整表数据（TRUNCATE）" class="headerlink" title="8.4 清空整表数据（TRUNCATE）"></a>8.4 清空整表数据（TRUNCATE）</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPYTRUNCATE TABLE 表名;</span><br></pre></td></tr></tbody></table></figure><h4 id="8-4-1-清空整张表"><a href="#8-4-1-清空整张表" class="headerlink" title="8.4.1 清空整张表"></a>8.4.1 清空整张表</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY#清空t1整张表</span><br><span class="line">TRUNCATE TABLE t1;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>与DELETE不加WHERE删除整表数据不同</strong>，<strong>TRUNCATE是把原表销毁</strong>，<strong>再按原表的格式创建一张新表</strong>。</li></ul><h2 id="九、数据表操作"><a href="#九、数据表操作" class="headerlink" title="九、数据表操作"></a>九、数据表操作</h2><h3 id="9-1-数据类型"><a href="#9-1-数据类型" class="headerlink" title="9.1 数据类型"></a>9.1 数据类型</h3><blockquote><p> <font color="red">MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串（字符）类型。对于我们约束数据的类型有很大的帮助。</font></p></blockquote><h4 id="9-1-1-数值类型"><a href="#9-1-1-数值类型" class="headerlink" title="9.1.1 数值类型"></a>9.1.1 数值类型</h4><table><thead><tr><th>类型</th><th>大小</th><th>范围（有符号）</th><th>范围（无符号）</th><th>用途</th></tr></thead><tbody><tr><td>INT</td><td>4字节</td><td>(-2147483648,2147483647)</td><td>(0,4294967295)</td><td>大整数值</td></tr><tr><td>DOUBLE</td><td>8字节</td><td>(-1.797E+308,-2.22E-308)</td><td>0,(2.22E-308,1.797E+308)</td><td><code>双精度浮点数值</code></td></tr><tr><td><code>DOUBLE(M,D)</code></td><td>8字节，M表示长度，D表示小数位数</td><td>同上，受M和D的约束；如DOUBLE(5,2) -999.99~999.99</td><td>同上，受M和D的约束</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL(M,D)</td><td>DECIMAL(M,D)</td><td>依赖于M和D的值，M最大值为65</td><td>依赖于M和D的值，M最大值为65</td><td>小数值</td></tr></tbody></table><h4 id="9-1-2-日期类型"><a href="#9-1-2-日期类型" class="headerlink" title="9.1.2 日期类型"></a>9.1.2 日期类型</h4><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td><strong>DATE</strong></td><td>3</td><td>1000-01-01/9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>‘-838:59:59’/‘838:59:59’</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901/2155</td><td>YYYY</td><td>年份值</td></tr><tr><td><strong>DETETIME</strong></td><td>8</td><td>1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td>YYYYMMDD HHMMSS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h4 id="9-1-3-字符串类型"><a href="#9-1-3-字符串类型" class="headerlink" title="9.1.3 字符串类型"></a>9.1.3 字符串类型</h4><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>BLOB（binary large object）</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr></tbody></table><ul><li><font color="orange">CHAR和VARCHAR类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同，CHAR(N)会将多余的存储位以空格补足，而VARCHAR(N)则会根据实际存储长度进行“压缩”。在存储或检索过程中不进行大小写转换。</font></li><li><font color="orange">BLOB是一个二进制大对象，可以容纳可变数量的数据。有4种BLOB类型：TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。它们只是可容纳值的最大长度不同。</font></li></ul><h3 id="9-2-数据表的创建（CREATE）"><a href="#9-2-数据表的创建（CREATE）" class="headerlink" title="9.2 数据表的创建（CREATE）"></a>9.2 数据表的创建（CREATE）</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">    列名 数据类型 [约束],</span><br><span class="line">    列名 数据类型 [约束],</span><br><span class="line">    ......</span><br><span class="line">    列名 数据类型 [约束]#最后一行的末尾不加逗号</span><br><span class="line">)[CHARSET=UTF8]#可根据需要指定表的字符编码集</span><br></pre></td></tr></tbody></table></figure><p>括号内的内容为可选。</p><h4 id="9-2-1-创建表"><a href="#9-2-1-创建表" class="headerlink" title="9.2.1 创建表"></a>9.2.1 创建表</h4><table><thead><tr><th>列名</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>subject_id</td><td>INT</td><td>课程编号</td></tr><tr><td>subject_name</td><td>VARCHAR(20)</td><td>课程时间</td></tr><tr><td>subject_hours</td><td>INT</td><td>课程课长</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#根据上述表格创建数据库，并向表中插入3条测试语句</span><br><span class="line">CREATE TABLE `t_subject` (</span><br><span class="line">  `subject_id` int,</span><br><span class="line">  `subject_name` varchar(20),</span><br><span class="line">  `subject_hours` int(11)</span><br><span class="line">)CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) </span><br><span class="line">VALUES(1,'JAVA',40);</span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) </span><br><span class="line">VALUES(2,'MYSQL',30);</span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) VALUES(3,'JAVASCRIPT',20)</span><br></pre></td></tr></tbody></table></figure><h3 id="9-3-数据表的修改（ALTER）"><a href="#9-3-数据表的修改（ALTER）" class="headerlink" title="9.3 数据表的修改（ALTER）"></a>9.3 数据表的修改（ALTER）</h3><blockquote><p><strong>语法</strong>：<code>ALTER TABLE 表名 操作;</code></p></blockquote><h4 id="9-3-1-向现有表中添加列"><a href="#9-3-1-向现有表中添加列" class="headerlink" title="9.3.1 向现有表中添加列"></a>9.3.1 向现有表中添加列</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在课程表基础上添加grade_id列</span><br><span class="line">ALTER TABLE t_subject ADD grade_id INT;</span><br></pre></td></tr></tbody></table></figure><h4 id="9-3-2-修改表中的列"><a href="#9-3-2-修改表中的列" class="headerlink" title="9.3.2 修改表中的列"></a>9.3.2 修改表中的列</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#修改课程表中的课程名称长度为10个字符</span><br><span class="line">ALTER TABLE t_subject MODIFY subject_name VARCHAR(10);</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>修改表中的某列时</strong>，<strong>也要写全列的名字</strong>，<strong>数据类型</strong>，<strong>约束</strong>。</li></ul><h4 id="9-3-3-删除表中的列"><a href="#9-3-3-删除表中的列" class="headerlink" title="9.3.3 删除表中的列"></a>9.3.3 删除表中的列</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除课程表中grade_id列</span><br><span class="line">ALTER TABLE t_subject DROP grade_id;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>删除列时</strong>，<strong>每次只能删一列</strong>。</li></ul><h4 id="9-3-4-修改列名"><a href="#9-3-4-修改列名" class="headerlink" title="9.3.4 修改列名"></a>9.3.4 修改列名</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#修改课程表中subject_hours列为class_hours</span><br><span class="line">ALTER TABLE t_subject CHANGE subject_hours class_hours INT;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>修改列名时</strong>，<strong>在给定列新名称时</strong>，<strong>要指定列的类型和约束</strong>。</li></ul><h4 id="9-3-5-修改表名"><a href="#9-3-5-修改表名" class="headerlink" title="9.3.5 修改表名"></a>9.3.5 修改表名</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#修改课程表的t_subject为t_sub</span><br><span class="line">ALTER TABLE t_subject RENAME t_sub;</span><br></pre></td></tr></tbody></table></figure><h3 id="9-4-数据表的删除（DROP）"><a href="#9-4-数据表的删除（DROP）" class="headerlink" title="9.4 数据表的删除（DROP）"></a>9.4 数据表的删除（DROP）</h3><blockquote><p> <strong>语法</strong>：<code>DROP TABLE 表名</code></p></blockquote><h4 id="9-4-1-删除课程表"><a href="#9-4-1-删除课程表" class="headerlink" title="9.4.1 删除课程表"></a>9.4.1 删除课程表</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除课程表</span><br><span class="line">DROP TABLE t_sub;</span><br></pre></td></tr></tbody></table></figure><h2 id="十、约束"><a href="#十、约束" class="headerlink" title="十、约束"></a>十、约束</h2><blockquote><p> 问题：在往已创建表中新增数据时，可不可以新增两行相同列的数据？如果可行，会有什么弊端？</p></blockquote><p>这是可以的，但重复的数据不仅会浪费空间，而且对查询结果不利，也是多余的。在实际的存储中应尽量保证每条数据的唯一性。</p><h3 id="10-1-实体完整性约束"><a href="#10-1-实体完整性约束" class="headerlink" title="10.1 实体完整性约束"></a>10.1 实体完整性约束</h3><blockquote><p> 表中的一行数据代表一个实体（entity），实体完整性的作用即是标识每一行数据不重复，实体唯一。</p></blockquote><h4 id="10-1-1-主键约束"><a href="#10-1-1-主键约束" class="headerlink" title="10.1.1 主键约束"></a>10.1.1 主键约束</h4><blockquote><p><strong>关键词</strong>：<code>PRIMARY KEY</code>唯一，标识表中的一行数据，此列的值不可重复，且<strong>不能</strong>为NULL。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#为表中适用主键的列添加主键约束</span><br><span class="line">CREATE TABLE t_subject(</span><br><span class="line">#课程标号标识了每一个课程的编号唯一，且不能为NULL</span><br><span class="line">subject_id INT PRIMARY KEY,</span><br><span class="line">subject_name VARCHAR(20),</span><br><span class="line">subject_hours INT</span><br><span class="line">)CHARSET=utf8;</span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) VALUES(1,'JAVA',40);</span><br><span class="line">#报错，主键subject_id不可重复</span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) VALUES(1,'JAVA',40);</span><br></pre></td></tr></tbody></table></figure><p>作为主键的字段一般都是也应该是编号、学号、工号等字段。</p><h4 id="10-1-2-唯一约束"><a href="#10-1-2-唯一约束" class="headerlink" title="10.1.2 唯一约束"></a>10.1.2 唯一约束</h4><blockquote><p> <strong>关键字</strong>：<code>UNIQUE</code>唯一，标识表中的一行数据，不可重复，<strong>可以</strong>为NULL。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#为表中列值不允许重复的列添加唯一约束</span><br><span class="line">ALTER TABLE t_subject MODIFY subject_name VARCHAR(20) UNIQUE;</span><br><span class="line"></span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) VALUES(1,'JAVA',40);</span><br><span class="line">#报错，课程名已存在</span><br><span class="line">INSERT INTO t_subject(subject_id,subject_name,subject_hours) VALUES(2,'JAVA',40);</span><br></pre></td></tr></tbody></table></figure><h4 id="10-1-3-自动增长列"><a href="#10-1-3-自动增长列" class="headerlink" title="10.1.3 自动增长列"></a>10.1.3 自动增长列</h4><blockquote><p> 关键字：<code>AUTO_INCREAMENT</code>自动增长，给<strong>主键数值列</strong>添加自动增长。从1开始，每次加1。不能单独使用，和主键配合。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#为表中主键列添加自动增长，避免忘记主键ID序号</span><br><span class="line">ALTER TABLE t_subject MODIFY subject_id INT AUTO_INCREMENT;</span><br><span class="line">#课程ID自动增长为2</span><br><span class="line">INSERT INTO t_subject ( subject_name, subject_hours ) VALUES( 'HTML5', 40 );</span><br></pre></td></tr></tbody></table></figure><h3 id="10-2-域完整性约束"><a href="#10-2-域完整性约束" class="headerlink" title="10.2 域完整性约束"></a>10.2 域完整性约束</h3><blockquote><p> 该约束限制单元格的数据正确性。</p></blockquote><h4 id="10-2-1-非空约束"><a href="#10-2-1-非空约束" class="headerlink" title="10.2.1 非空约束"></a>10.2.1 非空约束</h4><blockquote><p> 语法：<code>NOT NULL</code>,非空，此列必须有值</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#课程名称虽然添加了唯一约束，但是有NULL值存在的可能，要避免课程名称为NULL。</span><br><span class="line">ALTER TABLE t_subject MODIFY subject_name VARCHAR(20) NOT NULL;</span><br><span class="line">#报错，课程名不能为空</span><br><span class="line">INSERT INTO t_subject(subject_name,subject_hours) VALUES (NULL,40);</span><br></pre></td></tr></tbody></table></figure><h4 id="10-2-2-默认值约束"><a href="#10-2-2-默认值约束" class="headerlink" title="10.2.2 默认值约束"></a>10.2.2 默认值约束</h4><blockquote><p> <strong>关键字</strong>：<code>DEFAULT 值</code>。为列赋予默认值，当新增数据不指定值时，书写DEFAULT，以指定的默认值进行填充。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#当存储课程信息时，若课程时长没有指定值，则以默认值进行填充</span><br><span class="line">ALTER TABLE t_subject MODIFY subject_hours INT DEFAULT 40;</span><br><span class="line">#不写默认课程时为40，也可以把值写成DEFAULT</span><br><span class="line">INSERT INTO t_subject(subject_name) VALUES('JAVAWEB');</span><br></pre></td></tr></tbody></table></figure><h4 id="10-2-3-引用完整性约束"><a href="#10-2-3-引用完整性约束" class="headerlink" title="10.2.3 引用完整性约束"></a>10.2.3 引用完整性约束</h4><blockquote><p><strong>语法</strong>：<code>CONSTRAINT 引用名 FOREIGN KEY (列名) REFERENCES 被引用表名(列名)</code></p></blockquote><blockquote><p> <strong>解释</strong>：FOREIGN KEY<strong>引用外部表某个列的值</strong>，新增数据时，约束此列的值<strong>必须是引用表中存在的值</strong>。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#创建专业表</span><br><span class="line">CREATE TABLE t_speciality(</span><br><span class="line">special_id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">special_name VARCHAR(20) UNIQUE NOT NULL</span><br><span class="line">)CHARSET=utf8;</span><br><span class="line">#添加一些专业信息</span><br><span class="line">INSERT INTO t_speciality(special_name) VALUES('HTML5');</span><br><span class="line">INSERT INTO t_speciality(special_name) VALUES('JAVA');</span><br><span class="line">INSERT INTO t_speciality(special_name) VALUES('JAVAWEB');</span><br><span class="line">INSERT INTO t_speciality(special_name) VALUES('数据结构');</span><br><span class="line">#subject_id引用special_id</span><br><span class="line">ALTER TABLE t_subject ADD </span><br><span class="line">CONSTRAINT fk_subject_spacial FOREIGN KEY(special_id) REFERENCES t_speciality(special_id);</span><br><span class="line">#添加数据成功</span><br><span class="line">INSERT INTO t_subject(subject_name,special_id) VALUES('数据结构',4);</span><br><span class="line">#添加失败，主表中不存在5</span><br><span class="line">INSERT INTO t_subject(subject_name,special_id) VALUES('操作系统',5);</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>当两张表存在引用关系时</strong>，<strong>要执行删除操作</strong>，<strong>一定要先删除从表</strong>（<strong>引用表</strong>），<strong>再删除主表</strong>（<strong>被引用表</strong>）。</li></ul><h3 id="10-3-约束创建整合"><a href="#10-3-约束创建整合" class="headerlink" title="10.3 约束创建整合"></a>10.3 约束创建整合</h3><p>创建带有约束的表。</p><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>grade_id</td><td>INT</td><td>主键、自动增长</td><td>班级编号</td></tr><tr><td>grade_name</td><td>VARCHAR(20)</td><td>唯一、非空</td><td>班级名称</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_grade(</span><br><span class="line">grade_id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">grade_name VARCHAR(20) UNIQUE NOT NULL</span><br><span class="line">)CHARSET=utf8;</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>student_id</td><td>VARCHAR(20)</td><td>主键</td><td>学号</td></tr><tr><td>student_name</td><td>VARCHAR(20)</td><td>非空</td><td>姓名</td></tr><tr><td>sex</td><td>CHAR(2)</td><td>默认填充“男”</td><td>性别</td></tr><tr><td>born_date</td><td>DATE</td><td>非空</td><td>生日</td></tr><tr><td>phone</td><td>VARCHAR(11)</td><td>无</td><td>电脑</td></tr><tr><td>grade_id</td><td>INT</td><td>非空、外键约束引用班级表的grade_id</td><td>班级编号</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_student(</span><br><span class="line">student_id VARCHAR(20) PRIMARY KEY,</span><br><span class="line">student_name VARCHAR(20) NOT NULL,</span><br><span class="line">sex CHAR(2) DEFAULT '男',</span><br><span class="line">born_date DATE NOT NULL,</span><br><span class="line">phone VARCHAR(11),</span><br><span class="line">grade_id INT NOT NULL,</span><br><span class="line">CONSTRAINT fk_student_grade FOREIGN KEY (grade_id) REFERENCES t_grade(grade_id)</span><br><span class="line">)CHARSET=utf8;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>创建关系表时</strong>，<strong>一定要先创建主键</strong>，<strong>再创建从表</strong>。</li><li><strong>删除关系表时</strong>，<strong>先删除从表</strong>，<strong>再删除主表</strong>。</li></ul><h2 id="十一、事务【重点】"><a href="#十一、事务【重点】" class="headerlink" title="十一、事务【重点】"></a>十一、事务【重点】</h2><h3 id="11-1-模拟转账"><a href="#11-1-模拟转账" class="headerlink" title="11.1 模拟转账"></a>11.1 模拟转账</h3><blockquote><p> 生活当中转账是转账方账户扣钱，收账方账户加钱。我们用数据库操作来模拟实现转账。</p></blockquote><h4 id="11-1-1-数据库模拟转账"><a href="#11-1-1-数据库模拟转账" class="headerlink" title="11.1.1 数据库模拟转账"></a>11.1.1 数据库模拟转账</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#A账户转账给B账户1000元</span><br><span class="line">#B账户减1000元</span><br><span class="line"></span><br><span class="line">#新建账户表</span><br><span class="line">CREATE TABLE t_account(</span><br><span class="line">account_id INT PRIMARY KEY,</span><br><span class="line">money INT</span><br><span class="line">)CHARSET=utf8;</span><br><span class="line">#插入数据</span><br><span class="line">INSERT INTO t_account(account_id,money) VALUES(1,5000);</span><br><span class="line">INSERT INTO t_account(account_id,money) VALUES(2,5000);</span><br><span class="line">#模拟转账</span><br><span class="line">UPDATE t_account SET money=money-1000 WHERE account_id=1;#转账</span><br><span class="line">UPDATE t_account SET money=money+1000 WHERE account_id=2;#收账</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>上述代码完成了两个账户之间转账的操作</strong>。</li></ul><h3 id="11-1-2-模拟转账错误"><a href="#11-1-2-模拟转账错误" class="headerlink" title="11.1.2 模拟转账错误"></a>11.1.2 模拟转账错误</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t_account SET money=money-1000 WHERE account_id=1;#转账</span><br><span class="line">#断电，异常，出错...</span><br><span class="line">UPDATE t_account SET money=money+1000 WHERE account_id=2;#收账</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>上述代码在减操作后过程中出现了异常或加钱语句出错</strong>，<strong>会发现减钱成功了而加钱失败了</strong>！</li><li><strong>注意</strong>：<strong>每条SQL语句都是一个独立的操作</strong>，<strong>一个操作执行完对数据库是永久性的影响</strong>。</li></ul><h3 id="11-2-事务的概念"><a href="#11-2-事务的概念" class="headerlink" title="11.2 事务的概念"></a>11.2 事务的概念</h3><blockquote><p> 事务是一个原子操作，是一个做小执行单元。可以由一个或多个SQL语句组成，在同一个事务当中，所有的SQL语句都成功执行，整个事务成功，有一个SQL语句执行失败，整个事务执行失败。</p></blockquote><h3 id="11-3-事务的边界"><a href="#11-3-事务的边界" class="headerlink" title="11.3 事务的边界"></a>11.3 事务的边界</h3><ul><li>开始：连接到数据库，执行一条DML语句。上一个事务结束后，又输入了一条DML语句，即事务的开始。</li><li>结束：<ol><li>提交：<ul><li>显式提交：COMMIT；</li><li>隐式提交：一条创建、删除的语句，正常退出（客户端退出连接）；</li></ul></li><li>回滚：<ul><li>显式回滚：ROLLBACK；</li><li>隐式回滚：非正常退出（断电、宕机），执行了创建、删除的语句，但是失败了，会为这个无效的语句执行回滚。</li></ul></li></ol></li></ul><p>如11.1.2节中的两条语句就是两个事务，第一条语句执行便是事务的开始，分号便是事务的结束，执行完毕该语句就被提交了；而第二句由于执行失败，该语句的结果就是回滚，回到事务前的样子。</p><h3 id="11-4-事务的原理"><a href="#11-4-事务的原理" class="headerlink" title="11.4 事务的原理"></a>11.4 事务的原理</h3><blockquote><p> 数据库会为每一个客户端都维护一个空间独立的缓存区（回滚段），一个事务中所有的增删改查语句的执行结果都会缓存在回滚段中，只有当事务中所有SQL语句均正常结束（COMMIT），才会将回滚段中的数据同步到数据库。否则无论因为哪种原因失败，整个事务将回滚（ROLLBACK）。</p></blockquote><h3 id="11-5-事务的特性（ACID）"><a href="#11-5-事务的特性（ACID）" class="headerlink" title="11.5 事务的特性（ACID）"></a>11.5 事务的特性（ACID）</h3><ul><li><p><strong>Atomicity</strong>（<strong>原子性</strong>）</p><p>表示一个事务内的所有操作是一个整体，要么全部成功，要么全部失败。</p></li><li><p><strong>Consistency</strong>（<strong>一致性</strong>）</p><p>表示一个事务内有一个操作失败时，所有更改过的数据都必须回滚到修改前状态。</p></li><li><p><strong>Isolation</strong>（<strong>隔离性</strong>）</p><p>事务查看数据库操作时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事物修改它之后的状态，事务不会查看中间状态的数据。</p></li><li><p><strong>Durability</strong>（<strong>持久性</strong>）</p><p>持久性事务完成之后，它对与系统的影响是永久性的。</p></li></ul><h3 id="11-6-事务应用"><a href="#11-6-事务应用" class="headerlink" title="11.6 事务应用"></a>11.6 事务应用</h3><p>应用环境：基于增删改查语句的操作结果（均返回操作后受影响的行数），可通过程序逻辑手动控制事务提交或回滚。</p><h4 id="11-6-1-事务完成转账"><a href="#11-6-1-事务完成转账" class="headerlink" title="11.6.1 事务完成转账"></a>11.6.1 事务完成转账</h4><p>手动开启事务，将两个减钱和加钱的操作放到事务中，操作完之后再提交。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#开启事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line">#执行减钱操作（两个账户初始钱都为5000）</span><br><span class="line">UPDATE t_account SET money=money-1000 WHERE account_id = 1;</span><br><span class="line">#执行加钱操作</span><br><span class="line">UPDATE t_account SET money=money+1000 WHERE account_id = 2;</span><br><span class="line">#查看该事务中账户数据</span><br><span class="line">SELECT * FROM t_account;</span><br></pre></td></tr></tbody></table></figure><p>以上SQL语句开启了事务，但并未进行提交，此时查看账户中的数据如下：</p><table><thead><tr><th>account_id</th><th>money</th></tr></thead><tbody><tr><td>1</td><td>4000</td></tr><tr><td>2</td><td>6000</td></tr></tbody></table><p>发现数据<strong>已经变了</strong>，但该数据只是事务的中间状态。</p><p>然后在你的数据库管理系统中<strong>新建</strong>一个连接，新建连接名随便取一个，然后新建查询。这么做相当于模拟了另外一个客户端：</p><p>执行<code>SELECT * FROM t_account</code>;，发现表中的数据并<strong>没有改变</strong>：</p><table><thead><tr><th>account_id</th><th>money</th></tr></thead><tbody><tr><td>1</td><td>5000</td></tr><tr><td>2</td><td>5000</td></tr></tbody></table><p>这是因为在第一个连接中开启了事务，但没有提交；而在another连接中，查询语句也是一个事务（没有显式开启和显式提交），该事务只能查看其它事务修改前后者修改后的状态，此处就是只能查看转账操作提交前的状态，两个账户都是5000，这也是事务的<strong>隔离性</strong>。</p><p>回到localhost连接中，提交事务；然后在another连接中再查询一次：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#localhost连接，提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">#another连接，查询表</span><br><span class="line">SELECT * FROM t_account;</span><br></pre></td></tr></tbody></table></figure><p>此时的查询结果如下：</p><table><thead><tr><th>account_id</th><th>money</th></tr></thead><tbody><tr><td>1</td><td>4000</td></tr><tr><td>2</td><td>6000</td></tr></tbody></table><p>发现数据已经正式修改完毕。</p><p>回滚操作类似，但它是取消掉事务的操作，回到事务前的状态。比如事务开启后，减钱成功，但是加钱失败了（可以用SQL语句某个单词写错来模拟），然后手动执行<code>ROLLBACK</code>，减钱操作就会被撤销。不再演示。</p><ul><li>此处的演示是手动进行了事物的开启和提交/回滚，在写程序时，这些操作都会在程序中进行控制。</li></ul><h2 id="十二、权限管理"><a href="#十二、权限管理" class="headerlink" title="十二、权限管理"></a>十二、权限管理</h2><h3 id="12-1-创建用户"><a href="#12-1-创建用户" class="headerlink" title="12.1 创建用户"></a>12.1 创建用户</h3><blockquote><p> <strong>语法</strong>：<code>CREATE USER 用户名 IDENTIFIED BY 密码</code></p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#创建一个用户</span><br><span class="line">CREATE USER 'client1' IDENTIFIED BY '123456';</span><br></pre></td></tr></tbody></table></figure><p>接下来验证用户是否添加成功，首先新建连接，在用户名和账号那里写上自己创建的用户和密码，测试一下是否连接成功。</p><p>然后点“确定”。但是打开该连接之后你会发现此连接中除了一个系统数据库，其他数据库<strong>都不存在</strong>。这是因为client1用户建立的连接没有得到任何授权，也就是没有对数据库的访问操作权限。</p><h3 id="12-2-授权"><a href="#12-2-授权" class="headerlink" title="12.2 授权"></a>12.2 授权</h3><blockquote><p> <strong>语法</strong>：<code>GRANT ALL ON 数据库.表 TO 用户名;</code></p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将companydb下的所有表的权限都赋给client</span><br><span class="line">GRANT ALL ON companydb.* TO client1;</span><br></pre></td></tr></tbody></table></figure><p>该语句需要在root连接中执行，不能在client1连接中自己给自己授权。</p><h3 id="12-3-撤销权限"><a href="#12-3-撤销权限" class="headerlink" title="12.3 撤销权限"></a>12.3 撤销权限</h3><blockquote><p> <strong>语法</strong>：<code>REVOKE ALL ON 数据库.表名 FROM 用户名</code></p></blockquote><ul><li><strong>注意</strong>：<strong>撤销权限后</strong>，<strong>账户需要重新连接客户端才会生效</strong>。</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将client1的companydb的操作权限撤销</span><br><span class="line">GRANT ALL ON companydb.* TO client1;</span><br></pre></td></tr></tbody></table></figure><p>虽然刷新之后表不见了，但是依然可以对表进行操作，只有在重新连接数据库的时候权限才会消失。</p><h3 id="12-4-删除用户"><a href="#12-4-删除用户" class="headerlink" title="12.4 删除用户"></a>12.4 删除用户</h3><blockquote><p> <strong>语法</strong>：<code>DROP USER 用户名</code></p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除用户client1</span><br><span class="line">DROP USER 'client1';</span><br></pre></td></tr></tbody></table></figure><h2 id="十三、视图"><a href="#十三、视图" class="headerlink" title="十三、视图"></a>十三、视图</h2><h3 id="13-1-概念"><a href="#13-1-概念" class="headerlink" title="13.1 概念"></a>13.1 概念</h3><blockquote><p> 视图，虚拟表，从一个表或多个表中查询出来的表，作用和真实表一样，包含一系列带有行和列的数据。视图表中，用户可以使用SELECT语句查询数据，也可以使用INSERT、UPDATE、DELETE修改记录，视图可以使用户操作方便，并保障数据库系统安全。</p></blockquote><ul><li>和临时表很像，但临时表不会被保存，而视图是保存下来的表。</li></ul><h3 id="13-2-视图特点"><a href="#13-2-视图特点" class="headerlink" title="13.2 视图特点"></a>13.2 视图特点</h3><ul><li>优点<ul><li>简单化，数据所见即所得。</li><li>安全性，用户只能查询或修改他们所能见到的数据。</li><li>逻辑独立性，可以屏蔽真实表结构变化带来的影响。</li></ul></li><li>缺点<ul><li>性能相对较差，简单的查询也会变得稍显复杂。</li><li>修改不方便，特别是复杂的聚合视图基本无法修改。</li></ul></li></ul><h3 id="13-3-视图的创建"><a href="#13-3-视图的创建" class="headerlink" title="13.3 视图的创建"></a>13.3 视图的创建</h3><blockquote><p> <strong>语法</strong>：<code>CREATE VIEW 视图名 AS 查询数据源表结构语句;</code></p></blockquote><h3 id="13-3-1-创建视图"><a href="#13-3-1-创建视图" class="headerlink" title="13.3.1 创建视图"></a>13.3.1 创建视图</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#创建t_emp_info的视图，其视图从t_employees表中查询员工编号、姓名、邮箱、工资</span><br><span class="line">CREATE VIEW t_emp_info</span><br><span class="line">AS</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,EMAIL,SALARY FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><h4 id="13-3-2-使用视图"><a href="#13-3-2-使用视图" class="headerlink" title="13.3.2 使用视图"></a>13.3.2 使用视图</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询t_emp_info视图中编号为036的员工信息</span><br><span class="line">SELECT * FROM t_emp_info WHERE EMPLOYEE_ID = 036;</span><br></pre></td></tr></tbody></table></figure><p>使用视图可以简化查询的操作，将来视图应用最多的地方也是查询。</p><h3 id="13-4-视图的修改"><a href="#13-4-视图的修改" class="headerlink" title="13.4 视图的修改"></a>13.4 视图的修改</h3><blockquote><ul><li>方式一：<code>CREATE OR REPLACE VIEW 视图名 AS 查询语句</code></li><li>方式二：<code>ALTER VIEW 视图名 AS 查询语句</code></li></ul></blockquote><p>方式一是在不明确视图是否存在时使用，如果存在则修改，否则创建；方式二是明确存在时进行修改。无论哪种方式都需要拼接一个完整查询语句。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#方式一，如果视图存在则修改，反之创建。</span><br><span class="line">CREATE OR REPLACE VIEW t_emp_info</span><br><span class="line">AS</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,EMAIL,SALARY,JOB_ID FROM t_employees;</span><br><span class="line">#方式二，对已存在的视图进行修改</span><br><span class="line">ALTER VIEW t_emp_info</span><br><span class="line">AS</span><br><span class="line">SELECT EMPLOYEE_ID,FIRST_NAME,EMAIL,SALARY FROM t_employees;</span><br></pre></td></tr></tbody></table></figure><h3 id="13-5-视图的删除"><a href="#13-5-视图的删除" class="headerlink" title="13.5 视图的删除"></a>13.5 视图的删除</h3><blockquote><p> <strong>语法</strong>：<code>DROP VIEW 视图名</code></p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除视图</span><br><span class="line">DROP VIEW t_emp_info;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>注意</strong>：<strong>删除视图不会影响原表</strong>。</li></ul><h3 id="13-6-视图的注意事项"><a href="#13-6-视图的注意事项" class="headerlink" title="13.6 视图的注意事项"></a>13.6 视图的注意事项</h3><ul><li>视图不会独立存储数据，原表发生改变，视图也发生改变。没有优化任何查询性能。</li><li>如果视图包含以下结构中的一种，则视图不可更新：<ul><li>聚合函数的结果</li><li>DISTINCT去重后的结果</li><li>GROUP BY分组后的结果</li><li>HAVING筛选过滤后的结果</li><li>UNION、UNION ALL联合后的结果</li></ul></li></ul><h2 id="十四、SQL语言分类"><a href="#十四、SQL语言分类" class="headerlink" title="十四、SQL语言分类"></a>十四、SQL语言分类</h2><ol><li><strong>数据查询语言</strong>DQL（Data Query Language）：SELECT、WHERE、ORDER BY、GROUP BY、HAVING；</li><li><strong>数据定义语言</strong>DDL（Data Definition Language）：CREATE、ALTER、DROP；</li><li><strong>数据操作语言</strong>DML（Data Manipulation Language）：INSERT、UNPATE、DELETE；</li><li><strong>事务处理语言</strong>TPL（Transaction Process Language）：COMMIT、ROLLBACK；</li><li><strong>数据控制语言</strong>DCL（Data Control Language）：GRANT、REVOKE。</li></ol><h2 id="十五、综合练习"><a href="#十五、综合练习" class="headerlink" title="十五、综合练习"></a>十五、综合练习</h2><p>某网上购物商城数据库表的结构如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户表</span><br><span class="line">CREATE TABLE USER(</span><br><span class="line">userId INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(20) NOT NULL,</span><br><span class="line">PASSWORD VARCHAR(18) NOT NULL,</span><br><span class="line">address VARCHAR(100),</span><br><span class="line">phone VARCHAR(11)</span><br><span class="line">);</span><br><span class="line">SELECT * FROM USER;</span><br><span class="line">INSERT INTO USER(username, PASSWORD, address,phone) VALUES('张三','123','北京昌平','13541489201');</span><br><span class="line">INSERT INTO USER(username, PASSWORD, address,phone) VALUES('李四','678','北京海定','13541489202');</span><br><span class="line">INSERT INTO USER(username, PASSWORD, address,phone) VALUES('王五','123','北京朝阳','13541489203');</span><br><span class="line">INSERT INTO USER(username, PASSWORD, address,phone) VALUES('赵柳','123','北京大兴','13541489204');</span><br><span class="line"># 创建分类表</span><br><span class="line">CREATE TABLE category(</span><br><span class="line">cid VARCHAR(32) PRIMARY KEY,</span><br><span class="line">cname VARCHAR(100) NOT NULL  # 分类名称</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO category VALUES('c001','电器');</span><br><span class="line">INSERT INTO category VALUES('c002','服饰');</span><br><span class="line">INSERT INTO category VALUES('c003','化妆品');</span><br><span class="line">INSERT INTO category VALUES('c004','书籍');</span><br><span class="line"></span><br><span class="line"># 商品表</span><br><span class="line">CREATE TABLE `products`(</span><br><span class="line">`pid` VARCHAR(32) PRIMARY KEY,</span><br><span class="line">`name` VARCHAR(40),</span><br><span class="line">`price` DOUBLE(7,2),</span><br><span class="line">category_id VARCHAR(32),</span><br><span class="line">CONSTRAINT fk_products_category_id FOREIGN KEY (category_id) REFERENCES category(cid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p001','联想',5000,'c001');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p002','海尔',3000,'c001');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p003','雷神',5000,'c001');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p004','JACK',800,'c001');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p005','真维斯',200,'c002');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p006','花花公子',440,'c002');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p007','劲霸',2000,'c002');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p008','香奈儿',800,'c003');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p009','相宜本草 ',200,'c003');</span><br><span class="line">INSERT INTO products(pid, NAME, price, category_id) VALUES('p0010','梅明子',200,NULL);</span><br><span class="line"># 订单表</span><br><span class="line">CREATE TABLE `orders` (</span><br><span class="line">`oid` VARCHAR(32) PRIMARY KEY,</span><br><span class="line">`totalprice` DOUBLE(12,2), # 总计</span><br><span class="line">`userId` INT,</span><br><span class="line">CONSTRAINT fk_orders_userId FOREIGN KEY(userId) REFERENCES USER(userId) # 外键</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO orders VALUES('o6100',18000.50,1);</span><br><span class="line">INSERT INTO orders VALUES('o6101',7200.35,1);</span><br><span class="line">INSERT INTO orders VALUES('o6102',600.00,2);</span><br><span class="line">INSERT INTO orders VALUES('o6103',1300.26,4);</span><br><span class="line">SELECT * FROM orders;</span><br><span class="line"># 订单详情表</span><br><span class="line">CREATE TABLE orderitem(</span><br><span class="line">oid VARCHAR(32), # 订单id</span><br><span class="line">pid VARCHAR(32), # 商品id</span><br><span class="line">num INT, # 购买商品数量</span><br><span class="line">PRIMARY KEY(oid, pid), # 主键</span><br><span class="line">CONSTRAINT fk_orderitem_oid FOREIGN KEY(oid) REFERENCES orders(oid),</span><br><span class="line">CONSTRAINT fk_orderitem_pid FOREIGN KEY(pid) REFERENCES products(pid)</span><br><span class="line">);</span><br><span class="line"># 订单详情表添加信息</span><br><span class="line">INSERT INTO orderitem VALUES('o6100','p001',1),('o6100','p002',1),('o6101','p003',1);</span><br></pre></td></tr></tbody></table></figure><h3 id="15-1-综合练习1-【多表查询】"><a href="#15-1-综合练习1-【多表查询】" class="headerlink" title="15.1 综合练习1-【多表查询】"></a>15.1 综合练习1-【多表查询】</h3><ol><li><p>查询所有用户的订单</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有用户的订单</span><br><span class="line"># 用户订单表</span><br><span class="line">SELECT * FROM USER INNER JOIN orders ON orders.`userId` = user.`userId`;</span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>查询用户id为1的所有订单详情</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询用户id为1的所有订单详情</span><br><span class="line"># 用户 订单 订单详情表</span><br><span class="line">SELECT * FROM USER</span><br><span class="line">INNER JOIN orders</span><br><span class="line">ON orders.`userId` = user.`userId`</span><br><span class="line">INNER JOIN orderitem</span><br><span class="line">ON orders.`oid` = orderitem.`oid`</span><br><span class="line">WHERE user.`userId` = 1;</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="15-2-综合练习2-【子查询】"><a href="#15-2-综合练习2-【子查询】" class="headerlink" title="15.2  综合练习2-【子查询】"></a>15.2  综合练习2-【子查询】</h3><ol><li><p>查看用户为张三的订单</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看用户为张三的订单</span><br><span class="line"># 子查询单行单列</span><br><span class="line">SELECT userId FROM USER WHERE username='张三';</span><br><span class="line">SELECT * FROM orders WHERE userId=(SELECT userId FROM USER WHERE username='张三');</span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>查询出订单的价格大于800的所有用户的信息</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询出订单的价格大于800的所有用户的信息</span><br><span class="line"># 子查询多行单列枚举查询</span><br><span class="line">SELECT DISTINCT userId FROM orders WHERE totalprice &gt; 800;</span><br><span class="line">SELECT * FROM USER WHERE userId IN (SELECT DISTINCT userId FROM orders WHERE totalprice &gt; 800);</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="15-3-综合练习3-【分页查询】"><a href="#15-3-综合练习3-【分页查询】" class="headerlink" title="15.3  综合练习3-【分页查询】"></a>15.3  综合练习3-【分页查询】</h3><ol><li><p>查询所有订单信息，每页显示5条数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有订单信息，每页显示5条数据</span><br><span class="line"># 查询第一页</span><br><span class="line">SELECT * FROM orders LIMIT 0, 5;</span><br><span class="line"># 查询第二页</span><br><span class="line">SELECT * FROM orders LIMIT 5, 5;</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="至此，MySql的基础学习已经告一段落，继续加油吧，在计算机这篇星辰大海中继续遨游。！"><a href="#至此，MySql的基础学习已经告一段落，继续加油吧，在计算机这篇星辰大海中继续遨游。！" class="headerlink" title="至此，MySql的基础学习已经告一段落，继续加油吧，在计算机这篇星辰大海中继续遨游。！"></a>至此，MySql的基础学习已经告一段落，继续加油吧，在计算机这篇星辰大海中继续遨游。！</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MySQL是一个&lt;strong&gt;&lt;a href=&quot;https://baike.baidu.com/item/关系型数据库管理系统/696511&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;关系型数据库管理系统&lt;/a&gt;**&lt;/strong&gt;，**由瑞典MySQL AB 公司开发，属于 &lt;a href=&quot;https://baike.baidu.com/item/Oracle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Oracle&lt;/a&gt; 旗下产品。MySQL 是最流行的&lt;a href=&quot;https://baike.baidu.com/item/关系型数据库管理系统/696511&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;关系型数据库管理系统&lt;/a&gt;之一，在 WEB 应用方面，MySQL是最好的 &lt;a href=&quot;https://baike.baidu.com/item/RDBMS/1048260&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RDBMS&lt;/a&gt; (Relational Database Management System，关系数据库管理系统) 应用软件之一。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySql" scheme="https://liudufu.github.io/tags/MySql/"/>
    
      <category term="学习笔记" scheme="https://liudufu.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>设计_面试题.03.01.三合一</title>
    <link href="https://liudufu.github.io/Three_in_one/"/>
    <id>https://liudufu.github.io/Three_in_one/</id>
    <published>2020-12-08T09:39:26.000Z</published>
    <updated>2020-12-08T09:42:02.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>三合一。描述如何只用一个数组来实现三个栈。</p><p>你应该实现push(stackNum, value)、pop(stackNum)、isEmpty(stackNum)、peek(stackNum)方法。stackNum表示栈下标，value表示压入的值。</p><p>构造函数会传入一个stackSize参数，代表每个栈的大小。</p><p>示例1:</p><a id="more"></a><p> 输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">["TripleInOne", "push", "push", "pop", "pop", "pop", "isEmpty"]</span><br><span class="line">[[1], [0, 1], [0, 2], [0], [0], [0], [0]]</span><br></pre></td></tr></tbody></table></figure><p> 输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[null, null, null, 1, -1, -1, true]</span><br><span class="line">说明：当栈为空时`pop, peek`返回-1，当栈满时`push`不压入元素。</span><br></pre></td></tr></tbody></table></figure><p>示例2:</p><p> 输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">["TripleInOne", "push", "push", "push", "pop", "pop", "pop", "peek"]</span><br><span class="line">[[2], [0, 1], [0, 2], [0, 3], [0], [0], [0], [0]]</span><br><span class="line"> 输出：</span><br><span class="line">[null, null, null, null, 2, 1, -1, -1]</span><br></pre></td></tr></tbody></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一开始直接懵逼，看了别人的才懂题意</p><ol><li><p>首先开始创建类时构造函数里面创入的大小是栈的大小 ( stackSize )</p></li><li><p>其次不管是push还是pop还是peek或者isEmpty 的参数 (stackNum)</p><ul><li>stackNum输入的值,代表的是哪个栈!!!!</li><li>这个题叫三合一就是说 三个栈代表全部放在一个数组里面</li><li>例如: 参数stackNum 为 0 时就代表第一个栈</li><li>参数stackNum 为 1 时就代表第二个栈</li><li>参数stackNum 为 2 时就代表第三个栈</li></ul></li><li><p>由于是一个数组相当于3个栈,所以创建的时候就 乘 3</p></li></ol><p><img src="https://pic.leetcode-cn.com/1600592347-fAjxIk-image.png" alt=""></p><p><img src="https://pic.leetcode-cn.com/1600592358-oHsaSG-image.png" alt=""></p><ol start="4"><li><p>每次push的时候 需要先判断头指针是否小于数组的长度</p><ul><li>如果小于需要添加值,而且需要把top节点加3</li><li>例如: 添加栈0 2, 添加栈0 8, 添加栈0 7</li></ul><p><img src="https://pic.leetcode-cn.com/1600592511-jiDDdY-image.png" alt=""></p><p><img src="https://pic.leetcode-cn.com/1600592610-evbIQM-image.png" alt=""></p><p>此时top[0] = 0 减3之后就是 -3 所以它是空的返回-1</p></li><li><p>每次peek的时候, 先判断是否为空 空直接返回-1, 不为空话就把top – 3 的下标给它就可以了,此时不是抛出所以不需要改变原来的top的值</p></li></ol><p>参考代码： </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TripleInOne</span> </span>{</span><br><span class="line"><span class="comment">//定义数组栈</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stack;</span><br><span class="line"><span class="comment">//定义一个头指针的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stackTop;</span><br><span class="line"><span class="comment">//定义栈的长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> stackSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TripleInOne</span><span class="params">(<span class="keyword">int</span> stackSize)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.stackSize = stackSize;</span><br><span class="line">    <span class="comment">//初始化三合一的栈</span></span><br><span class="line">    stack = <span class="keyword">new</span> <span class="keyword">int</span>[stackSize * <span class="number">3</span>];</span><br><span class="line">    <span class="comment">//初始化三个栈的头结点</span></span><br><span class="line">    stackTop = <span class="keyword">new</span> <span class="keyword">int</span>[] {<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>};</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> stackNum, <span class="keyword">int</span> value)</span> </span>{</span><br><span class="line">    <span class="comment">//push首先需要判断栈是否满了，</span></span><br><span class="line">    <span class="keyword">int</span> curStackTop = stackTop[stackNum];</span><br><span class="line">    <span class="keyword">if</span>(curStackTop &lt; stackSize * <span class="number">3</span>) {</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    stack[curStackTop] = value;</span><br><span class="line">    <span class="comment">//头结点 + 3</span></span><br><span class="line">    stackTop[stackNum] += <span class="number">3</span>;</span><br><span class="line">    }<span class="keyword">else</span> {<span class="comment">//栈满了</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> stackNum)</span> </span>{</span><br><span class="line">    <span class="comment">//栈顶出栈首先需要判断栈是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(isEmpty(stackNum)) {</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//原本因为每次进栈后栈顶元素的下标的都会加3，出栈需要先减三</span></span><br><span class="line">    stackTop[stackNum] -= <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stack[stackTop[stackNum]];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">(<span class="keyword">int</span> stackNum)</span> </span>{</span><br><span class="line">    <span class="comment">//同理，判断是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(isEmpty(stackNum)) {</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//因为是peek，所以不用改变栈顶指针的值</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stack[stackTop[stackNum] - <span class="number">3</span>];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">int</span> stackNum)</span> </span>{</span><br><span class="line">    <span class="comment">//判断这个栈是否为空，因为每次进栈后栈顶元素的下标的都会加3，所以判空时需要先减三判断是否小于90</span></span><br><span class="line">    <span class="keyword">return</span> stackTop[stackNum] - <span class="number">3</span> &lt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;三合一。描述如何只用一个数组来实现三个栈。&lt;/p&gt;
&lt;p&gt;你应该实现push(stackNum, value)、pop(stackNum)、isEmpty(stackNum)、peek(stackNum)方法。stackNum表示栈下标，value表示压入的值。&lt;/p&gt;
&lt;p&gt;构造函数会传入一个stackSize参数，代表每个栈的大小。&lt;/p&gt;
&lt;p&gt;示例1:&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="数组" scheme="https://liudufu.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="栈" scheme="https://liudufu.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥算法国赛真题总结</title>
    <link href="https://liudufu.github.io/A_summary_of_the_National_Games/"/>
    <id>https://liudufu.github.io/A_summary_of_the_National_Games/</id>
    <published>2020-11-08T13:43:33.000Z</published>
    <updated>2020-11-08T13:46:05.447Z</updated>
    
    <content type="html"><![CDATA[<p>🌸记录蓝桥杯javaB组历届决赛真题解题算法总结与对比</p><a id="more"></a><h2 id="🌸解题方法汇总（java-B组决赛）"><a href="#🌸解题方法汇总（java-B组决赛）" class="headerlink" title="🌸解题方法汇总（java B组决赛）"></a>🌸解题方法汇总（java B组决赛）</h2><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>第四届</td><td>暴力枚举</td><td>暴力枚举</td><td>快速排序</td><td>BFS、双向BFS、八数码问题、康托展开等</td><td>动态规划、模拟</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第五届</td><td>暴力枚举</td><td>全排列+剪枝（或者直接暴力但是代码剪枝量很大）</td><td>读题、细心、逻辑模拟</td><td>康托展开式（不会则直接暴力全排，但是分不高，可能一半都没有而且超时）、阶乘</td><td>行列式、矩阵乘法、模拟、扩展欧几里得</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第六届</td><td>脑筋转弯+暴力计算</td><td>全排列+判断</td><td>自己的方法是<strong>“猜”“试出来”</strong></td><td>深度优先搜索</td><td>-1</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第七届</td><td>画图找出规律后使用递归模拟过程</td><td>全排列</td><td>代码分析，考你能不能读懂代码</td><td>回溯+剪枝</td><td>暴力搜索（超时）；DFS+剪枝回溯（60）；动态规划（80）；数据结构（100）</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第八届</td><td>直接暴力循环</td><td>使用另一个数组进行模拟细胞增殖的过程或者使用深度优先模拟</td><td>读代码找规律（看自己的细心程度吧）</td><td>直接模拟计算的过程，注意使用数据范围较大的Long，而且需要熟练使用Long、Integer等类的API</td><td>博弈问题、深度优先、剪枝，回溯、模拟</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第九届</td><td>海伦公式</td><td>全排列、剪枝判断</td><td>全排列、回溯</td><td>并查集、连通分量、递归</td><td>构造树或者递归优化</td><td>-1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第十届模拟</td><td>暴力+熟悉除模运算的实质</td><td>暴力或者深搜求子串</td><td>暴力（时间长）、找规律分析题，将除模转换成次方</td><td>暴力深搜（耗时加分低）、找规律理解最大公约数的含义</td><td>并查集、联通分量找环</td><td>-1（暴力只能30）</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>第十届</td><td>暴力</td><td>素数筛、记忆化深搜或者dp</td><td>找规律</td><td>素因子分解、找规律</td><td>深搜+判重</td><td>dp+贪心</td><td>暴力或者dp</td><td>-1（找规律）</td><td>线段树、主席树、树状数组</td><td>-1</td></tr></tbody></table><ul><li><a href="">javaB组历届决赛真题汇总</a></li><li><a href="">javaB组历届省赛赛真题汇总</a></li></ul><h2 id="🌸康托展开"><a href="#🌸康托展开" class="headerlink" title="🌸康托展开"></a>🌸康托展开</h2><p><strong>康托展开</strong>是一个全排列到一个<a href="https://baike.baidu.com/item/自然数" target="_blank" rel="noopener">自然数</a>的<a href="https://baike.baidu.com/item/双射" target="_blank" rel="noopener">双射</a>，常用于构建<a href="https://baike.baidu.com/item/哈希表" target="_blank" rel="noopener">哈希表</a>时的空间压缩。 康托展开的实质是计算当前排列在所有由小到大全排列中的顺序，因此是可逆的。</p><p><strong>通俗简介：</strong></p><p>康托展开可以求解一个排列的序号，比如：12345 序号为 1 ，12354序号为2，按字典序增加编号递增，依次类推。<br>康托逆展开可以求解一个序号它对应的排列是什么。</p><p>先给出康托展开的公式：</p><p>$X = a_n(n - 1)!+ a_{n-1}(n-2)!+….+a_1\cdot0!$</p><p>先对这个公式里变量进行解释，大家不理解这个公式没关系，慢慢往后看，很简单的。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9nc3MzLmJkc3RhdGljLmNvbS83UG8zZFNhZ194STRraEdrcG9XSzFIRjZoaHkvYmFpa2UvcyUzRDEyL3NpZ249N2NlMGY3ZmFkODA3MzVmYTk1ZjA0YWJiOWM1MTQ4ZmEvMGRmM2Q3Y2E3YmNiMGE0NjI1ZTdkZWQ4Njc2M2Y2MjQ2YTYwYWYwZS5qcGc?x-oss-process=image/format,png" alt="img"> 的意思是从右往左数第 i 位这个数是这个数前未出现的数，第<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9nc3MzLmJkc3RhdGljLmNvbS83UG8zZFNhZ194STRraEdrcG9XSzFIRjZoaHkvYmFpa2UvcyUzRDEyL3NpZ249N2NlMGY3ZmFkODA3MzVmYTk1ZjA0YWJiOWM1MTQ4ZmEvMGRmM2Q3Y2E3YmNiMGE0NjI1ZTdkZWQ4Njc2M2Y2MjQ2YTYwYWYwZS5qcGc?x-oss-process=image/format,png" alt="img"> 大。举个例子就明白这个公式了：</p><p>注意：计算的时候 12345 序列应视为第0个序列，后面会解释为什么。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">百度百科的例子</span><br><span class="line">在（1,2,3，4，5）5个数的排列组合中，计算 34152的康托展开值。</span><br><span class="line">首位是3，则小于3的数有两个，为1和2，，则首位小于3的所有排列组合为</span><br><span class="line">第二位是4，由于第一位小于4，1、2、3中一定会有1个充当第一位，所以排在4之下的只剩2个，所以其实计算的是在第二位之后小于4的个数。因此。</span><br><span class="line">第三位是1，则在其之后小于1的数有0个，所以。</span><br><span class="line">第四位是5，则在其之后小于5的数有1个，为2，所以。</span><br><span class="line">最后一位就不用计算啦，因为在它之后已经没有数了，所以固定为0</span><br><span class="line">根据公式：</span><br><span class="line">X = 2 x 4! + 2 x 3! + 0 x 2! + 1 x 1! + 0 x 0！</span><br><span class="line">　　所以比34152小的组合有61个，即34152是排第62。</span><br></pre></td></tr></tbody></table></figure><p>拿52413举例子：</p><p>1、首先看第一个数 5，不管第一位是什么数，后面都有四位数，那么这四位数全排列的方式有 4！种，而如果第一位是 1 或 2 或 3 或 4 都会比5开头的字典序要小，所以可以令1，2，3，4分别作为开头，这样的话就会有 4 * 4！种排法要比 52413这种排法的字典序要小。</p><p>那么第一个数是1，2，3，4时候的字典序的个数数完了是 4 * 4！ 种，且这些字典序都要比52413的字典序要小。</p><p>还有其他的排列方式比52413的字典序要小的吗？</p><p>2、那么就可以固定第一位5，找下一位2，这时5已经用过了，所以从剩下的 1，2，3，4 里挑选比2小的数，一共1个，后面还剩三位，也就是3！种排列方式，那么这时候比 52413 字典序要小的又有 1 * 3！种，也就是当5在第一位，1在第二位的时候。</p><p>3、再看第三位4，这时5，2都用了，所以从剩下的 1，3，4三个数中找比4小的数的个数，有两个比4小原理同上，所以这时候也可以有 2 * 2!种排列方式的字典序小于 52413</p><p>4、再看第四位1，这时候会有 0 * 1！种</p><p>5、再看第五位3，这时候会有0 * 0！种</p><p>综上所述：<br>对于序列： 52413 该序列展开后为： 4 * 4! + 1 * 3! + 2 * 2! + 0 * 1! + 0 * 0! ，计算结果是： 106<br>由于是从0开始计数的，所以最后 52413 的编号为 107</p><p>为什么从0开始计数？<br>可以这样看：我现在让你求12345的康托展开值，也就是：0<em>4！+ 0</em>3！+ 0<em>2！+ 0</em>1！+0*0！ = 0 所以明白了吧~~<br>康托公式最小字典序的编号就是0。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** 这里以字符串进行展示  字符串可泛化性好 ******/</span></span><br><span class="line"> </span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*******打出1-n的阶乘表*******/</span></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jie_cheng</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 0的阶乘为1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) f[i] = f[i - <span class="number">1</span>] * i;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**************康托展开****************/</span></span><br><span class="line">string str;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kangtuo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;  <span class="comment">//注意，因为 12345 是算作0开始计算的，最后结果要把12345看作是第一个</span></span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++){</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;<span class="comment">//用来计数的</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++){</span><br><span class="line">            <span class="keyword">if</span>(str[i] &gt; str[j]) tmp++;</span><br><span class="line">            <span class="comment">//计算str[i]是第几大的数，或者说计算有几个比他小的数</span></span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line">        ans += tmp * f[len - i - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    jie_cheng(<span class="number">10</span>);</span><br><span class="line">    string str = <span class="string">"52413"</span>;</span><br><span class="line">    cout&lt;&lt;kangtuo()&lt;&lt;endl;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸康托逆展开"><a href="#🌸康托逆展开" class="headerlink" title="🌸康托逆展开"></a>🌸康托逆展开</h2><p>直接开栗子：</p><p>如果初始序列是12345（第一个），让你求第107个序列是什么。（按字典序递增）</p><p>这样计算：</p><p>先把107减1，因为康托展开里的初始序列编号为0<br>然后计算下后缀积：<br> 1    2    3   4   5<br> 5！ 4！ 3！ 2！1！ 0！<br>120  24   6   2   1   1</p><p>106 / 4! = 4 ······ 10 有4个比它小的所以因该是5  从（1，2，3，4，5）里选<br>10  / 3! = 1 ······ 4  有1个比它小的所以因该是2  从（1， 2， 3， 4）里选<br> 4   / 2! = 2 ······ 0  有2个比它小的所以因该是4  从（1， 3， 4）里选<br> 0   / 1! = 0 ······ 0  有0个比它小的所以因该是1  从（1，3）里选<br> 0   / 0! = 0 ······ 0  有0个比它小的所以因该是3  从（3）里选</p><p>所以编号107的是 52413</p><h3 id="康托逆展开代码："><a href="#康托逆展开代码：" class="headerlink" title="康托逆展开代码："></a>康托逆展开代码：</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** 这里以字符串进行展示  字符串可泛化性好 ******/</span></span><br><span class="line"> </span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*******打出1-n的阶乘表*******/</span></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> x, num;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jie_cheng</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 0的阶乘为1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) f[i] = f[i - <span class="number">1</span>] * i;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**************康托逆展开**************/</span></span><br><span class="line"> </span><br><span class="line">vector&lt;<span class="keyword">char</span>&gt; vec; <span class="comment">//存需要排列的字符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev_kangtuo</span><span class="params">(<span class="keyword">int</span> k)</span> <span class="comment">//输出序号为 k 的字符序列</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n = vec.size(), len = <span class="number">0</span>;</span><br><span class="line">    string ans = <span class="string">""</span>;</span><br><span class="line">    k--; <span class="comment">// 算的时候是按 12345 是第0位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++){</span><br><span class="line">        <span class="keyword">int</span> t = k / f[n - i]; <span class="comment">// 第 i 位需要 第 t + 1 大的数</span></span><br><span class="line">        k %= f[n - i];        <span class="comment">//剩下的几位需要提供的排列数</span></span><br><span class="line">        ans += vec[t] ; <span class="comment">//  vec[t] 就是第 t + 1 大的数</span></span><br><span class="line">        vec.erase(vec.begin() + t); </span><br><span class="line"><span class="comment">//用过就删了，不用vector用暴力也可以，就是说枚举，然后一个一个的比较大小，并记录有几个没用过的字符且字典序比它小</span></span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/***************************************/</span></span><br><span class="line"><span class="comment">// 假设展开后不超过10位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    jie_cheng(<span class="number">10</span>); <span class="comment">// 预处里好阶乘</span></span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;x); <span class="comment">// 输入需要逆展开的数字</span></span><br><span class="line">    <span class="comment">/************康托逆展开***********/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">if</span>(x / f[i] == <span class="number">0</span>) <span class="comment">// 求出 x 逆展开所需的最小的位数，方便下面的初始化</span></span><br><span class="line">    {</span><br><span class="line">    num = i;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) vec.push_back(i + <span class="string">'0'</span>); <span class="comment">//输入的位数只要不小于num就可以</span></span><br><span class="line">    rev_kangtuo(x);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸吉姆拉尔森公式"><a href="#🌸吉姆拉尔森公式" class="headerlink" title="🌸吉姆拉尔森公式"></a>🌸吉姆拉尔森公式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">whatday</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">1</span>) {</span><br><span class="line">y--;</span><br><span class="line">m = <span class="number">13</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">2</span>) {</span><br><span class="line">y--;</span><br><span class="line">m = <span class="number">14</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> (d + <span class="number">2</span> * m + <span class="number">3</span> * (m + <span class="number">1</span>) / <span class="number">5</span> + y + y / <span class="number">4</span> - y / <span class="number">100</span> + y / <span class="number">400</span>) % <span class="number">7</span> + <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸海伦公式"><a href="#🌸海伦公式" class="headerlink" title="🌸海伦公式"></a>🌸海伦公式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">三角形三边长a, b, c</span><br><span class="line">p = (a + b + c) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">area = Math.sqrt(p * (p - a) * (p - b) * (p - c))</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸素数"><a href="#🌸素数" class="headerlink" title="🌸素数"></a>🌸素数</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用API</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">n_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">BigInteger in = <span class="keyword">new</span> BigInteger(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line">in = in.nextProbablePrime();</span><br><span class="line">}</span><br><span class="line">System.out.println(in);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常规方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">n_prime1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">List&lt;Long&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">2</span>; list.size() &lt; n; i++) {</span><br><span class="line"><span class="keyword">if</span>(prime(i)) {</span><br><span class="line">list.add(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">System.out.println(list.get(n - <span class="number">1</span>));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">prime</span><span class="params">(<span class="keyword">long</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i * i &lt;= n;i += <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">n_prime2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line">arr[i] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) {<span class="comment">//可以只用根号n之前的数字去筛选</span></span><br><span class="line"><span class="keyword">if</span>(arr[i] == <span class="number">1</span>) { <span class="comment">//不加判断也是可以的，增加复杂度了，我们只需要在我们所认为的“素数”中筛选就可以了， 每个合数必有质因子</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i * i; j &lt;= n; j += i) { <span class="comment">//比如j = i * k(k &lt; i),那么j肯定被k筛掉了</span></span><br><span class="line">arr[j] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line"><span class="keyword">if</span>(arr[i] == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">100002</span>) {</span><br><span class="line">System.out.println(<span class="string">"-&gt;"</span>+i);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">k++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸日期类（SimpleDateFormat-Date"><a href="#🌸日期类（SimpleDateFormat-Date" class="headerlink" title="🌸日期类（SimpleDateFormat +Date)"></a>🌸日期类（SimpleDateFormat +Date)</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-mm-dd"</span>);</span><br><span class="line">        Date date1 = format.parse(<span class="string">"1921-7-23"</span>);</span><br><span class="line">        Date date2 = format.parse(<span class="string">"2020- 7-1"</span>);</span><br><span class="line">        <span class="keyword">int</span> a = (<span class="keyword">int</span>)((date2.getTime() - date1.getTime()) / <span class="number">1000</span> * <span class="number">60</span>);<span class="comment">//相隔多少分钟</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接使用 Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">36138</span> * <span class="number">24</span> * <span class="number">60L</span>;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(<span class="number">36138</span> * <span class="number">24</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="comment">// long型变量在定义的时候，如果不加“L”,则默认为int型变量</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date(<span class="number">21</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 1921</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">120</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 2020</span></span><br><span class="line">        <span class="keyword">long</span> time = date2.getTime() - date1.getTime();</span><br><span class="line">        System.out.println(time / (<span class="number">60000</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁"><a href="#🍁" class="headerlink" title="🍁"></a>🍁</h3><h4 id="🍂"><a href="#🍂" class="headerlink" title="🍂"></a>🍂</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🌸记录蓝桥杯javaB组历届决赛真题解题算法总结与对比&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="蓝桥杯" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
      <category term="总结" scheme="https://liudufu.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="蓝桥杯国赛真题" scheme="https://liudufu.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E7%9C%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥算法省赛真题总结</title>
    <link href="https://liudufu.github.io/Summary_of_provincial_competition/"/>
    <id>https://liudufu.github.io/Summary_of_provincial_competition/</id>
    <published>2020-11-08T13:39:55.000Z</published>
    <updated>2020-11-08T13:43:13.791Z</updated>
    
    <content type="html"><![CDATA[<p>🌸<strong>记录蓝桥杯javaB组省赛题目解题方法总结对比</strong></p><a id="more"></a><h2 id="🌸解题方法汇总（java-B组省赛）"><a href="#🌸解题方法汇总（java-B组省赛）" class="headerlink" title="🌸解题方法汇总（java B组省赛）"></a>🌸解题方法汇总（java B组省赛）</h2><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>第四届</td><td>日期(API)、吉姆拉尔森公式</td><td>暴力枚举</td><td>暴力深搜</td><td>递归、大数类</td><td>逻辑模拟</td><td>逻辑模拟</td><td>暴力查找(类集框架)</td><td>模拟过程</td><td>全排列、逻辑判断、逻辑枚举的条件判断，枚举所有情况</td><td>题意理解，思维的巧妙运用</td></tr><tr><td>第五届</td><td>数学逻辑</td><td>数学逻辑</td><td>字符串、暴力模拟</td><td>数学、奇偶数</td><td>数学逻辑</td><td>暴力枚举</td><td>全排列、逻辑检查</td><td>模拟过程</td><td>深度优先、过程模拟搜索、记忆化递归</td><td>-1</td></tr><tr><td>第六届</td><td>简单数学计算</td><td>暴力枚举</td><td>暴力枚举</td><td>模拟过程发现小技巧</td><td>全排列</td><td>数学规律</td><td>递归</td><td>模拟过程</td><td>递归、动态规划、矩阵快速幂</td><td>递归最多一万层</td></tr><tr><td>第七届</td><td>数学规律</td><td>暴力枚举</td><td>暴力全排列</td><td>组合，规律</td><td>递归、组合</td><td>暴力、全排列</td><td>组合、深搜、图、联通分量</td><td>首先暴力、暴力优化（四层到两层）哈希</td><td>递归模拟过程、细节很重要</td><td>-1</td></tr><tr><td>第八届</td><td>Excel、耐心敲代码计算、暴力计算器、</td><td>全排列</td><td>二维数组找规律</td><td>-1</td><td>过程模拟分析</td><td>动态规划</td><td>API、日期的细心判断（主要是细心找到每一个满足的条件）</td><td>动态规划、扩展欧几里得、完全背包</td><td>数学规律、模拟过程</td><td>暴力、前缀和优化、取模运算</td></tr><tr><td>第九届</td><td>日期、计算器（注意加一天）</td><td>暴力计算、勾股定理</td><td>大数类、数很大输入到文件</td><td>动态规划、递归、二分</td><td>随机快速排序、递归</td><td>暴力、优化（二分）、（双指针）</td><td>画图、画过程模拟、找出数学规律、等差数列求和、绝对值的消去</td><td>面向对象的思维模拟、类的自定义排序、思维逻辑的严密性</td><td>暴力深搜、DFS查找联通分量的个数</td><td>-1（乘法逆元）</td></tr><tr><td>第十届</td><td>综合分析、求最大值</td><td>暴力求子串、Set集合</td><td>暴力求值、有坑（只需要关注数的后四位，不然数字太大存不了）</td><td>暴力分解、条件判断</td><td>求最短路径、广度优先、深度优先、节点判断</td><td>暴力破解</td><td>模拟过程、注意合理运用变量和数组，利用二维数组和多个一维数组可以代替复杂的数据结构</td><td>逻辑分析与严密性、字符串正则以及API的使用</td><td>逻辑思维的分析与严密性、需要去考虑繁杂的所有可能的情况然后写出结果</td><td>-1</td></tr><tr><td>第十一届</td><td>手工计算、代码计算时注意减法时的边界不能减到负数</td><td>日期、计算器、日期类</td><td>数学求最值、求算数不等式相等时的边界情况</td><td>-1（找规律，用代码去模拟题目要求程序计算的过程）</td><td>动态规划、找出存放规律与状态的转移方程</td><td>暴力取模、优化（位运算&gt;&gt;取代 / ）(即n = n&gt;&gt; 1 相当于 n = n / 2)</td><td>熟练使用API、StringBuilder以及字符串的判断、总的来说就是暴力模拟</td><td>深度优先搜索、动态规划</td><td>暴力拼接（双重for）、优化（二维数组、位数取取余等）</td><td>-1</td></tr><tr><td>第十二届</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="🌸黄金分割数与斐波那契数列的关系"><a href="#🌸黄金分割数与斐波那契数列的关系" class="headerlink" title="🌸黄金分割数与斐波那契数列的关系"></a>🌸黄金分割数与斐波那契数列的关系</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">比较简单的一种是用连分数：</span><br><span class="line">                                   1</span><br><span class="line">    黄金数 = ------------------------------</span><br><span class="line">                                     1</span><br><span class="line">                    1 + ---------------------</span><br><span class="line">                                        1</span><br><span class="line">                           1 + -------------</span><br><span class="line">                                          1</span><br><span class="line">                                 1 + -------</span><br><span class="line">                                       1 + ...</span><br><span class="line">                         </span><br><span class="line">    这个连分数计算的“层数”越多，它的值越接近黄金分割数。</span><br><span class="line">    请你利用这一特性，求出黄金分割数的足够精确值，要求四舍五入到小数点后100位。</span><br><span class="line">    小数点后3位的值为：0.618</span><br><span class="line">    小数点后4位的值为：0.6180</span><br><span class="line">    小数点后5位的值为：0.61803</span><br><span class="line">    小数点后7位的值为：0.6180340</span><br></pre></td></tr></tbody></table></figure><p>可以分析得出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第二层      1/2    后两位</span><br><span class="line">第三层      2/3    后三位</span><br><span class="line">第四层      3/5后四位</span><br><span class="line">第五层      5/8后五位</span><br><span class="line">.....</span><br><span class="line">以此类推</span><br><span class="line">即后100位为稳定的100多位的斐波那契数相除，则可以得出代码</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">          </span><br><span class="line">        BigInteger a = BigInteger.ONE;</span><br><span class="line">        BigInteger b = BigInteger.ONE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; <span class="number">500</span>; i++) {</span><br><span class="line">        BigInteger t = b;</span><br><span class="line">        b = a.add(b);</span><br><span class="line">        a = t;</span><br><span class="line">        }</span><br><span class="line">        BigDecimal divide = <span class="keyword">new</span> BigDecimal(a, <span class="number">110</span>).divide(<span class="keyword">new</span> BigDecimal(b, <span class="number">110</span>), BigDecimal.ROUND_HALF_DOWN);</span><br><span class="line">        System.out.println(divide.toPlainString().substring(<span class="number">0</span>, <span class="number">103</span>));</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">    <span class="comment">//求斐波那契</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> BigDecimal <span class="title">fb</span><span class="params">(<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">        BigDecimal a = BigDecimal.ONE;</span><br><span class="line">        BigDecimal b = BigDecimal.ONE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            BigDecimal t = b;</span><br><span class="line">            b = a.add(b);</span><br><span class="line">            a=t;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸圆周率与连分数"><a href="#🌸圆周率与连分数" class="headerlink" title="🌸圆周率与连分数"></a>🌸圆周率与连分数</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> 4                               1</span><br><span class="line">----   = 1 +  ------------------------------</span><br><span class="line"> N(圆周率)                            9</span><br><span class="line">                 1 + ---------------------</span><br><span class="line">                                       25</span><br><span class="line">                        2 + -----------------</span><br><span class="line">                                         </span><br><span class="line">                              2 + .............</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">111</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">10000</span>; n&gt;=<span class="number">0</span>; n--){</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">        x = <span class="number">2</span> + (i*i / x);</span><br><span class="line">    }</span><br><span class="line">   </span><br><span class="line">    System.out.println(String.format(<span class="string">"%.4f"</span>, <span class="number">4</span>/ (x - <span class="number">1</span>)));</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸吉姆拉尔森公式"><a href="#🌸吉姆拉尔森公式" class="headerlink" title="🌸吉姆拉尔森公式"></a>🌸吉姆拉尔森公式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">whatday</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">1</span>) {</span><br><span class="line">y--;</span><br><span class="line">m = <span class="number">13</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">2</span>) {</span><br><span class="line">y--;</span><br><span class="line">m = <span class="number">14</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> (d + <span class="number">2</span> * m + <span class="number">3</span> * (m + <span class="number">1</span>) / <span class="number">5</span> + y + y / <span class="number">4</span> - y / <span class="number">100</span> + y / <span class="number">400</span>) % <span class="number">7</span> + <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸复数幂（复数的阶乘）-了解打印流的使用文本"><a href="#🌸复数幂（复数的阶乘）-了解打印流的使用文本" class="headerlink" title="🌸复数幂（复数的阶乘）(了解打印流的使用文本)"></a>🌸复数幂（复数的阶乘）(了解打印流的使用文本)</h2><p>复数计算的规律  尝试用 (a+bi)<em>(c+di) = (a</em>c - b<em>d) + (a</em>d + b*c)i </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>{</span><br><span class="line"><span class="comment">//System.out.println(getNum(new BigInteger("2"), new BigInteger("3"), new BigInteger("2"), new BigInteger("3")));</span></span><br><span class="line"></span><br><span class="line">BigInteger a = <span class="keyword">new</span> BigInteger(<span class="string">"2"</span>);</span><br><span class="line">BigInteger b = <span class="keyword">new</span> BigInteger(<span class="string">"3"</span>);</span><br><span class="line">BigInteger c = <span class="keyword">new</span> BigInteger(<span class="string">"2"</span>);</span><br><span class="line">BigInteger d = <span class="keyword">new</span> BigInteger(<span class="string">"3"</span>);</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">BigInteger shi;</span><br><span class="line">BigInteger xu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n &lt; <span class="number">123456</span>) {</span><br><span class="line">shi = a.multiply(c).subtract((b.multiply(d)));</span><br><span class="line">xu = a.multiply(d).add(b.multiply(c));</span><br><span class="line">n++;</span><br><span class="line">a = shi;</span><br><span class="line">b = xu;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b.compareTo(<span class="keyword">new</span> BigInteger(<span class="string">"0"</span>)) == <span class="number">1</span>) {</span><br><span class="line">System.out.println(a + <span class="string">"+"</span> + b + <span class="string">"i"</span>);</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(b.compareTo(<span class="keyword">new</span> BigInteger(<span class="string">"0"</span>)) == <span class="number">0</span>) {</span><br><span class="line">System.out.println(a + <span class="string">""</span>);</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line">System.out.println(a + <span class="string">""</span> + b + <span class="string">"i"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PrintStream out = System.out;</span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> File(<span class="string">"ans.txt"</span>));</span><br><span class="line">System.setOut(ps);;<span class="comment">//输出在ans.txt</span></span><br><span class="line">System.out.println(a.toString() +b.toString() + <span class="string">"i"</span>);</span><br><span class="line">System.setOut(out);</span><br><span class="line">System.out.println(a.toString() + b.toString() + <span class="string">"i"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸扔鸡蛋问题（摔手机）（面试题）（动态规划）"><a href="#🌸扔鸡蛋问题（摔手机）（面试题）（动态规划）" class="headerlink" title="🌸扔鸡蛋问题（摔手机）（面试题）（动态规划）"></a>🌸扔鸡蛋问题（摔手机）（面试题）（动态规划）</h2><p>你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。</p><p>每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</p><p>你知道存在楼层 F ，满足 0 &lt;= F &lt;= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。</p><p>每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 &lt;= X &lt;= N）。</p><p>你的目标是确切地知道 F 的值是多少。</p><p>无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 鸡蛋解法力扣 </span>{</span><br><span class="line">    <span class="keyword">static</span> Integer[][] memo = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">superEggDrop</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>{</span><br><span class="line">        memo = <span class="keyword">new</span> Integer[K+<span class="number">1</span>][N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> dp(K,N);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *当前K个鸡蛋共有N层楼状态时 返回这个状态下确定 F的值的最小移动次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">        <span class="comment">//base case 层数N等于0时不需要扔鸡蛋,当鸡蛋数K为1时，只能每层逐个尝试剩下所有楼层</span></span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)<span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加一个备忘录 消除之前算过的重叠子问题</span></span><br><span class="line">        <span class="keyword">if</span>(memo[k][n]!=<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> memo[k][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> tmp = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//第一种 从第1层楼到第n层楼每层楼开始逐个尝试作为切入点 (会超时)</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++){</span><br><span class="line">             <span class="comment">//当选择在第i层楼扔了鸡蛋之后 可能出现鸡蛋碎了和鸡蛋没碎两种情况：</span></span><br><span class="line">             <span class="comment">//当鸡蛋碎了 问题状态转嫁为求k-1个鸡蛋 搜索的楼层区间变为1~i-1共i-1层楼时求解</span></span><br><span class="line">             <span class="keyword">int</span> eggBreak=dp(k-<span class="number">1</span>,i-<span class="number">1</span>);</span><br><span class="line">             <span class="comment">//当鸡蛋没碎 问题状态转嫁为鸡蛋的个数K不变 搜索楼层区间变为i+1~N共N-i层楼时求解</span></span><br><span class="line">             <span class="keyword">int</span> eggUnBreak=dp(k,n-i);</span><br><span class="line">             <span class="comment">//最终以i层为切入点求解的答案 为两种状态的最坏情况 并加上i层时操作1 并更新最小值</span></span><br><span class="line">             tmp = Math.min(tmp,Math.max(eggBreak,eggUnBreak)+<span class="number">1</span>);</span><br><span class="line">         }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种 利用二分查找的方式直接找到对应点(AC通过)</span></span><br><span class="line">        <span class="comment">//第一种线性逐个尝试切入点 然后求每个切入点两种状态的较大值 再求这些最大值之中的最小值 其实就是求这两条单调递增和单调递减直线的交点 相当于求上半部V形山谷值 二分查找来快速寻找这个点</span></span><br><span class="line"><span class="comment">//        int lo=1,hi =n;</span></span><br><span class="line"><span class="comment">//        while(lo&lt;=hi){</span></span><br><span class="line"><span class="comment">//            int mid =(lo+hi)/2;</span></span><br><span class="line"><span class="comment">//            int eggBreak = dp(k-1,mid-1);</span></span><br><span class="line"><span class="comment">//            int eggUnBreak = dp(k,n-mid);</span></span><br><span class="line"><span class="comment">//            if(eggBreak&gt;eggUnBreak){</span></span><br><span class="line"><span class="comment">//                hi = mid-1;</span></span><br><span class="line"><span class="comment">//                tmp = Math.min(tmp,eggBreak+1);</span></span><br><span class="line"><span class="comment">//            }else{</span></span><br><span class="line"><span class="comment">//                lo = mid+1;</span></span><br><span class="line"><span class="comment">//                tmp = Math.min(tmp,eggUnBreak+1);</span></span><br><span class="line"><span class="comment">//            }</span></span><br><span class="line">    <span class="comment">//    }</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加到备忘录里</span></span><br><span class="line">        memo[k][n]=tmp;</span><br><span class="line">        <span class="comment">//返回当前k个鸡蛋n层楼时求解的子问题的结果</span></span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(dp(<span class="number">3</span>,<span class="number">1000</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。</p><p>各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，并且评定出一个耐摔指数来，之后才允许上市流通。</p><p>x星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。</p><p>如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。</p><p>特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。</p><p>如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n</p><p>为了减少测试次数，从每个厂家抽样3部手机参加测试。</p><p>某次测试的塔高为1000层，如果我们总是采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？</p><p>请填写这个最多测试次数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>{</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10000</span>;j++)</span><br><span class="line">                memo[i][j] = <span class="number">99999999</span>;<span class="comment">//找最小,初始化INF</span></span><br><span class="line">        System.out.println(f(<span class="number">3</span>,<span class="number">1000</span>));</span><br><span class="line">        <span class="comment">//f(k,n)  当前的鸡蛋数  k</span></span><br><span class="line">        <span class="comment">//        需要测试的楼层数  n</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] memo = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="comment">//当鸡蛋数只有1时，只能线性扫描所有的楼层 n 有多少层就得扔多少次 注意题目条件是运气差。</span></span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="comment">//当楼层数0是 没法扔鸡蛋</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(memo[k][n]!=<span class="number">99999999</span>)  <span class="comment">//避免重复计算</span></span><br><span class="line">            <span class="keyword">return</span> memo[k][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">99999999</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {  <span class="comment">//穷举所有的可能选择</span></span><br><span class="line">            <span class="comment">//当选择在第i层楼扔了鸡蛋之后 可能出现鸡蛋碎了和鸡蛋没碎两种情况：</span></span><br><span class="line">            <span class="comment">//当鸡蛋碎了 问题状态转嫁为求k-1个鸡蛋 搜索的楼层区间变为1~i-1共i-1层楼时求解</span></span><br><span class="line">            <span class="keyword">int</span> eggBreak=f(k-<span class="number">1</span>,i-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//当鸡蛋没碎 问题状态转嫁为鸡蛋的个数K不变 搜索楼层区间变为i+1~N共N-i层楼时求解</span></span><br><span class="line">            <span class="keyword">int</span> eggUnBreak=f(k,n-i);</span><br><span class="line">            <span class="comment">//最终以i层为切入点求解的答案 为两种状态的最坏情况 并加上i层时操作1 并更新最小值</span></span><br><span class="line"></span><br><span class="line">            result= Math.min(result,</span><br><span class="line">                    Math.max(</span><br><span class="line">                            eggBreak,eggUnBreak</span><br><span class="line">                    )+<span class="number">1</span>    <span class="comment">//1表示在i层时要扔一次</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        memo[k][n]=result;</span><br><span class="line">        <span class="keyword">return</span> memo[k][n];</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸日期类（SimpleDateFormat-Date"><a href="#🌸日期类（SimpleDateFormat-Date" class="headerlink" title="🌸日期类（SimpleDateFormat +Date)"></a>🌸日期类（SimpleDateFormat +Date)</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-mm-dd"</span>);</span><br><span class="line">        Date date1 = format.parse(<span class="string">"1921-7-23"</span>);</span><br><span class="line">        Date date2 = format.parse(<span class="string">"2020- 7-1"</span>);</span><br><span class="line">        <span class="keyword">int</span> a = (<span class="keyword">int</span>)((date2.getTime() - date1.getTime()) / <span class="number">1000</span> * <span class="number">60</span>);<span class="comment">//相隔多少分钟</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接使用 Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">36138</span> * <span class="number">24</span> * <span class="number">60L</span>;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(<span class="number">36138</span> * <span class="number">24</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="comment">// long型变量在定义的时候，如果不加“L”,则默认为int型变量</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date(<span class="number">21</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 1921</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">120</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 2020</span></span><br><span class="line">        <span class="keyword">long</span> time = date2.getTime() - date1.getTime();</span><br><span class="line">        System.out.println(time / (<span class="number">60000</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁"><a href="#🍁" class="headerlink" title="🍁"></a>🍁</h3><h4 id="🍂-fff"><a href="#🍂-fff" class="headerlink" title="🍂 fff"></a>🍂 fff</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🌸&lt;strong&gt;记录蓝桥杯javaB组省赛题目解题方法总结对比&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="蓝桥杯" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
      <category term="总结" scheme="https://liudufu.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="蓝桥杯javaB组省赛" scheme="https://liudufu.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AFjavaB%E7%BB%84%E7%9C%81%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode股票问题系列通解</title>
    <link href="https://liudufu.github.io/general_solutions_to_stock_problems/"/>
    <id>https://liudufu.github.io/general_solutions_to_stock_problems/</id>
    <published>2020-11-08T13:37:04.000Z</published>
    <updated>2020-11-08T13:39:03.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🍁说明"><a href="#🍁说明" class="headerlink" title="🍁说明"></a>🍁说明</h3><p>原文出处：<a href="https://leetcode-cn.com/circle/article/qiAgHn/" target="_blank" rel="noopener">股票问题</a></p><h2 id="🌸前言"><a href="#🌸前言" class="headerlink" title="🌸前言"></a>🌸前言</h2><p>股票问题一共有六道题，链接如下：</p><ul><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">121.买卖股票的最佳时机</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">122.买卖股票的最佳时机 II</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">123. 买卖股票的最佳时机 III</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="noopener">124.买卖股票的最佳时机 IV</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">125.最佳买卖股票时机含冷冻期</a></li><li><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" target="_blank" rel="noopener">126.买卖股票的最佳时机含手续费</a></li></ul><a id="more"></a><p>每个问题都有优质的题解，但是大多数题解没有建立起这些问题之间的联系，也没有给出股票问题系列的通解。这篇文章给出适用于全部股票问题的通解，以及对于每个特定问题的特解。</p><h2 id="🍁通用情况"><a href="#🍁通用情况" class="headerlink" title="🍁通用情况"></a>🍁通用情况</h2><p>这个想法基于如下问题：<strong>给定一个表示每天股票价格的数组，什么因素决定了可以获得的最大收益？</strong></p><p>相信大多数人可以很快给出答案，例如「在哪些天进行交易以及允许多少次交易」。这些因素当然重要，在问题描述中也有这些因素。然而还有一个隐藏但是关键的因素决定了最大收益，下文将阐述这一点。</p><p>首先介绍一些符号：</p><ul><li>用 <code>n</code> 表示股票价格数组的长度；<br>用 <code>i</code> 表示第 i 天（i 的取值范围是 0 到 n - 1）；<br>用 <code>k</code> 表示允许的最大交易次数；<br>用 <code>T[i][k]</code> 表示在第 <code>i</code> 天结束时，最多进行 <code>k</code> 次交易的情况下可以获得的最大收益。</li></ul><p>基准情况是显而易见的：<code>T[-1][k] = T[i][0] = 0</code>，表示没有进行股票交易时没有收益（注意第一天对应 <code>i = 0</code>，因此 <code>i = -1</code> 表示没有股票交易）。现在如果可以将 <code>T[i][k]</code> 关联到子问题，例如 <code>T[i - 1][k]、T[i][k - 1]、T[i - 1][k - 1]</code> 等子问题，就能得到状态转移方程，并对这个问题求解。如何得到状态转移方程呢？</p><p>最直接的办法是看第 <code>i</code> 天可能的操作。有多少个选项？答案是三个：<strong>买入、卖出、休息</strong>。应该选择哪个操作？答案是：并不知道哪个操作是最好的，但是可以通过计算得到选择每个操作可以得到的最大收益。假设没有别的限制条件，则可以尝试每一种操作，并选择可以最大化收益的一种操作。但是，题目中确实有限制条件，规定不能同时进行多次交易，因此如果决定在第 <code>i</code> 天<strong>买入</strong>，在买入之前必须持有 0 份股票，如果决定在第 <code>i</code> 天<strong>卖出</strong>，在卖出之前必须恰好持有 1 份股票。持有股票的数量是上文提及到的隐藏因素，该因素影响第 i 天可以进行的操作，进而影响最大收益。</p><p>因此对 <code>T[i][k]</code> 的定义需要分成两项：</p><ul><li><code>T[i][k][0]</code> 表示在第 <code>i</code> 天结束时，<strong>最多</strong>进行 <code>k</code> 次交易且在进行操作后持有 0 份股票的情况下可以获得的最大收益；</li><li><code>T[i][k][1]</code> 表示在第 <code>i</code> 天结束时，<strong>最多</strong>进行 <code>k</code> 次交易且在进行操作后持有 1 份股票的情况下可以获得的最大收益。</li></ul><p>使用新的状态表示之后，可以得到基准情况和状态转移方程。</p><p>基准情况：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[-1][k][0] = 0, T[-1][k][1] = -Infinity</span><br><span class="line">T[i][0][0] = 0, T[i][0][1] = -Infinity</span><br></pre></td></tr></tbody></table></figure><p>状态转移方程：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k - 1][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>基准情况中，<code>T[-1][k][0] = T[i][0][0] = 0</code> 的含义和上文相同，<code>T[-1][k][1] = T[i][0][1] = -Infinity</code> 的含义是在没有进行股票交易时不允许持有股票。</p><p>对于状态转移方程中的 <code>T[i][k][0]</code>，第 <code>i</code> 天进行的操作只能是休息或卖出，因为在第 <code>i</code> 天结束时持有的股票数量是 0。<code>T[i - 1][k][0]</code> 是休息操作可以得到的最大收益，<code>T[i - 1][k][1] + prices[i]</code> 是卖出操作可以得到的最大收益。注意到允许的最大交易次数是不变的，因为每次交易包含两次成对的操作，买入和卖出。只有买入操作会改变允许的最大交易次数。</p><p>对于状态转移方程中的 <code>T[i][k][1]</code>，第 <code>i</code> 天进行的操作只能是休息或买入，因为在第 <code>i</code> 天结束时持有的股票数量是 1。<code>T[i - 1][k][1]</code> 是休息操作可以得到的最大收益，<code>T[i - 1][k - 1][0] - prices[i]</code> 是买入操作可以得到的最大收益。注意到允许的最大交易次数减少了一次，因为每次买入操作会使用一次交易。</p><p>为了得到最后一天结束时的最大收益，可以遍历股票价格数组，根据状态转移方程计算 <code>T[i][k][0]</code> 和 <code>T[i][k][1]</code> 的值。最终答案是 <code>T[n - 1][k][0]</code>，因为结束时持有 0 份股票的收益一定大于持有 1 份股票的收益。</p><h2 id="🍁应用于特殊情况"><a href="#🍁应用于特殊情况" class="headerlink" title="🍁应用于特殊情况"></a>🍁应用于特殊情况</h2><p>上述六个股票问题是根据 <code>k</code> 的值进行分类的，其中 <code>k</code> 是允许的最大交易次数。最后两个问题有附加限制，包括「冷冻期」和「手续费」。通解可以应用于每个股票问题。</p><h4 id="情况一：k-1"><a href="#情况一：k-1" class="headerlink" title="情况一：k = 1"></a><strong>情况一：k = 1</strong></h4><p>情况一对应的题目是<strong>「121. 买卖股票的最佳时机」</strong>。</p><p>对于情况一，每天有两个未知变量：<code>T[i][1][0]</code> 和 <code>T[i][1][1]</code>，状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][1][0] = max(T[i - 1][1][0], T[i - 1][1][1] + prices[i])</span><br><span class="line">T[i][1][1] = max(T[i - 1][1][1], T[i - 1][0][0] - prices[i]) = max(T[i - 1][1][1], -prices[i])</span><br></pre></td></tr></tbody></table></figure><p>第二个状态转移方程利用了 <code>T[i][0][0] = 0</code>。</p><p>根据上述状态转移方程，可以写出时间复杂度为 O(n)和空间复杂度为 O(n) 的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天的最大收益相关，空间复杂度可以降到 O(1)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            profit0 = Math.max(profit0, profit1 + prices[i]);</span><br><span class="line">            profit1 = Math.max(profit1, -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在对上述解法进行分析。对于循环中的部分，<code>profit1</code> 实际上只是表示到第 <code>i</code> 天的股票价格的相反数中的最大值，或者等价地表示到第 <code>i</code> 天的股票价格的最小值。对于 <code>profit0</code>，只需要决定卖出和休息中的哪项操作可以得到更高的收益。如果进行卖出操作，则买入股票的价格为 <code>profit1</code>，即第 i 天之前（不含第 <code>i</code> 天）的最低股票价格。这正是现实中为了获得最大收益会做的事情。但是这种做法不是唯一适用于这种情况的解决方案。读者可能在 这里 找到别的好的解决方案。</p><h4 id="情况二：k-为正无穷"><a href="#情况二：k-为正无穷" class="headerlink" title="情况二：k 为正无穷"></a><strong>情况二：k 为正无穷</strong></h4><p>情况二对应的题目是<strong>「122. 买卖股票的最佳时机 II」。</strong></p><p>如果 k 为正无穷，则 <code>k</code> 和 k - 1 可以看成是相同的，因此有 <code>T[i - 1][k - 1][0] = T[i - 1][k][0]</code> 和 <code>T[i - 1][k - 1][1] = T[i - 1][k][1]</code>。每天仍有两个未知变量：<code>T[i][k][0]</code> 和 <code>T[i][k][1]</code>，其中 <code>~k~</code> 为正无穷，状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k - 1][0] - prices[i]) = max(T[i - 1][k][1], T[i - 1][k][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>第二个状态转移方程利用了 <code>T[i - 1][k - 1][0] = T[i - 1][k][0]</code>。</p><p>根据上述状态转移方程，可以写出时间复杂度为 O(n) 和空间复杂度为 O(n) 的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天的最大收益相关，空间复杂度可以降到 O(1)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">int</span> newProfit0 = Math.max(profit0, profit1 + prices[i]);</span><br><span class="line">            <span class="keyword">int</span> newProfit1 = Math.max(profit1, profit0 - prices[i]);</span><br><span class="line">            profit0 = newProfit0;</span><br><span class="line">            profit1 = newProfit1;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个解法提供了获得最大收益的贪心策略：可能的情况下，在每个局部最小值买入股票，然后在之后遇到的第一个局部最大值卖出股票。这个做法等价于找到股票价格数组中的递增子数组，对于每个递增子数组，在开始位置买入并在结束位置卖出。可以看到，这和累计收益是相同的，只要这样的操作的收益为正。</p><h4 id="情况三：k-2"><a href="#情况三：k-2" class="headerlink" title="情况三：k = 2"></a>情况三：k = 2</h4><p>情况三对应的题目是<strong>「123. 买卖股票的最佳时机 III」</strong>。</p><p>情况三和情况一相似，区别之处是，对于情况三，每天有四个未知变量：<code>T[i][1][0]、T[i][1][1]、T[i][2][0]、T[i][2][1]</code>，状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T[i][2][0] = max(T[i - 1][2][0], T[i - 1][2][1] + prices[i])</span><br><span class="line">T[i][2][1] = max(T[i - 1][2][1], T[i - 1][1][0] - prices[i])</span><br><span class="line">T[i][1][0] = max(T[i - 1][1][0], T[i - 1][1][1] + prices[i])</span><br><span class="line">T[i][1][1] = max(T[i - 1][1][1], T[i - 1][0][0] - prices[i]) = max(T[i - 1][1][1], -prices[i])</span><br></pre></td></tr></tbody></table></figure><p>第四个状态转移方程利用了 <code>T[i][0][0] = 0</code>。</p><p>根据上述状态转移方程，可以写出时间复杂度为 O(n)和空间复杂度为 O(n)的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">2</span>][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">2</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">2</span>][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天的最大收益相关，空间复杂度可以降到 O(1)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profitOne0 = <span class="number">0</span>, profitOne1 = -prices[<span class="number">0</span>], profitTwo0 = <span class="number">0</span>, profitTwo1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            profitTwo0 = Math.max(profitTwo0, profitTwo1 + prices[i]);</span><br><span class="line">            profitTwo1 = Math.max(profitTwo1, profitOne0 - prices[i]);</span><br><span class="line">            profitOne0 = Math.max(profitOne0, profitOne1 + prices[i]);</span><br><span class="line">            profitOne1 = Math.max(profitOne1, -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profitTwo0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="情况四：k-为任意值"><a href="#情况四：k-为任意值" class="headerlink" title="情况四：k 为任意值"></a>情况四：k 为任意值</h4><p>情况四对应的题目是<strong>「188. 买卖股票的最佳时机 IV」。</strong></p><p>情况四是最通用的情况，对于每一天需要使用不同的 <code>k</code> 值更新所有的最大收益，对应持有 0 份股票或 1 份股票。如果 <code>k</code> 超过一个临界值，最大收益就不再取决于允许的最大交易次数，而是取决于股票价格数组的长度，因此可以进行优化。那么这个临界值是什么呢？</p><p>一个有收益的交易至少需要两天（在前一天买入，在后一天卖出，前提是买入价格低于卖出价格）。如果股票价格数组的长度为 n，则有收益的交易的数量最多为 n / 2（整数除法）。因此 k 的临界值是 <code>n / 2</code>。如果给定的 k 不小于临界值，即 <code>k &gt;= n / 2</code>，则可以将 k 扩展为正无穷，此时问题等价于情况二。</p><p>根据状态转移方程，可以写出时间复杂度为 O(nk) 和空间复杂度为 O(nk) 的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= length / <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> maxProfit(prices);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) {</span><br><span class="line">            dp[<span class="number">0</span>][i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            dp[<span class="number">0</span>][i][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt; <span class="number">0</span>; j--) {</span><br><span class="line">                dp[i][j][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][j][<span class="number">0</span>], dp[i - <span class="number">1</span>][j][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                dp[i][j][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][j][<span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][k][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天的最大收益相关，空间复杂度可以降到 O(k)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= length / <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> maxProfit(prices);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            dp[i][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt; <span class="number">0</span>; j--) {</span><br><span class="line">                dp[j][<span class="number">0</span>] = Math.max(dp[j][<span class="number">0</span>], dp[j][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                dp[j][<span class="number">1</span>] = Math.max(dp[j][<span class="number">1</span>], dp[j - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[k][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">int</span> newProfit0 = Math.max(profit0, profit1 + prices[i]);</span><br><span class="line">            <span class="keyword">int</span> newProfit1 = Math.max(profit1, profit0 - prices[i]);</span><br><span class="line">            profit0 = newProfit0;</span><br><span class="line">            profit1 = newProfit1;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果不根据 <code>k</code> 的值进行优化，在 <code>k</code> 的值很大的时候会超出时间限制。</p><p>该解法与 <a href="https://discuss.leetcode.com/topic/8984/a-concise-dp-solution-in-java" target="_blank" rel="noopener">这里</a> 的解法相似。对交易次数的循环使用反向循环是为了避免使用临时变量。</p><h4 id="情况五：k-为正无穷但有冷却时间"><a href="#情况五：k-为正无穷但有冷却时间" class="headerlink" title="情况五：k 为正无穷但有冷却时间"></a>情况五：k 为正无穷但有冷却时间</h4><p>情况五对应的题目是<strong>「309. 最佳买卖股票时机含冷冻期」。</strong></p><p>由于具有相同的 <code>k</code> 值，因此情况五和情况二非常相似，不同之处在于情况五有「冷却时间」的限制，因此需要对状态转移方程进行一些修改。</p><p>情况二的状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>但是在有「冷却时间」的情况下，如果在第 <code>i - 1</code> 天卖出了股票，就不能在第 i 天买入股票。因此，如果要在第 i 天买入股票，第二个状态转移方程中就不能使用 <code>T[i - 1][k][0]</code>，而应该使用 <code>T[i - 2][k][0]</code>。状态转移方程中的别的项保持不变，新的状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 2][k][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>根据上述状态转移方程，可以写出时间复杂度为 O(n) 和空间复杂度为 O(n)的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], (i &gt;= <span class="number">2</span> ? dp[i - <span class="number">2</span>][<span class="number">0</span>] : <span class="number">0</span>) - prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天和第 <code>i - 2</code> 天的最大收益相关，空间复杂度可以降到 O(1)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> prevProfit0 = <span class="number">0</span>, profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">int</span> nextProfit0 = Math.max(profit0, profit1 + prices[i]);</span><br><span class="line">            <span class="keyword">int</span> nextProfit1 = Math.max(profit1, prevProfit0 - prices[i]);</span><br><span class="line">            prevProfit0 = profit0;</span><br><span class="line">            profit0 = nextProfit0;</span><br><span class="line">            profit1 = nextProfit1;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.com/dietpepsi" target="_blank" rel="noopener">dietpepsi</a> 在 <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75927/share-my-thinking-process" target="_blank" rel="noopener">这里</a> 分享了一个很好的解法，并加入了思考过程，该解法和上面的解法是相同的。</p><h4 id="情况六：k-为正无穷但有手续费"><a href="#情况六：k-为正无穷但有手续费" class="headerlink" title="情况六：k 为正无穷但有手续费"></a>情况六：k 为正无穷但有手续费</h4><p>情况六对应的题目是<strong>「714. 买卖股票的最佳时机含手续费」。</strong></p><p>由于具有相同的 <code>k</code> 值，因此情况六和情况二非常相似，不同之处在于情况六有「手续费」，因此需要对状态转移方程进行一些修改。</p><p>情况二的状态转移方程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>由于需要对每次交易付手续费，因此在每次买入或卖出股票之后的收益需要扣除手续费，新的状态转移方程有两种表示方法。</p><p>第一种表示方法，在每次买入股票时扣除手续费：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i])</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k][0] - prices[i] - fee)</span><br></pre></td></tr></tbody></table></figure><p>第二种表示方法，在每次卖出股票时扣除手续费：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][0] = max(T[i - 1][k][0], T[i - 1][k][1] + prices[i] - fee)</span><br><span class="line">T[i][k][1] = max(T[i - 1][k][1], T[i - 1][k][0] - prices[i])</span><br></pre></td></tr></tbody></table></figure><p>根据上述状态转移方程，可以写出时间复杂度为 O(n) 和空间复杂度为 O(n)的解法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>] - fee;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i] - fee);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果注意到第 <code>i</code> 天的最大收益只和第 <code>i - 1</code> 天的最大收益相关，空间复杂度可以降到 O(1)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>] - fee;</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">int</span> newProfit0 = Math.max(profit0, profit1 + prices[i]);</span><br><span class="line">            <span class="keyword">int</span> newProfit1 = Math.max(profit1, profit0 - prices[i] - fee);</span><br><span class="line">            profit0 = newProfit0;</span><br><span class="line">            profit1 = newProfit1;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> profit0 = <span class="number">0</span>, profit1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = prices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">int</span> newProfit0 = Math.max(profit0, profit1 + prices[i] - fee);</span><br><span class="line">            <span class="keyword">int</span> newProfit1 = Math.max(profit1, profit0 - prices[i]);</span><br><span class="line">            profit0 = newProfit0;</span><br><span class="line">            profit1 = newProfit1;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> profit0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="🍁三、总结"><a href="#🍁三、总结" class="headerlink" title="🍁三、总结"></a>🍁三、总结</h3><p>总而言之，股票问题最通用的情况由三个特征决定：当前的天数 <code>i</code>、允许的最大交易次数 <code>k</code> 以及每天结束时持有的股票数。这篇文章阐述了最大利润的状态转移方程和终止条件，由此可以得到时间复杂度为 O(nk) 和空间复杂度为 O(k) 的解法。该解法可以应用于六个问题，对于最后两个问题，需要将状态转移方程进行一些修改。这里推荐 <a href="https://leetcode.com/peterleetcode/" target="_blank" rel="noopener">peterleetcode</a> 的 <a href="https://discuss.leetcode.com/topic/4766/a-clean-dp-solution-which-generalizes-to-k-transactions" target="_blank" rel="noopener">解法</a>，该解法可以推广到任意的 <code>k</code> 值，感兴趣的读者可以进行阅读。</p><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;🍁说明&quot;&gt;&lt;a href=&quot;#🍁说明&quot; class=&quot;headerlink&quot; title=&quot;🍁说明&quot;&gt;&lt;/a&gt;🍁说明&lt;/h3&gt;&lt;p&gt;原文出处：&lt;a href=&quot;https://leetcode-cn.com/circle/article/qiAgHn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;股票问题&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;🌸前言&quot;&gt;&lt;a href=&quot;#🌸前言&quot; class=&quot;headerlink&quot; title=&quot;🌸前言&quot;&gt;&lt;/a&gt;🌸前言&lt;/h2&gt;&lt;p&gt;股票问题一共有六道题，链接如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;121.买卖股票的最佳时机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;122.买卖股票的最佳时机 II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;123. 买卖股票的最佳时机 III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;124.买卖股票的最佳时机 IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;125.最佳买卖股票时机含冷冻期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;126.买卖股票的最佳时机含手续费&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="动态规划" scheme="https://liudufu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="股票问题" scheme="https://liudufu.github.io/tags/%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/"/>
    
      <category term="动态规划的优化" scheme="https://liudufu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>动态规划_leetcode.121.买卖股票的最佳时期</title>
    <link href="https://liudufu.github.io/The_best_time_to_buy_and_sell_stocks/"/>
    <id>https://liudufu.github.io/The_best_time_to_buy_and_sell_stocks/</id>
    <published>2020-11-08T13:34:39.000Z</published>
    <updated>2020-11-08T13:36:44.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p><p>注意：你不能在买入股票前卖出股票。</p><a id="more"></a><p>示例 1:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0</span><br></pre></td></tr></tbody></table></figure><h2 id="解法一：暴力解法"><a href="#解法一：暴力解法" class="headerlink" title="解法一：暴力解法"></a>解法一：暴力解法</h2><blockquote><p>暴力求解，不解释。</p><p>枚举所有发生一次交易的股价差</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> len = prices.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有可能不发生交易，因此结果集的初始值设置为 0</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举所有发生一次交易的股价差</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) {</span><br><span class="line">            res = Math.max(res, prices[j] - prices[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="解法二：动态规划"><a href="#解法二：动态规划" class="headerlink" title="解法二：动态规划"></a>解法二：动态规划</h2><p>题目只问最大利润，没有问这几天具体哪一天买、哪一天卖，因此可以考虑使用 动态规划 的方法来解决。</p><p>买卖股票有约束，根据题目意思，有以下两个约束条件：</p><ul><li>条件 1：你不能在买入股票前卖出股票；</li><li>条件 2：最多只允许完成一笔交易。</li></ul><p>因此 <strong>当天是否持股</strong> 是一个很重要的因素，而当前是否持股和昨天是否持股有关系，为此我们需要把 <strong>是否持股</strong> 设计到状态数组中。</p><p><strong>状态定义：</strong></p><p><code>dp[i] [j]</code>：下标为 <code>i</code> 这一天结束的时候，手上持股状态为 j 时，我们持有的现金数。</p><ul><li>j = 0，表示当前不持股；</li><li>j = 1，表示当前持股。</li></ul><p><strong>注意</strong>：这个状态具有前缀性质，下标为 i 的这一天的计算结果包含了区间 [0, i] 所有的信息，因此最后输出 dp[len - 1] [0]。</p><p><strong>说明：</strong></p><ul><li>使用「现金数」这个说法主要是为了体现 买入股票手上的现金数减少，卖出股票手上的现金数增加 这个事实；</li><li>「现金数」等价于题目中说的「利润」，即先买入这只股票，后买入这只股票的差价；</li><li>因此在刚开始的时候，我们的手上肯定是有一定现金数能够买入这只股票，即刚开始的时候现金数肯定不为 00，但是写代码的时候可以设置为 0。极端情况下（股价数组为 [5, 4, 3, 2, 1]），此时不发生交易是最好的（这一点是补充说明，限于我的表达，希望不要给大家造成迷惑）。</li></ul><p><strong>推导状态转移方程：</strong></p><p>dp[i] [0]：规定了今天不持股，有以下两种情况：</p><ul><li><p>昨天不持股，今天什么都不做；</p></li><li><p>昨天持股，今天卖出股票（现金数增加），<br>dp[i] [1]：规定了今天持股，有以下两种情况：</p></li><li><p>昨天持股，今天什么都不做（现金数增加）；</p></li><li><p>昨天不持股，今天买入股票（注意：只允许交易一次，因此手上的现金数就是当天的股价的相反数）。<br>状态转移方程请见 参考代码 2。</p></li></ul><p>知识点：</p><ul><li>多阶段决策问题：动态规划常常用于求解多阶段决策问题；</li><li>无后效性：每一天是否持股设计成状态变量的一维。状态设置具体，推导状态转移方程方便</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = prices.length;</span><br><span class="line">        <span class="comment">// 特殊判断</span></span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[i][0] 下标为 i 这天结束的时候，不持股，手上拥有的现金数</span></span><br><span class="line">        <span class="comment">// dp[i][1] 下标为 i 这天结束的时候，持股，手上拥有的现金数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化：不持股显然为 0，持股就需要减去第 1 天（下标为 0）的股价</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从第 2 天开始遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="解法三：-滚动数组优化"><a href="#解法三：-滚动数组优化" class="headerlink" title="解法三： 滚动数组优化"></a>解法三： 滚动数组优化</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>java</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = prices.length;</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">            dp[i % <span class="number">2</span>][<span class="number">0</span>] = Math.max(dp[(i - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">0</span>], dp[(i - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i % <span class="number">2</span>][<span class="number">1</span>] = Math.max(dp[(i - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[(len - <span class="number">1</span>) &amp; <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>% 2</code> 还可以写成 <code>&amp; 1</code>，这里为了保证可读性，选用 <code>% 2</code>。</p><h2 id="解法四：-空间优化"><a href="#解法四：-空间优化" class="headerlink" title="解法四： 空间优化"></a>解法四： 空间优化</h2><p>空间优化只看状态转移方程。</p><p>状态转移方程里下标为 i 的行只参考下标为 i - 1 的行（即只参考上一行），并且：</p><ul><li>下标为 i 的行并且状态为 0 的行参考了上一行状态为 0 和 1 的行；</li><li>下标为 i 的行并且状态为 1 的行只参考了上一行状态为 1 的行。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = prices.length;</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">            dp[<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>], dp[<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[<span class="number">1</span>] = Math.max(dp[<span class="number">1</span>], -prices[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。&lt;/p&gt;
&lt;p&gt;如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。&lt;/p&gt;
&lt;p&gt;注意：你不能在买入股票前卖出股票。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="动态规划" scheme="https://liudufu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="暴力解法" scheme="https://liudufu.github.io/tags/%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95/"/>
    
      <category term="滚动数组" scheme="https://liudufu.github.io/tags/%E6%BB%9A%E5%8A%A8%E6%95%B0%E7%BB%84/"/>
    
      <category term="常数优化" scheme="https://liudufu.github.io/tags/%E5%B8%B8%E6%95%B0%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>高级树_LeetCode.327_区间和的个数</title>
    <link href="https://liudufu.github.io/The_number_of_interval_sums/"/>
    <id>https://liudufu.github.io/The_number_of_interval_sums/</id>
    <published>2020-11-08T13:32:11.000Z</published>
    <updated>2020-11-08T13:34:19.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🌸题目"><a href="#🌸题目" class="headerlink" title="🌸题目"></a>🌸题目</h2><p>🍁给定一个整数数组 nums，返回区间和在 [lower, upper] 之间的个数，包含 lower 和 upper。<br>区间和 S(i, j) 表示在 nums 中，位置从 i 到 j 的元素之和，包含 i 和 j (i ≤ j)。</p><p>说明:<br>最直观的算法复杂度是 O(n2) ，请在此基础上优化你的算法。</p><a id="more"></a><p>示例:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-2,5,-1], lower = -2, upper = 2,</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 3个区间分别是: [0,0], [2,2], [0,2]，它们表示的和分别为: -2, -1, 2。</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法一：归并排序"><a href="#🌸解法一：归并排序" class="headerlink" title="🌸解法一：归并排序"></a>🌸解法一：归并排序</h2><p>设前缀和数组为 $\textit{preSum}$，则问题等价于求所有的下标对(<em>i</em>,<em>j</em>)，满足</p><p><em>preSum</em>[<em>j</em>]−<em>preSum</em>[<em>i</em>]∈[<em>lower</em>,<em>upper</em>]</p><p><code>我们先考虑如下的问题</code>：给定两个<strong>升序排列</strong>的数组 n1,<em>n</em>2，试找出所有的下标对 (i,j)，满足<em>n</em>2[<em>j</em>]−<em>n</em>1[<em>i</em>]∈[<em>lower</em>,<em>upper</em>]</p><p>在已知两个数组均为升序的情况下，这一问题是相对简单的：我们在 n2中维护两个指针 l,r。起初，它们都指向 n 2 的起始位置。随后，我们考察 n 1 的第一个元素。首先，不断地将指针 l 向右移动，直到$$ n_2[l] \ge n_1[0] + \textit{lower}$$为止，此时， ll 及其右边的元素均大于或等于 $n_1[0] + \textit{lower}$；随后，再不断地将指针 r 向右移动，直到 $n_2[r] &gt; n_1[0] + \textit{upper}$为止，则 r左边的元素均小于或等于 $n_1[0] + \textit{upper}$,故区间 [l,r) 中的所有下标 j，都满足<em>n</em>2[<em>j</em>]−<em>n</em>1[0]∈[<em>lower</em>,<em>upper</em>]</p><p>接下来，我们考察 n 1 的第二个元素。由于n1 是递增的，不难发现 l,r 只可能向右移动。因此，我们不断地进行上述过程，并对于 n 1中的每一个下标，都记录相应的区间 [l,r) 的大小。最终，我们就统计得到了满足条件的下标对 (i,j) 的数量。</p><p>在解决这一问题后，原问题就迎刃而解了：我们采用归并排序的方式，能够得到左右两个数组排序后的形式，以及对应的下标对数量。对于原数组而言，若要找出全部的下标对数量，只需要再额外找出左端点在左侧数组，同时右端点在右侧数组的下标对数量，而这正是我们此前讨论的问题。</p><p>代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span>[] sum = <span class="keyword">new</span> <span class="keyword">long</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            s += nums[i];</span><br><span class="line">            sum[i + <span class="number">1</span>] = s;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> countRangeSumRecursive(sum, lower, upper, <span class="number">0</span>, sum.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSumRecursive</span><span class="params">(<span class="keyword">long</span>[] sum, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (left == right) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> n1 = countRangeSumRecursive(sum, lower, upper, left, mid);</span><br><span class="line">            <span class="keyword">int</span> n2 = countRangeSumRecursive(sum, lower, upper, mid + <span class="number">1</span>, right);</span><br><span class="line">            <span class="keyword">int</span> ret = n1 + n2;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 首先统计下标对的数量</span></span><br><span class="line">            <span class="keyword">int</span> i = left;</span><br><span class="line">            <span class="keyword">int</span> l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> r = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt;= mid) {</span><br><span class="line">                <span class="keyword">while</span> (l &lt;= right &amp;&amp; sum[l] - sum[i] &lt; lower) {</span><br><span class="line">                    l++;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">while</span> (r &lt;= right &amp;&amp; sum[r] - sum[i] &lt;= upper) {</span><br><span class="line">                    r++;</span><br><span class="line">                }</span><br><span class="line">                ret += r - l;</span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 随后合并两个排序数组</span></span><br><span class="line">            <span class="keyword">int</span>[] sorted = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> p1 = left, p2 = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (p1 &lt;= mid || p2 &lt;= right) {</span><br><span class="line">                <span class="keyword">if</span> (p1 &gt; mid) {</span><br><span class="line">                    sorted[p++] = (<span class="keyword">int</span>) sum[p2++];</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (p2 &gt; right) {</span><br><span class="line">                    sorted[p++] = (<span class="keyword">int</span>) sum[p1++];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">if</span> (sum[p1] &lt; sum[p2]) {</span><br><span class="line">                        sorted[p++] = (<span class="keyword">int</span>) sum[p1++];</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        sorted[p++] = (<span class="keyword">int</span>) sum[p2++];</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sorted.length; j++) {</span><br><span class="line">                sum[left + j] = sorted[j];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法二：线段树"><a href="#🌸解法二：线段树" class="headerlink" title="🌸解法二：线段树"></a>🌸解法二：线段树</h2><p>依然考虑前缀和数组$ \textit{preSum}$</p><p>对于每个下标 j，以 j 为右端点的下标对的数量，就等于数组 $\textit{preSum}$[0..j-1] 中的所有整数，出现在区间$ [\textit{preSum}[j]-\textit{upper}, \textit{preSum}[j]-\textit{lower}]$ 的次数。故很容易想到基于线段树的解法。</p><p>我们从左到右扫描前缀和数组。每遇到一个数$ \textit{preSum}[j]$，我们就在线段树中查询区间$ [\textit{preSum}[j]-\textit{upper}, \textit{preSum}[j]-\textit{lower}]$内的整数数量，随后，将 $\textit{preSum}[j]$ 插入到线段树当中。</p><p>注意到整数的范围可能很大，故需要利用哈希表将所有可能出现的整数，映射到连续的整数区间内。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span>[] preSum = <span class="keyword">new</span> <span class="keyword">long</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            preSum[i + <span class="number">1</span>] = sum;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        Set&lt;Long&gt; allNumbers = <span class="keyword">new</span> TreeSet&lt;Long&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            allNumbers.add(x);</span><br><span class="line">            allNumbers.add(x - lower);</span><br><span class="line">            allNumbers.add(x - upper);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 利用哈希表进行离散化</span></span><br><span class="line">        Map&lt;Long, Integer&gt; values = <span class="keyword">new</span> HashMap&lt;Long, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : allNumbers) {</span><br><span class="line">            values.put(x, idx);</span><br><span class="line">            idx++;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        SegNode root = build(<span class="number">0</span>, values.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            <span class="keyword">int</span> left = values.get(x - upper), right = values.get(x - lower);</span><br><span class="line">            ret += count(root, left, right);</span><br><span class="line">            insert(root, values.get(x));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SegNode <span class="title">build</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span><br><span class="line">        SegNode node = <span class="keyword">new</span> SegNode(left, right);</span><br><span class="line">        <span class="keyword">if</span> (left == right) {</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        node.lchild = build(left, mid);</span><br><span class="line">        node.rchild = build(mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(SegNode root, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (left &gt; root.hi || right &lt; root.lo) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= root.lo &amp;&amp; root.hi &lt;= right) {</span><br><span class="line">            <span class="keyword">return</span> root.add;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count(root.lchild, left, right) + count(root.rchild, left, right);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(SegNode root, <span class="keyword">int</span> val)</span> </span>{</span><br><span class="line">        root.add++;</span><br><span class="line">        <span class="keyword">if</span> (root.lo == root.hi) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> mid = (root.lo + root.hi) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (val &lt;= mid) {</span><br><span class="line">            insert(root.lchild, val);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            insert(root.rchild, val);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegNode</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> lo, hi, add;</span><br><span class="line">    SegNode lchild, rchild;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegNode</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span><br><span class="line">        lo = left;</span><br><span class="line">        hi = right;</span><br><span class="line">        add = <span class="number">0</span>;</span><br><span class="line">        lchild = <span class="keyword">null</span>;</span><br><span class="line">        rchild = <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法三：动态增加节点的线段树"><a href="#🌸解法三：动态增加节点的线段树" class="headerlink" title="🌸解法三：动态增加节点的线段树"></a>🌸解法三：动态增加节点的线段树</h2><p>与方法二类似，但我们可以不实用哈希表进行映射，而是只在线段树的插入操作过程中动态地增加树中的节点。而当我们进行查询操作时，如果到达一个空节点，那么说明对应的区间中暂时还没有值，就可以直接返回 0。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span>[] preSum = <span class="keyword">new</span> <span class="keyword">long</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            preSum[i + <span class="number">1</span>] = sum;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> lbound = Long.MAX_VALUE, rbound = Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            lbound = Math.min(Math.min(lbound, x), Math.min(x - lower, x - upper));</span><br><span class="line">            rbound = Math.max(Math.max(rbound, x), Math.max(x - lower, x - upper));</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        SegNode root = <span class="keyword">new</span> SegNode(lbound, rbound);</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            ret += count(root, x - upper, x - lower);</span><br><span class="line">            insert(root, x);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(SegNode root, <span class="keyword">long</span> left, <span class="keyword">long</span> right)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (left &gt; root.hi || right &lt; root.lo) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= root.lo &amp;&amp; root.hi &lt;= right) {</span><br><span class="line">            <span class="keyword">return</span> root.add;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count(root.lchild, left, right) + count(root.rchild, left, right);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(SegNode root, <span class="keyword">long</span> val)</span> </span>{</span><br><span class="line">        root.add++;</span><br><span class="line">        <span class="keyword">if</span> (root.lo == root.hi) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">long</span> mid = (root.lo + root.hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (val &lt;= mid) {</span><br><span class="line">            <span class="keyword">if</span> (root.lchild == <span class="keyword">null</span>) {</span><br><span class="line">                root.lchild = <span class="keyword">new</span> SegNode(root.lo, mid);</span><br><span class="line">            }</span><br><span class="line">            insert(root.lchild, val);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (root.rchild == <span class="keyword">null</span>) {</span><br><span class="line">                root.rchild = <span class="keyword">new</span> SegNode(mid + <span class="number">1</span>, root.hi);</span><br><span class="line">            }</span><br><span class="line">            insert(root.rchild, val);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegNode</span> </span>{</span><br><span class="line">    <span class="keyword">long</span> lo, hi;</span><br><span class="line">    <span class="keyword">int</span> add;</span><br><span class="line">    SegNode lchild, rchild;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegNode</span><span class="params">(<span class="keyword">long</span> left, <span class="keyword">long</span> right)</span> </span>{</span><br><span class="line">        lo = left;</span><br><span class="line">        hi = right;</span><br><span class="line">        add = <span class="number">0</span>;</span><br><span class="line">        lchild = <span class="keyword">null</span>;</span><br><span class="line">        rchild = <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法四：树状数组"><a href="#🌸解法四：树状数组" class="headerlink" title="🌸解法四：树状数组"></a>🌸解法四：树状数组</h2><p>树状数组与线段树基于类似的思想，不过树状数组支持的基本查询为求出 $[0, \textit{val}]$ 之间的整数数量。为了查询区间$ [\textit{preSum}[j]-\textit{upper}, \textit{preSum}[j]-\textit{lower}]$内的整数数量，需要执行两次查询，即分别查询 $[0, \textit{preSum}[j]-\textit{upper}-1]$ 区间的整数数量 L 和$[0,\textit{preSum}[j]-\textit{lower}]$ 区间的整数数量 R，答案即为两者作差 R-L。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span>[] preSum = <span class="keyword">new</span> <span class="keyword">long</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            preSum[i + <span class="number">1</span>] = sum;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        Set&lt;Long&gt; allNumbers = <span class="keyword">new</span> TreeSet&lt;Long&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            allNumbers.add(x);</span><br><span class="line">            allNumbers.add(x - lower);</span><br><span class="line">            allNumbers.add(x - upper);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 利用哈希表进行离散化</span></span><br><span class="line">        Map&lt;Long, Integer&gt; values = <span class="keyword">new</span> HashMap&lt;Long, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x: allNumbers) {</span><br><span class="line">            values.put(x, idx);</span><br><span class="line">            idx++;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        BIT bit = <span class="keyword">new</span> BIT(values.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; preSum.length; i++) {</span><br><span class="line">            <span class="keyword">int</span> left = values.get(preSum[i] - upper), right = values.get(preSum[i] - lower);</span><br><span class="line">            ret += bit.query(right + <span class="number">1</span>) - bit.query(left);</span><br><span class="line">            bit.update(values.get(preSum[i]) + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BIT</span> </span>{</span><br><span class="line">    <span class="keyword">int</span>[] tree;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BIT</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.tree = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= n) {</span><br><span class="line">            tree[x] += d;</span><br><span class="line">            x += lowbit(x);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) {</span><br><span class="line">            ans += tree[x];</span><br><span class="line">            x -= lowbit(x);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法五：平衡二叉搜索树"><a href="#🌸解法五：平衡二叉搜索树" class="headerlink" title="🌸解法五：平衡二叉搜索树"></a>🌸解法五：平衡二叉搜索树</h2><p>考虑一棵平衡二叉搜索树。若其节点数量为 N，则深度为 O(log N)。二叉搜索树能够在 O(logN) 的时间内，对任意给定的值 $\textit{val}$,查询树中所有小于或等于该值的数量。</p><p>因此，我们可以从左到右扫描前缀和数组。对于$ \textit{preSum}[j]$ 而言，首先进行两次查询，得到区间 $[\textit{preSum}[j]-\textit{upper}, \textit{preSum}[j]-\textit{lower}]$内的整数数量；随后再将 $\textit{preSum}[j]$ 插入到平衡树中。</p><p>平衡二叉搜索树有多种不同的实现，最经典的为 AVL 树与红黑树。此外，在算法竞赛中，还包括 Treap、SBT 等数据结构。</p><p>下面给出基于 Treap 的实现。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRangeSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span>[] preSum = <span class="keyword">new</span> <span class="keyword">long</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            preSum[i + <span class="number">1</span>] = sum;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        BalancedTree treap = <span class="keyword">new</span> BalancedTree();</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> x : preSum) {</span><br><span class="line">            <span class="keyword">long</span> numLeft = treap.lowerBound(x - upper);</span><br><span class="line">            <span class="keyword">int</span> rankLeft = (numLeft == Long.MAX_VALUE ? (<span class="keyword">int</span>) (treap.getSize() + <span class="number">1</span>) : treap.rank(numLeft)[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">long</span> numRight = treap.upperBound(x - lower);</span><br><span class="line">            <span class="keyword">int</span> rankRight = (numRight == Long.MAX_VALUE ? (<span class="keyword">int</span>) treap.getSize() : treap.rank(numRight)[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">            ret += rankRight - rankLeft + <span class="number">1</span>;</span><br><span class="line">            treap.insert(x);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BalancedTree</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BalancedNode</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> val;</span><br><span class="line">        <span class="keyword">long</span> seed;</span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        BalancedNode left;</span><br><span class="line">        BalancedNode right;</span><br><span class="line"></span><br><span class="line">        BalancedNode(<span class="keyword">long</span> val, <span class="keyword">long</span> seed) {</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.seed = seed;</span><br><span class="line">            <span class="keyword">this</span>.count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function">BalancedNode <span class="title">leftRotate</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> prevSize = size;</span><br><span class="line">            <span class="keyword">int</span> currSize = (left != <span class="keyword">null</span> ? left.size : <span class="number">0</span>) + (right.left != <span class="keyword">null</span> ? right.left.size : <span class="number">0</span>) + count;</span><br><span class="line">            BalancedNode root = right;</span><br><span class="line">            right = root.left;</span><br><span class="line">            root.left = <span class="keyword">this</span>;</span><br><span class="line">            root.size = prevSize;</span><br><span class="line">            size = currSize;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function">BalancedNode <span class="title">rightRotate</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> prevSize = size;</span><br><span class="line">            <span class="keyword">int</span> currSize = (right != <span class="keyword">null</span> ? right.size : <span class="number">0</span>) + (left.right != <span class="keyword">null</span> ? left.right.size : <span class="number">0</span>) + count;</span><br><span class="line">            BalancedNode root = left;</span><br><span class="line">            left = root.right;</span><br><span class="line">            root.right = <span class="keyword">this</span>;</span><br><span class="line">            root.size = prevSize;</span><br><span class="line">            size = currSize;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BalancedNode root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> Random rand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BalancedTree</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.root = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.rand = <span class="keyword">new</span> Random();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">long</span> x)</span> </span>{</span><br><span class="line">        ++size;</span><br><span class="line">        root = insert(root, x);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lowerBound</span><span class="params">(<span class="keyword">long</span> x)</span> </span>{</span><br><span class="line">        BalancedNode node = root;</span><br><span class="line">        <span class="keyword">long</span> ans = Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (x == node.val) {</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (x &lt; node.val) {</span><br><span class="line">                ans = node.val;</span><br><span class="line">                node = node.left;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                node = node.right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">upperBound</span><span class="params">(<span class="keyword">long</span> x)</span> </span>{</span><br><span class="line">        BalancedNode node = root;</span><br><span class="line">        <span class="keyword">long</span> ans = Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (x &lt; node.val) {</span><br><span class="line">                ans = node.val;</span><br><span class="line">                node = node.left;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                node = node.right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] rank(<span class="keyword">long</span> x) {</span><br><span class="line">        BalancedNode node = root;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (x &lt; node.val) {</span><br><span class="line">                node = node.left;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                ans += (node.left != <span class="keyword">null</span> ? node.left.size : <span class="number">0</span>) + node.count;</span><br><span class="line">                <span class="keyword">if</span> (x == node.val) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{ans - node.count + <span class="number">1</span>, ans};</span><br><span class="line">                }</span><br><span class="line">                node = node.right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{Integer.MIN_VALUE, Integer.MAX_VALUE};</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BalancedNode <span class="title">insert</span><span class="params">(BalancedNode node, <span class="keyword">long</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BalancedNode(x, rand.nextInt());</span><br><span class="line">        }</span><br><span class="line">        ++node.size;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; node.val) {</span><br><span class="line">            node.left = insert(node.left, x);</span><br><span class="line">            <span class="keyword">if</span> (node.left.seed &gt; node.seed) {</span><br><span class="line">                node = node.rightRotate();</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; node.val) {</span><br><span class="line">            node.right = insert(node.right, x);</span><br><span class="line">            <span class="keyword">if</span> (node.right.seed &gt; node.seed) {</span><br><span class="line">                node = node.leftRotate();</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            ++node.count;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法一说明：为什么可以归并"><a href="#🌸解法一说明：为什么可以归并" class="headerlink" title="🌸解法一说明：为什么可以归并"></a>🌸解法一说明：为什么可以归并</h2><p>看完后我明白如果数组是有序的，那么可以容易的求出区间数量，那么为什么对数组排序前后所求的区间数量不会改变呢，下面我来说明一下（官方并没有实际说明这一点）</p><p><strong>初始归并：</strong><br>此时只会有0或1个元素，不涉及左右两段的情况，是可以的</p><p><strong>合并归并：</strong>此时是有左右两段的，左右两段是分别有序的，<strong>对前缀和数组排序并不会修改数组中元素的值，只是改变了元素是位置，如对left ~ right=3~5位置的前缀和排序，排序后前缀和3 ~ 5位置的数还是原来3 ~ 5位置的数，只是排列变化了</strong></p><p>设想一个一般的情况，现在是某一层的递归，左，右两段区间left ~ mid, mid+1 ~ right的符合要求的区间数量已经通过countRangeSumRecursive计算了出来，整个left ~ right区间中可能的符合要求的区间情况是两端点在left ~ mid中；两端点在mid+1 ~ right；一个端点在left~ mid中，一个端点在mid+1~ right中，所以现在只要求出第三种情况的区间数量就可以了<br>通过上面的说明，left ~ mid,mid+1~ right区间中的数还是原来区间中的数，只是顺序变成了有序，而有序是容易计算符合要求的区间数量的，一个图说明为什么第三种情况排序前后符合数量的区间数量是不变的</p><h2 id="🌸指路：如何学习本题的算法和数据结构"><a href="#🌸指路：如何学习本题的算法和数据结构" class="headerlink" title="🌸指路：如何学习本题的算法和数据结构"></a>🌸指路：如何学习本题的算法和数据结构</h2><p>忽略官方题解中的方法一，剩余的四种方法分别使用了线段树、树状数组和平衡树。这些方法都不是面试的考点，甚至在笔试中也很少出现，所以大部分读者应该是完全不知道这些都是啥神奇的数据结构的。所以我觉得这里有必要补充以下两点：</p><ul><li>这道题需要哪些接口。</li><li>上面的这些神奇的数据结构可以提供哪些接口。</li></ul><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定数组 A，它的长度为 n，对应的元素以及下标为A[0],A[1],⋯,A[n−1]。</p><p>令 S(i,j) 为A[i] 到 A[j] 的和，即</p><p>$S(i, j) = \sum_{k=i}^j A[k]$</p><p>题目需要求出满足$ \textit{lower} \leq S(i, j) \leq \textit{upper}$ 的二元组 (i, j)(i,j) 的个数。</p><p>换成人话就是，问数组 A 有多少个连续的子数组，其元素只和在 $[\textit{lower}, \textit{upper}]$ 的范围内。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>暴力的做法是使用前缀和。令 P 为 A 的前缀和数组，那么</p><p>S(i, j) = P[j] - P[i-1]</p><p>可以在O(1) 的时间求出。这里我们规定边界 P[-1] = 0。</p><p>这样一来，我们枚举所有的二元组 (i, j)，算出S(i,j) 并判断其是否在范围内即可。时间复杂度为$ O(n^2)$。</p><p>那么怎么进行优化呢？我们考虑从小到大枚举 j，由于</p><p>$\textit{lower} \leq P[j] - P[i-1] \leq \textit{upper}$</p><p>我们可以得到 P[i-1] 应该满足的不等式</p><p>$P[j] - \textit{upper} \leq P[i-1] \leq P[j] - \textit{lower}$</p><p>因此本质上，我们需要一个数据结构支持下面的两个操作：</p><p>操作 1「查询」：给定一个范围 $[\textit{left}, \textit{right}]$，查询数据结构中在该范围内的元素个数。对应到本题中，我们给定的范围就是$ \big[P[j] - \textit{upper}, P[j] - \textit{lower}\big]$；</p><p>操作 2「更新」：给定一个元素 xx，我们需要把它添加到数据结构中。对应到本题中，我们给定的元素就是 P[j]。</p><p>如果有了这样一个数据结构，我们就可以很方便地做出本题：</p><p>我们首先将 00 放入数据结构中，随后我们从小到大枚举 j，查询 $\big[P[j] - \textit{upper}, P[j] - \textit{lower}\big]$ 范围内的元素个数并计入答案。在查询完成之后，我们将P[j] 添加进数据结构，就可以进行下一次枚举。</p><h3 id="频数数组"><a href="#频数数组" class="headerlink" title="频数数组"></a>频数数组</h3><p>很多数据结构都是基于「频数数组」。</p><p>给定数组 t 以及它的下标范围 [L, R][L,R]，t[x] 就表示元素 x 在数据结构中的出现次数。基于此，上述的两个操作可以变为：</p><p>操作 1「查询」：给定一个范围$ [\textit{left}, \textit{right}]$，查询$ t[\textit{left}]$到 $t[\textit{right}]$ 的和；</p><p>操作 2「更新」：给定一个元素 x，将 t[x] 增加 1。</p><p>这也是线段树和树状数组的基础，它们需要的空间都与数组 t 的下标范围 [L, R][L,R] 正相关。在本题数据规模较大的情况下（例如测试数据中，出现了元素值达到 32 位有符号整数的上下界），线段树和树状数组都会超出空间限制，因此需要借助「离散化」操作，将这些元素映射到一个较小规模的区间内。</p><h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p>给定数组元素 [1, 22, 333, 4444, 55555]，如果我们只关注它们之间的大小关系，那么该数组其实和 [1, 2, 3, 4, 5] 是等价的。</p><p>这就是离散化的技巧。我们将所有会涉及到比较操作的数全部放入一个列表中，进行排序，再从小到大依次给它们赋予一个新的值。在离散化完成后，任何两个数之间的相对大小都不会改变，但是元素的上下界范围被限制住，这使得我们可以方便地使用一些数据结构。</p><p>在本题中，我们可以将所有的 $P[j], P[j] - \textit{upper}, P[j] - \textit{lower}$一起进行离散化，并将它们从小到大，依次赋予一个从 1 开始的整数值。这样一来，我们所有涉及到的元素值都会在 [1, 3(n+1)]的范围内。</p><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><p>当我们将元素离散化后，就可以直接使用线段树了。最基础的线段树恰好就支持这两种操作：</p><p>操作 1「查询」：给定一个范围$ [\textit{left}, \textit{right}]$,查询$ t[\textit{left}] $到 $t[\textit{right}]$ 的和；</p><p>操作 2「更新」：给定一个元素 x，将 t[x] 增加 $\delta$。</p><p>我们只需要时刻令$\delta$=1即可。两种操作的时间复杂度均为$ O(\log n)$</p><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><p>当我们将元素离散化后，也可以直接使用树状数组了。最基础的线段树支持这两种操作：</p><p>操作 1「查询」：给定一个下标$ \textit{right}$，查询 t[1] 到$ t[\textit{right}]$ 的和（即前缀和）；</p><p>操作 2「更新」：给定一个元素 x，将t[x] 增加 $\deltaδ$。</p><p>我们只需要时刻令 $\delta=1$ 即可，并且通过调用操作 1 两次（即 $\textit{right}$ 和$ \textit{left}-1left−1）相减得到 t[\textit{left}]$ 到 $t[\textit{right}]$ 的和。两种操作的时间复杂度均为 $O(\log n)$。</p><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><p>平衡树实际上就是「平衡」的二叉搜索树，它与线段树和树状数组不同，并且它不需要借助离散化操作。支持的操作（在本题中会使用到的）主要有以下几种：</p><p>操作 1「lower bound」：给定一个元素 x，查询平衡树中最小的大于等于 x 的元素；</p><p>操作 2「upper bound」：给定一个元素 x，查询平衡树中最小的大于 x 的元素；</p><p>操作 3「rank」：给定一个元素 x（它必须在平衡树中），求它是第几小的元素。当存在重复元素时，会计入多次；</p><p>操作 4「insert」：给定一个元素 x，将它放入平衡树中。</p><p>所有操作的时间复杂度均为 $O(\log n)$。大部分语言自带的平衡树支持操作 1 和 2 和 4 但不支持操作 3。</p><p>那么对于本题中需要的两种操作：</p><p>「查询」：我们令 $u = P[j] - \textit{upper}$，$v = P[j] - \textit{lower}$。对 u 使用操作 11 得到 u’′<br> ，对 v 使用操作 2 得到 v’  。我们再使用操作 3 得到 u’的$ rank r_u$ 以及 v’<br>  的$ rank r_v$ ，那么$ r_v’-r_u’$′， 就是$ \big[P[j] - \textit{upper}, P[j] - \textit{lower}\big]$ 中的元素个数。</p><p>「更新」：我们对 x 使用操作 4 即可。</p><h3 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h3><p>关于这些竞赛难度的知识点，我建议读者在学有余力的情况下学习。这些知识点对面试几乎没有任何帮助；相反，在没有完全掌握这些知识点的前提下，可能会影响读者原本正常的思维，产生「看什么题都是线段树」之类的后果。</p><p>这里我推荐两个参考资料：</p><ul><li><a href="https://oi-wiki.org/" target="_blank" rel="noopener">OI Wiki</a>，是一个信息学竞赛爱好者用爱发电的算法小百科。</li><li><a href="https://github.com/atcoder/ac-library" target="_blank" rel="noopener">ac-library</a>，是日本著名算法竞赛平台 AtCoder 整理的算法模板，但其中没有平衡树。</li></ul><p>读者也可以参考其它互联网上的博客。线段树、树状数组和平衡树在算法竞赛圈中是非常基础的知识点，优质的博客数量也很多</p><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;🌸题目&quot;&gt;&lt;a href=&quot;#🌸题目&quot; class=&quot;headerlink&quot; title=&quot;🌸题目&quot;&gt;&lt;/a&gt;🌸题目&lt;/h2&gt;&lt;p&gt;🍁给定一个整数数组 nums，返回区间和在 [lower, upper] 之间的个数，包含 lower 和 upper。&lt;br&gt;区间和 S(i, j) 表示在 nums 中，位置从 i 到 j 的元素之和，包含 i 和 j (i ≤ j)。&lt;/p&gt;
&lt;p&gt;说明:&lt;br&gt;最直观的算法复杂度是 O(n2) ，请在此基础上优化你的算法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="树状数组" scheme="https://liudufu.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="归并排序" scheme="https://liudufu.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
      <category term="线段树" scheme="https://liudufu.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="动态线段树" scheme="https://liudufu.github.io/tags/%E5%8A%A8%E6%80%81%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="平衡二叉搜索树" scheme="https://liudufu.github.io/tags/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>史上最全的遍历二叉树详解</title>
    <link href="https://liudufu.github.io/Detailed_explanation_of_tree/"/>
    <id>https://liudufu.github.io/Detailed_explanation_of_tree/</id>
    <published>2020-11-08T13:29:30.000Z</published>
    <updated>2020-11-08T13:31:33.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="X-遍历二叉树的方法合集"><a href="#X-遍历二叉树的方法合集" class="headerlink" title="X.遍历二叉树的方法合集"></a>X.遍历二叉树的方法合集</h1><ol><li><ol><li>二叉树的中序遍历</li></ol></li><li><ol><li>二叉树的前序遍历</li></ol></li><li><ol><li>二叉树的后序遍历</li></ol></li></ol><h2 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h2><a id="more"></a><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderRecur</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    System.out.print(head.value + <span class="string">" "</span>);</span><br><span class="line">    preOrderRecur(head.left);</span><br><span class="line">    preOrderRecur(head.right);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderRecur</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    preOrderRecur(head.left);</span><br><span class="line">    System.out.print(head.value + <span class="string">" "</span>);</span><br><span class="line">    preOrderRecur(head.right);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderRecur</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    postOrderRecur(head.left);</span><br><span class="line">    postOrderRecur(head.right);</span><br><span class="line">    System.out.print(head.value + <span class="string">" "</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>这里没有对递归遍历做过多的解释，仅仅给出了简单的动画演示。<br>要理解递归的思路并且熟练的使用它，就是要想清楚你想做什么，什么时候停止。</p><h3 id="如前序遍历："><a href="#如前序遍历：" class="headerlink" title="如前序遍历："></a>如前序遍历：</h3><p>我想先打印头节点对吧？那我打印完了头节点，我现在想打印左边节点了，我只是告诉计算机我想打印左边结点，之后打印右边结点。</p><h3 id="那么后序遍历呢？"><a href="#那么后序遍历呢？" class="headerlink" title="那么后序遍历呢？"></a>那么后序遍历呢？</h3><p>这个时候你应该知道了，我就是想操作左边然后右边，最后打印中间的元素。</p><p>我们并不需要太过于在意具体的递归过程，而是要想清楚让计算机干什么。</p><p>计算机都可能溢出，用人脑去遍历就不现实了。</p><h2 id="迭代解法"><a href="#迭代解法" class="headerlink" title="迭代解法"></a>迭代解法</h2><p>本质上是在模拟递归，因为在递归的过程中使用了系统栈，所以在迭代的解法中常用Stack来模拟系统栈。</p><h3 id="前序遍历-1"><a href="#前序遍历-1" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>首先我们应该创建一个Stack用来存放节点，首先我们想要打印根节点的数据，此时Stack里面的内容为空，所以我们优先将头结点加入Stack，然后打印。</p><p>之后我们应该先打印左子树，然后右子树。所以先加入Stack的就是右子树，然后左子树。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderIteration</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">stack.push(head);</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line">TreeNode node = stack.pop();</span><br><span class="line">System.out.print(node.value + <span class="string">" "</span>);</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">stack.push(node.right);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">stack.push(node.left);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>同理创建一个Stack，然后按 左 中 右的顺序输出节点。<br>尽可能的将这个节点的左子树压入Stack，此时栈顶的元素是最左侧的元素，其目的是找到一个最小单位的子树(也就是最左侧的一个节点)，并且在寻找的过程中记录了来源，才能返回上层,同时在返回上层的时候已经处理完毕左子树了。。当处理完最小单位的子树时，返回到上层处理了中间节点。（如果把整个左中右的遍历都理解成子树的话，就是处理完 <code>左子树-&gt;中间(就是一个节点)-&gt;右子树）</code><br>如果有右节点，其也要进行中序遍历。</p><p><a href="https://imgchr.com/i/B84oZt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/29/B84oZt.png" alt="B84oZt.png"></a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrderIteration</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur = head;</span><br><span class="line">Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty() || cur != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">stack.push(cur);</span><br><span class="line">cur = cur.left;</span><br><span class="line">}</span><br><span class="line">TreeNode node = stack.pop();</span><br><span class="line">System.out.print(node.value + <span class="string">" "</span>);</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">cur = node.right;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h3><h4 id="代码片段-1"><a href="#代码片段-1" class="headerlink" title="代码片段 1"></a>代码片段 1</h4><ul><li>前序遍历的过程 是 中左右。</li><li>将其转化成 中右左。也就是压栈的过程中优先压入左子树，在压入右子树。</li><li>然后将这个结果返回来，这里是利用栈的先进后出倒序打印。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderIteration</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">Stack&lt;TreeNode&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">Stack&lt;TreeNode&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">stack1.push(head);</span><br><span class="line"><span class="keyword">while</span> (!stack1.isEmpty()) {</span><br><span class="line">TreeNode node = stack1.pop();</span><br><span class="line">stack2.push(node);</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">stack1.push(node.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">stack1.push(node.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (!stack2.isEmpty()) {</span><br><span class="line">System.out.print(stack2.pop().value + <span class="string">" "</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="代码片段-2"><a href="#代码片段-2" class="headerlink" title="代码片段 2"></a>代码片段 2</h4><ul><li>bn用一个指针cur标记当前退出的节点是什么。</li><li>后序遍历的过程中在遍历完左子树跟右子树cur都会回到根结点。所以当前不管是从左子树还是右子树回到根结点都不应该再操作了，应该退回上层。</li><li>如果是从右边再返回根结点，应该回到上层。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderIteration2</span><span class="params">(TreeNode head)</span> </span>{ 感谢[<span class="meta">@ben</span>-ben-niu](/u/ben-ben-niu/)指出错误，代码确实存在问题，已经在原文中修复</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur = head;</span><br><span class="line">Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">stack.push(head);</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line">TreeNode peek = stack.peek();</span><br><span class="line"><span class="keyword">if</span> (peek.left != <span class="keyword">null</span> &amp;&amp; peek.left != cur &amp;&amp; peek.right != cur) {</span><br><span class="line">stack.push(peek.left);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (peek.right != <span class="keyword">null</span> &amp;&amp; peek.right != cur) {</span><br><span class="line">stack.push(peek.right);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">System.out.print(stack.pop().val + <span class="string">" "</span>);</span><br><span class="line">cur = peek;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Morris解法"><a href="#Morris解法" class="headerlink" title="Morris解法"></a>Morris解法</h2><p>Morris遍历使用二叉树节点中大量指向null的指针，由Joseph Morris 于1979年发明。<br>时间复杂度：O(n)<br>额外空间复杂度：O(1)</p><p>在你阅读以下代码之前，在这边先讲解一下Morris的通用解法过程。</p><p><a href="https://imgchr.com/i/B84OzQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/29/B84OzQ.png" alt="B84OzQ.png"></a></p><p>Morris的整体思路就是将 以某个根结点开始，找到它左子树的最右侧节点之后与这个根结点进行连接<br>我们可以从 图2 看到，如果这么连接之后，cur 这个指针是可以完整的从一个节点顺着下一个节点遍历，将整棵树遍历完毕，直到 7 这个节点右侧没有指向。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderMorris</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur1 = head;<span class="comment">//当前开始遍历的节点</span></span><br><span class="line">TreeNode cur2 = <span class="keyword">null</span>;<span class="comment">//记录当前结点的左子树</span></span><br><span class="line"><span class="keyword">while</span> (cur1 != <span class="keyword">null</span>) {</span><br><span class="line">cur2 = cur1.left;</span><br><span class="line"><span class="keyword">if</span> (cur2 != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">while</span> (cur2.right != <span class="keyword">null</span> &amp;&amp; cur2.right != cur1) {<span class="comment">//找到当前左子树的最右侧节点，且这个节点应该在指向根结点之前，否则整个节点又回到了根结点。</span></span><br><span class="line">cur2 = cur2.right;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (cur2.right == <span class="keyword">null</span>) {<span class="comment">//这个时候如果最右侧这个节点的右指针没有指向根结点，创建连接然后往下一个左子树的根结点进行连接操作。</span></span><br><span class="line">cur2.right = cur1;</span><br><span class="line">cur1 = cur1.left;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {<span class="comment">//当左子树的最右侧节点有指向根结点，此时说明我们已经回到了根结点并重复了之前的操作，同时在回到根结点的时候我们应该已经处理完 左子树的最右侧节点 了，把路断开。</span></span><br><span class="line">cur2.right = <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line">cur1 = cur1.right;<span class="comment">//一直往右边走，参考图</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="前序遍历-2"><a href="#前序遍历-2" class="headerlink" title="前序遍历"></a>前序遍历</h3><ol><li>在某个根结点创建连线的时候打印。因为我们是顺着左边的根节点来创建连线，且创建的过程只有一次。</li><li>打印某些自身无法创建连线的节点，也就是叶子节点。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderMorris</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur1 = head;</span><br><span class="line">TreeNode cur2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (cur1 != <span class="keyword">null</span>) {</span><br><span class="line">cur2 = cur1.left;</span><br><span class="line"><span class="keyword">if</span> (cur2 != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">while</span> (cur2.right != <span class="keyword">null</span> &amp;&amp; cur2.right != cur1) {</span><br><span class="line">cur2 = cur2.right;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (cur2.right == <span class="keyword">null</span>) {</span><br><span class="line">cur2.right = cur1;</span><br><span class="line">System.out.print(cur1.value + <span class="string">" "</span>);</span><br><span class="line">cur1 = cur1.left;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">cur2.right = <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">System.out.print(cur1.value + <span class="string">" "</span>);</span><br><span class="line">}</span><br><span class="line">cur1 = cur1.right;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="中序遍历-2"><a href="#中序遍历-2" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>从最左侧开始顺着右节点打印。也就是在将cu1切换到上层节点的时候</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrderMorris</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur1 = head;</span><br><span class="line">TreeNode cur2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (cur1 != <span class="keyword">null</span>) {</span><br><span class="line">cur2 = cur1.left;</span><br><span class="line"><span class="comment">//构建连接线</span></span><br><span class="line"><span class="keyword">if</span> (cur2 != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">while</span> (cur2.right != <span class="keyword">null</span> &amp;&amp; cur2.right != cur1) {</span><br><span class="line">cur2 = cur2.right;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (cur2.right == <span class="keyword">null</span>) {</span><br><span class="line">cur2.right = cur1;</span><br><span class="line">cur1 = cur1.left;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">cur2.right = <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">System.out.print(cur1.value + <span class="string">" "</span>);</span><br><span class="line">cur1 = cur1.right;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="后序遍历-2"><a href="#后序遍历-2" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历就比较复杂了哈，先看一下图</p><p><a href="https://imgchr.com/i/B84vss" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/29/B84vss.png" alt="B84vss.png"></a></p><p>当我们到达最左侧，也就是左边连线已经创建完毕了。<br>打印 4<br>打印 5 2<br>打印 6<br>打印 7 3 1<br>我们将一个节点的连续右节点当成一个单链表来看待。<br>当我们返回上层之后，也就是将连线断开的时候，打印下层的单链表。<br>比如返回到　２，此时打印　４<br>比如返回到　１，此时打印　５　２<br>比如返回到　３，此时打印　６<br>那么我们只需要将这个单链表逆序打印就行了，下文也给出了 单链表逆序代码<br>这里不应该打印当前层，而是下一层，否则根结点会先与右边打印。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序Morris</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderMorris</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">TreeNode cur1 = head;<span class="comment">//遍历树的指针变量</span></span><br><span class="line">TreeNode cur2 = <span class="keyword">null</span>;<span class="comment">//当前子树的最右节点</span></span><br><span class="line"><span class="keyword">while</span> (cur1 != <span class="keyword">null</span>) {</span><br><span class="line">cur2 = cur1.left;</span><br><span class="line"><span class="keyword">if</span> (cur2 != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">while</span> (cur2.right != <span class="keyword">null</span> &amp;&amp; cur2.right != cur1) {</span><br><span class="line">cur2 = cur2.right;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (cur2.right == <span class="keyword">null</span>) {</span><br><span class="line">cur2.right = cur1;</span><br><span class="line">cur1 = cur1.left;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">cur2.right = <span class="keyword">null</span>;</span><br><span class="line">postMorrisPrint(cur1.left);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">cur1 = cur1.right;</span><br><span class="line">}</span><br><span class="line">postMorrisPrint(head);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postMorrisPrint</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line">TreeNode reverseList = postMorrisReverseList(head);</span><br><span class="line">TreeNode cur = reverseList;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">System.out.print(cur.value + <span class="string">" "</span>);</span><br><span class="line">cur = cur.right;</span><br><span class="line">}</span><br><span class="line">postMorrisReverseList(reverseList);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//翻转单链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">postMorrisReverseList</span><span class="params">(TreeNode head)</span> </span>{</span><br><span class="line">TreeNode cur = head;</span><br><span class="line">TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">TreeNode next = cur.right;</span><br><span class="line">cur.right = pre;</span><br><span class="line">pre = cur;</span><br><span class="line">cur = next;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> pre;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;X-遍历二叉树的方法合集&quot;&gt;&lt;a href=&quot;#X-遍历二叉树的方法合集&quot; class=&quot;headerlink&quot; title=&quot;X.遍历二叉树的方法合集&quot;&gt;&lt;/a&gt;X.遍历二叉树的方法合集&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;二叉树的中序遍历&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;二叉树的前序遍历&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;二叉树的后序遍历&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;递归解法&quot;&gt;&lt;a href=&quot;#递归解法&quot; class=&quot;headerlink&quot; title=&quot;递归解法&quot;&gt;&lt;/a&gt;递归解法&lt;/h2&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="递归" scheme="https://liudufu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="中序遍历" scheme="https://liudufu.github.io/tags/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="迭代" scheme="https://liudufu.github.io/tags/%E8%BF%AD%E4%BB%A3/"/>
    
      <category term="前序遍历" scheme="https://liudufu.github.io/tags/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="后序遍历" scheme="https://liudufu.github.io/tags/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="Morris解法" scheme="https://liudufu.github.io/tags/Morris%E8%A7%A3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>脑筋急转弯_leetcode.1227.飞机座位分配概率</title>
    <link href="https://liudufu.github.io/Aircraft_seat_allocation_probability/"/>
    <id>https://liudufu.github.io/Aircraft_seat_allocation_probability/</id>
    <published>2020-11-08T12:21:24.000Z</published>
    <updated>2020-11-08T12:23:11.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🌸题目"><a href="#🌸题目" class="headerlink" title="🌸题目"></a>🌸题目</h2><p>🍁有 n 位乘客即将登机，飞机正好有 n 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。</p><p>剩下的乘客将会：</p><p>如果他们自己的座位还空着，就坐到自己的座位上，</p><p>当他们自己的座位被占用时，随机选择其他座位<br>第 n 位乘客坐在自己的座位上的概率是多少？</p> <a id="more"></a><p>示例 1：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：1.00000</span><br><span class="line">解释：第一个人只会坐在自己的位置上。</span><br></pre></td></tr></tbody></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 2</span><br><span class="line">输出: 0.50000</span><br><span class="line">解释：在第一个人选好座位坐下后，第二个人坐在自己的座位上的概率是 0.5。</span><br></pre></td></tr></tbody></table></figure><p>提示：</p><ul><li>1 &lt;= n &lt;= 10^5</li></ul><h2 id="🌸解法：分类讨论"><a href="#🌸解法：分类讨论" class="headerlink" title="🌸解法：分类讨论"></a>🌸解法：分类讨论</h2><p>这道题代码很简单，但是就看你的脑袋想不想得到了，数学推理也挺难懂得，在这里大致说一下我的理解吧</p><ul><li><p>第一，题目并没有按照座位号1-n的顺序进行乘客登录飞机，也就是说第一个乘客的座位号并不是1，但是有一点巧妙的点就在于这个题并不管乘客的座位号是如何编排的，因为座位号也同样是1-n，所以我们可以以乘客的登录飞机的顺序为乘客重新进行编号，即第一个乘客所对应的座位号(编号代表的是入场的次序，而不是实际的座位号)。</p></li><li><p>第二，按照所有的情况进行分类讨论</p><ul><li><p>当n 等于1，毫无疑问，第n个乘客就是他自己，坐回他自己座位的概率为1.0</p></li><li><p>当n 不等于1，第一个乘客进入飞机后，可以分为以下几种情况。</p><ul><li><p>他有1/n的概率去选择到原本属于他自己的座位，也就是说他选择对了，则后面的所有人位置都是对的，所以第n个人的概率为1</p></li><li><p>他有1/n的概率选择到第n个人座位，即第n个人无论如何也选择不了自己的座位，概率为0</p></li><li><p>如果第一个人选择到了第i个人的座位，那么第二个人到第i- 1个人的位置都是对的，轮到第i个人时就会感觉到迷茫。因为自己的位置被占据了，如果第i个人选择第一个人的座位，那么后面的人位置都是完全正确的，如果他选择到了第i + 1到第n个座位，那么后面的人也会遇到同样迷茫的问题，那么，怎么做呢？</p></li><li><p>其实，当轮到第i个人的时候，i感觉到了迷茫，就像一开始第一个人一样不知道自己应该坐哪儿，所以这个时候我们可以将i和1身份互换一下，令第一个位置就是i本身的座位，这样就会有i选择第一个座位，后面的人座位肯定是对的，如果i不选择1号，同样是会令下一个i感到迷茫，这样就可以产生递归了，并且将问题的规模缩减到了n - i + 1(即还剩下多少个座位没有没有被选或者还剩下多少个人没有选，n - i代表i后面的人，再加上迷茫的i就是n - i + 1)</p></li><li><p>我们令f(n)为第n个人坐到自己原本座位的概率，按照递推规律可有</p><ul><li><p>$f(n) = \frac{1}{n}\left(1 + \sum_{i=2}^{n-1}{f(n-i+1)}\right)$</p></li><li><p>这个递推式想必大家高中就会求了，令 n = n-1再写出一项：</p></li><li><p>$f(n-1) = \frac{1}{n-1}\left(1 + \sum_{i=2}^{n-2}{f(n-i)}\right)$</p></li><li><p>然后两式相减得到：$nf(n) - (n-1)f(n-1) = f(n-1)$</p><p>即：$f(n) = f(n-1) = \cdots = f(2)$</p><p>那么我们就可以得到最终的答案了，对任意的 $n \ge 2n≥2 $都有 <code>f(n) = f(2) = 0.5</code></p></li></ul></li><li><p>另一种理解：可以把0到n-1看成一个整体，那对于n来说，无非就两种情况，前0到n-1号是否会把n的位置占据，概率就是0.5；只有一个人的情况概率为1（一定坐在自己的位置上）。</p></li></ul></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">nthPersonGetsNthSeat</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">1</span> ? <span class="number">1.0</span> : <span class="number">0.5</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;🌸题目&quot;&gt;&lt;a href=&quot;#🌸题目&quot; class=&quot;headerlink&quot; title=&quot;🌸题目&quot;&gt;&lt;/a&gt;🌸题目&lt;/h2&gt;&lt;p&gt;🍁有 n 位乘客即将登机，飞机正好有 n 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。&lt;/p&gt;
&lt;p&gt;剩下的乘客将会：&lt;/p&gt;
&lt;p&gt;如果他们自己的座位还空着，就坐到自己的座位上，&lt;/p&gt;
&lt;p&gt;当他们自己的座位被占用时，随机选择其他座位&lt;br&gt;第 n 位乘客坐在自己的座位上的概率是多少？&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="模拟" scheme="https://liudufu.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="分类讨论" scheme="https://liudufu.github.io/tags/%E5%88%86%E7%B1%BB%E8%AE%A8%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>脑筋急转弯_leetcode.1033.移动石子直到连续</title>
    <link href="https://liudufu.github.io/Move_the_stone_until_continuous/"/>
    <id>https://liudufu.github.io/Move_the_stone_until_continuous/</id>
    <published>2020-11-08T12:17:35.000Z</published>
    <updated>2020-11-08T12:20:53.654Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>哎，最近忙着ACM和蓝桥杯（毕竟都是第一次参赛的小白），可把自己整迷糊了，当两项比赛全部告一段落，自己才是真的觉悟到自己与别人的差距以及自己的大脑思考问题的能力很是欠缺，还有就是思考不够全面，往往一道题明明自己已经写出了方法，但硬是在比赛途中想不出一种有效的方法去优化方法和更快的得出答案，总是赛后诸葛亮的想出这该怎么做，那该怎么做，这些欠缺都导致自己在ACM和蓝桥杯中丢失得分，看来还是得努力呀，不让自己变得更强又何能征战星辰大海呢，先来练练思维能力吧，从最简单的脑筋急转弯开始！</p></blockquote><a id="more"></a><h2 id="🌸题目"><a href="#🌸题目" class="headerlink" title="🌸题目"></a>🌸题目</h2><p>🍁三枚石子放置在数轴上，位置分别为 a，b，c。</p><p>每一回合，我们假设这三枚石子当前分别位于位置 x, y, z 且 x &lt; y &lt; z。从位置 x 或者是位置 z 拿起一枚石子，并将该石子移动到某一整数位置 k 处，其中 x &lt; k &lt; z 且 k != y。</p><p>当你无法进行任何移动时，即，这些石子的位置连续时，游戏结束。</p><p>要使游戏结束，你可以执行的最小和最大移动次数分别是多少？ 以长度为 2 的数组形式返回答案：answer = [minimum_moves, maximum_moves]</p><p>示例 1：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 1, b = 2, c = 5</span><br><span class="line">输出：[1, 2]</span><br><span class="line">解释：将石子从 5 移动到 4 再移动到 3，或者我们可以直接将石子移动到 3。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：a = 4, b = 3, c = 2</span><br><span class="line">输出：[0, 0]</span><br><span class="line">解释：我们无法进行任何移动。</span><br></pre></td></tr></tbody></table></figure><p>提示：</p><ul><li>1 &lt;= a &lt;= 100</li><li>1 &lt;= b &lt;= 100</li><li>1 &lt;= c &lt;= 100</li><li>a != b, b != c, c != a</li></ul><h2 id="🌸解法：分类讨论"><a href="#🌸解法：分类讨论" class="headerlink" title="🌸解法：分类讨论"></a>🌸解法：分类讨论</h2><p>这道题给出的数据并没有直接给你排好序了的，他的数据顺序是乱的（这是一个小小的坑）</p><p>假设已经排好序了那么要求出最大次数和最小次数，即</p><ul><li>最大次数，无疑就是一步一步的走，即最后一个元素减去第一个元素 再减二（这很好推断，自己画一个数轴就知道了）</li><li>最小次数，只能是1或者2，这就要分类讨论了<ul><li>最小次数为一，即只需要动一步，即已经有两个数是连续的了或者两个数之间只有一个空的时候,例如 <code>1  2  5</code>、<code>1  3  5</code>。</li><li>最小次数为二，即除上面情况之后的所有情况</li></ul></li></ul><p>代码就很好得出了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] numMovesStones(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) {</span><br><span class="line">    <span class="keyword">int</span> max = Math.max(Math.max(a, b), c);<span class="comment">//找到最大值</span></span><br><span class="line">    <span class="keyword">int</span> min = Math.min(Math.min(a, b), c);<span class="comment">//找到最小值</span></span><br><span class="line">    <span class="keyword">int</span> cur = a + b + c - max - min; <span class="comment">// 找到中间那个数</span></span><br><span class="line">    <span class="keyword">if</span>(max - cur == <span class="number">1</span> &amp;&amp; cur - min == <span class="number">1</span>) { <span class="comment">//如果已经是连续的了，则不用移动</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">0</span>, <span class="number">0</span>};</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(max - cur &lt;= <span class="number">2</span> || cur - min &lt;= <span class="number">2</span>) { <span class="comment">//不连续但是有其中两个中间只有一个位置时候例如：1 3 4 、 1 3 5，都只需要最小移动一次即可连续</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] {<span class="number">1</span>, max - min - <span class="number">2</span>};</span><br><span class="line">    }<span class="keyword">else</span> {<span class="comment">//否则最少移动两次才可以连续</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] {<span class="number">2</span>, max - min - <span class="number">2</span>};</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸题目-1"><a href="#🌸题目-1" class="headerlink" title="🌸题目"></a>🌸题目</h2><p>你和你的朋友，两个人一起玩 Nim 游戏：</p><p>桌子上有一堆石头。<br>你们轮流进行自己的回合，你作为先手。<br>每一回合，轮到的人拿掉 1 - 3 块石头。<br>拿掉最后一块石头的人就是获胜者。<br>j假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false 。</p><p>示例1：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：false </span><br><span class="line">解释：如果堆中有 4 块石头，那么你永远不会赢得比赛；</span><br><span class="line">     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿</span><br></pre></td></tr></tbody></table></figure><p>走。<br>示例 2：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：true</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：n = 2</span><br><span class="line">输出：true</span><br></pre></td></tr></tbody></table></figure><p>提示：</p><ul><li>1 &lt;= n &lt;= 2^31 - 1</li></ul><h2 id="🌸解法一：记忆化递归"><a href="#🌸解法一：记忆化递归" class="headerlink" title="🌸解法一：记忆化递归"></a>🌸解法一：记忆化递归</h2><ul><li>为什么在两个人「足够聪明」（你们是聪明人，每一步都是最优解）这个前提下，比赛的结果是「由输入数据确定的」</li></ul><p>用具体的例子 8 进行分析可以得出结论：</p><p>当 N = 3 的时候，当前做出选择的人可以拿掉最后一块石头，获得胜利；<br>然后我们逐层向上分析，当 N = 4的时候，无论当前做出哪一种选择，对方都会赢，所以当前只能输掉比赛；<br>如果当前这一层的结点里「有输有赢」，因为我们「足够聪明」，所以必须选择可以让对方输掉的分支，好让自己赢；<br>对于这个问题的特点是，当 N不是 4 的倍数的时候，先手（当前做出选择的人），或者说游戏一开始做出选择的玩家一定会输。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="comment">// 使用包装类型的布尔数组，可以用 null 这个状态，表示当前 n 的结果还没有被计算出来</span></span><br><span class="line">    Boolean[] memo = <span class="keyword">new</span> Boolean[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> dfs(n, memo);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, Boolean[] memo)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memo[n] != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> memo[n];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 3 种选择，只要有一种对方输掉，自己就可以赢</span></span><br><span class="line">    <span class="keyword">if</span> (!dfs(n - <span class="number">1</span>, memo) || !dfs(n - <span class="number">2</span>, memo) || !dfs(n - <span class="number">3</span>, memo)) {</span><br><span class="line">        memo[n] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 否则自己输</span></span><br><span class="line">    memo[n] = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法二：动态规划"><a href="#🌸解法二：动态规划" class="headerlink" title="🌸解法二：动态规划"></a>🌸解法二：动态规划</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dp[0] 的值可以不管，没有意义</span></span><br><span class="line">    dp[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="keyword">true</span>;</span><br><span class="line">    dp[<span class="number">3</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; i++) {</span><br><span class="line">        dp[i] = !dp[i - <span class="number">1</span>] || !dp[i - <span class="number">2</span>] || !dp[i - <span class="number">3</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>滚动数组优化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">4</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="keyword">false</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="keyword">true</span>;</span><br><span class="line">    dp[<span class="number">3</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; i++) {</span><br><span class="line">        dp[i % <span class="number">4</span>] = !dp[(i - <span class="number">1</span>) % <span class="number">4</span>] || !dp[(i - <span class="number">2</span>) % <span class="number">4</span>] || !dp[(i - <span class="number">3</span>) % <span class="number">4</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dp[n % <span class="number">4</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法三：数学方法"><a href="#🌸解法三：数学方法" class="headerlink" title="🌸解法三：数学方法"></a>🌸解法三：数学方法</h2><p>让我们考虑一些小例子。显而易见的是，如果石头堆中只有一块、两块、或是三块石头，那么在你的回合，你就可以把全部石子拿走，从而在游戏中取胜。而如果就像题目描述那样，堆中恰好有四块石头，你就会失败。因为在这种情况下不管你取走多少石头，总会为你的对手留下几块，使得他可以在游戏中打败你。因此，要想获胜，在你的回合中，必须避免石头堆中的石子数为 4 的情况。</p><p>同样地，如果有五块、六块、或是七块石头，你可以控制自己拿取的石头数，总是恰好给你的对手留下四块石头，使他输掉这场比赛。但是如果石头堆里有八块石头，你就不可避免地会输掉，因为不管你从一堆石头中挑出一块、两块还是三块，你的对手都可以选择三块、两块或一块，以确保在再一次轮到你的时候，你会面对四块石头。</p><p>显然，它以相同的模式不断重复 n=4,8,12,16,…，基本可以看出是 4 的倍数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> (n % <span class="number">4</span>) != <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可怕可怕。。。</p><h2 id="🌸题目-2"><a href="#🌸题目-2" class="headerlink" title="🌸题目"></a>🌸题目</h2><p>给你两个字符串，请你从这两个字符串中找出最长的特殊序列。</p><p>「最长特殊序列」定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。</p><p>子序列 可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。</p><p>输入为两个字符串，输出最长特殊序列的长度。如果不存在，则返回 -1。</p><p>示例 1：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: "aba", "cdc"</span><br><span class="line">输出: 3</span><br><span class="line">解释: 最长特殊序列可为 "aba" (或 "cdc")，两者均为自身的子序列且不是对方的子序列。</span><br></pre></td></tr></tbody></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = "aaa", b = "bbb"</span><br><span class="line">输出：3</span><br></pre></td></tr></tbody></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = "aaa", b = "aaa"</span><br><span class="line">输出：-1</span><br></pre></td></tr></tbody></table></figure><p>提示：</p><ul><li>两个字符串长度均处于区间 [1 - 100] 。</li><li>字符串中的字符仅含有 ‘a’~’z’ 。</li></ul><h2 id="🌸解法一：暴力解法"><a href="#🌸解法一：暴力解法" class="headerlink" title="🌸解法一：暴力解法"></a>🌸解法一：暴力解法</h2><p>暴力解法中，生成两个字符串所有的子序列共 2^n<br>  个，将其存储在 hashmap 中，并记录每个子序列出现的次数。然后找出出现次数为 11 的最长子序列。如果不存在这样的子序列，返回 -1。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLUSlength</span><span class="params">(String a, String b)</span> </span>{</span><br><span class="line">    HashMap &lt; String, Integer &gt; map = <span class="keyword">new</span> HashMap &lt; &gt; ();</span><br><span class="line">    <span class="keyword">for</span> (String s: <span class="keyword">new</span> String[] {a, b}) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; s.length()); i++) {</span><br><span class="line">            String t = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++) {</span><br><span class="line">                <span class="keyword">if</span> (((i &gt;&gt; j) &amp; <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">                    t += s.charAt(j);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(t))</span><br><span class="line">                map.put(t, map.get(t) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                map.put(t, <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (String s: map.keySet()) {</span><br><span class="line">        <span class="keyword">if</span> (map.get(s) == <span class="number">1</span>)</span><br><span class="line">            res = Math.max(res, s.length());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="🌸解法二：寻找规律"><a href="#🌸解法二：寻找规律" class="headerlink" title="🌸解法二：寻找规律"></a>🌸解法二：寻找规律</h2><p>字符串 a 和 b 共有 3 种情况：</p><ul><li><p>a=b。如果两个字符串相同，则没有特殊子序列，返回 -1。</p></li><li><p>length(a)=length(b) 且 a != b。例如：abc 和 abd。这种情况下，一个字符串一定不会是另外一个字符串的子序列，因此可以将任意一个字符串看作是特殊子序列，返回 length(a) 或 length(b)</p></li><li><p>length(a)&gt; =length(b)。例如：abcd 和 abc。这种情况下，长的字符串一定不会是短字符串的子序列，因此可以将长字符串看作是特殊子序列，返回 max(length(a),length(b))。</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLUSlength</span><span class="params">(String a, String b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(a.equals(b)){</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> Math.max(a.length(), b.length());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;哎，最近忙着ACM和蓝桥杯（毕竟都是第一次参赛的小白），可把自己整迷糊了，当两项比赛全部告一段落，自己才是真的觉悟到自己与别人的差距以及自己的大脑思考问题的能力很是欠缺，还有就是思考不够全面，往往一道题明明自己已经写出了方法，但硬是在比赛途中想不出一种有效的方法去优化方法和更快的得出答案，总是赛后诸葛亮的想出这该怎么做，那该怎么做，这些欠缺都导致自己在ACM和蓝桥杯中丢失得分，看来还是得努力呀，不让自己变得更强又何能征战星辰大海呢，先来练练思维能力吧，从最简单的脑筋急转弯开始！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="动态规划" scheme="https://liudufu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="记忆化递归" scheme="https://liudufu.github.io/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E9%80%92%E5%BD%92/"/>
    
      <category term="取模运算" scheme="https://liudufu.github.io/tags/%E5%8F%96%E6%A8%A1%E8%BF%90%E7%AE%97/"/>
    
      <category term="找规律" scheme="https://liudufu.github.io/tags/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>一文搞定常见的链表问题</title>
    <link href="https://liudufu.github.io/Linked_list_problem/"/>
    <id>https://liudufu.github.io/Linked_list_problem/</id>
    <published>2020-11-08T12:14:46.000Z</published>
    <updated>2020-11-08T12:18:31.960Z</updated>
    
    <content type="html"><![CDATA[<p>作为线性表的两种存储方式 —— 链表和数组，这对相爱相杀的好基友有着各自的优缺点。接下来，我们梳理一下这两种方式。</p><p>数组，所有元素都连续的存储于一段内存中，且每个元素占用的内存大小相同。这使得数组具备了通过下标快速访问数据的能力。<br>但连续存储的缺点也很明显，增加容量，增删元素的成本很高，时间复杂度均为 O(n)。</p><a id="more"></a><p>增加数组容量需要先申请一块新的内存，然后复制原有的元素。如果需要的话，可能还要删除原先的内存。</p><p>删除元素时需要移动被删除元素之后的所有元素以保证所有元素是连续的。增加元素时需要移动指定位置及之后的所有元素，然后将新增元素插入到指定位置，如果容量不足的话还需要先进行扩容操作。</p><p>总结一下数组的优缺点：</p><p>优点：可以根据偏移实现快速的随机读写。<br>缺点：扩容，增删元素极慢。<br>链表，由若干个结点组成，每个结点包含数据域和指针域。结点结构如下图所示：</p><p>一般来讲，链表中只会有一个结点的指针域为空，该结点为尾结点，其他结点的指针域都会存储一个结点的内存地址。链表中也只会有一个结点的内存地址没有存储在其他结点的指针域，该结点称为头结点。</p><p>链表的存储方式使得它可以高效的在指定位置插入与删除，时间复杂度均为 O(1)。<br>在结点 p 之后增加一个结点 q 总共分三步：</p><p>申请一段内存用以存储 q (可以使用内存池避免频繁申请和销毁内存)。<br>将 p 的指针域数据复制到 q 的指针域。<br>更新 p 的指针域为 q 的地址。</p><p>删除结点 p 之后的结点 q 总共分两步：</p><ol><li><p>将 q 的指针域复制到 p 的指针域。</p></li><li><p>释放 q 结点的内存。</p><p>链表的主要代码</p></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结点模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">T data;</span><br><span class="line">Node *next;</span><br><span class="line">Node() : next(<span class="literal">nullptr</span>) {}</span><br><span class="line">Node(<span class="keyword">const</span> T &amp;d) : data(d), next(<span class="literal">nullptr</span>) {}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除 p 结点后面的元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove</span><span class="params">(Node&lt;T&gt; *p)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">nullptr</span> || p-&gt;next == <span class="literal">nullptr</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">auto</span> tmp = p-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p-&gt;next;</span><br><span class="line">p-&gt;next = tmp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//在 p 结点后面插入元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Node&lt;T&gt; *p, <span class="keyword">const</span> T &amp;data)</span> </span>{</span><br><span class="line"><span class="keyword">auto</span> tmp = <span class="keyword">new</span> Node&lt;T&gt;(data);</span><br><span class="line">tmp-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = tmp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> V&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Walk</span><span class="params">(Node&lt;T&gt; *p, <span class="keyword">const</span> V &amp;vistor)</span> </span>{</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">nullptr</span>) {</span><br><span class="line">vistor(p);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">auto</span> p = <span class="keyword">new</span> Node&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>);</span><br><span class="line">Insert(p, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">Walk(p, [&amp;sum](<span class="keyword">const</span> Node&lt;<span class="keyword">int</span>&gt; *p) -&gt; <span class="keyword">void</span> { sum += p-&gt;data; });</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Remove(p);</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">Walk(p, [&amp;sum](<span class="keyword">const</span> Node&lt;<span class="keyword">int</span>&gt; *p) -&gt; <span class="keyword">void</span> { sum += p-&gt;data; });</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode() {}</span><br><span class="line">    ListNode(<span class="keyword">int</span> val) { <span class="keyword">this</span>.val = val; }</span><br><span class="line">    ListNode(<span class="keyword">int</span> val, ListNode next) { <span class="keyword">this</span>.val = val; <span class="keyword">this</span>.next = next; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> <strong>面试问题总结</strong></p><p>无法高效获取长度，无法根据偏移快速访问元素，是链表的两个劣势。然而面试的时候经常碰见诸如获取倒数第k个元素，获取中间位置的元素，判断链表是否存在环，判断环的长度等和长度与位置有关的问题。这些问题都可以通过灵活运用双指针来解决。</p><p>Tips：双指针并不是固定的公式，而是一种思维方式~</p><p>先来看”倒数第k个元素的问题”。设有两个指针 p 和 q，初始时均指向头结点。首先，先让 p 沿着 next 移动 k 次。此时，p 指向第 k+1个结点，q 指向头节点，两个指针的距离为 k 。然后，同时移动 p 和 q，直到 p 指向空，此时 q 即指向倒数第 k 个结点。可以参考下图来理解：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">        ListNode *p = head, *q = head; <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">while</span>(k--) {   <span class="comment">//将 p指针移动 k 次</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">nullptr</span>) {<span class="comment">//同时移动，直到 p == nullptr</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>获取中间元素的问题。设有两个指针 fast 和 slow，初始时指向头节点。每次移动时，fast向后走两次，slow向后走一次，直到 fast 无法向后走两次。这使得在每轮移动之后。fast 和 slow 的距离就会增加一。设链表有 n 个元素，那么最多移动 n/2 轮。当 n 为奇数时，slow 恰好指向中间结点，当 n 为 偶数时，slow 恰好指向中间两个结点的靠前一个(可以考虑下如何使其指向后一个结点呢？)。</p><p>下述代码实现了 n 为<strong>偶数</strong>时慢指针指向<strong>靠后结点</strong>。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>{</span><br><span class="line">        ListNode *p = head, *q = head;</span><br><span class="line">        <span class="keyword">while</span>(q != <span class="literal">nullptr</span> &amp;&amp; q-&gt;next != <span class="literal">nullptr</span>) {</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            q = q-&gt;next-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    } </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>是否存在环的问题。如果将尾结点的 next 指针指向其他任意一个结点，那么链表就存在了一个环。</p><p>一部分中，总结快慢指针的特性 —— 每轮移动之后两者的距离会加一。下面会继续用该特性解决环的问题。<br>当一个链表有环时，快慢指针都会陷入环中进行无限次移动，然后变成了追及问题。想象一下在操场跑步的场景，只要一直跑下去，快的总会追上慢的。当两个指针都进入环后，每轮移动使得慢指针到快指针的距离增加一，同时快指针到慢指针的距离也减少一，只要一直移动下去，快指针总会追上慢指针。</p><p>根据上述表述得出，如果一个链表存在环，那么快慢指针必然会相遇。实现代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>{</span><br><span class="line">        ListNode *slow = head;</span><br><span class="line">        ListNode *fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span>) {</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(fast != <span class="literal">nullptr</span>) {</span><br><span class="line">                fast = fast-&gt;next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(fast == slow) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>后一个问题，如果存在环，如何判断环的长度呢？方法是，快慢指针相遇后继续移动，直到第二次相遇。两次相遇间的移动次数即为环的长度。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为线性表的两种存储方式 —— 链表和数组，这对相爱相杀的好基友有着各自的优缺点。接下来，我们梳理一下这两种方式。&lt;/p&gt;
&lt;p&gt;数组，所有元素都连续的存储于一段内存中，且每个元素占用的内存大小相同。这使得数组具备了通过下标快速访问数据的能力。&lt;br&gt;但连续存储的缺点也很明显，增加容量，增删元素的成本很高，时间复杂度均为 O(n)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="链表" scheme="https://liudufu.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数组" scheme="https://liudufu.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="指针" scheme="https://liudufu.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>DFS_面试题_08.10_颜色填充</title>
    <link href="https://liudufu.github.io/Color_fill/"/>
    <id>https://liudufu.github.io/Color_fill/</id>
    <published>2020-11-08T12:11:19.000Z</published>
    <updated>2020-11-08T12:14:12.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🌸题目"><a href="#🌸题目" class="headerlink" title="🌸题目"></a>🌸题目</h2><p>🍁编写函数，实现许多图片编辑软件都支持的「颜色填充」功能。</p><p>待填充的图像用二维数组 image 表示，元素为初始颜色值。初始坐标点的横坐标为 sr 纵坐标为 sc。需要填充的新颜色为 newColor 。</p><p>「周围区域」是指颜色相同且在上、下、左、右四个方向上存在相连情况的若干元素。</p><p>请用新颜色填充初始坐标点的周围区域，并返回填充后的图像。</p> <a id="more"></a><p>示例：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">image = [[1,1,1],[1,1,0],[1,0,1]] </span><br><span class="line">sr = 1, sc = 1, newColor = 2</span><br><span class="line">输出：[[2,2,2],[2,2,0],[2,0,1]]</span><br><span class="line">解释: </span><br><span class="line">初始坐标点位于图像的正中间，坐标 (sr,sc)=(1,1) 。</span><br><span class="line">初始坐标点周围区域上所有符合条件的像素点的颜色都被更改成 2 。</span><br><span class="line">注意，右下角的像素没有更改为 2 ，因为它不属于初始坐标点的周围区域。</span><br></pre></td></tr></tbody></table></figure><p>提示：</p><ul><li>image 和 image[0] 的长度均在范围 [1, 50] 内。</li><li>初始坐标点 (sr,sc) 满足 0 &lt;= sr &lt; image.length 和 0 &lt;= sc &lt; image[0].length 。</li><li>image[i] [j] 和 newColor 表示的颜色值在范围 [0, 65535] 内。</li></ul><h2 id="🌸解法：DFS"><a href="#🌸解法：DFS" class="headerlink" title="🌸解法：DFS"></a>🌸解法：DFS</h2><p>因为只是修改颜色，所以不需要记录路径，只需要4个方向暴力搜索就行.</p><p>模板</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (越界||路径不能走){</span><br><span class="line">    return;</span><br><span class="line">}</span><br><span class="line">image[x][y] = newColor;    //标记，更换颜色</span><br><span class="line">for (int k = 0; k &lt; 4; k++){</span><br><span class="line">    helpfunc(image, x + next[k][0], y + next[k][1], oldColor, newColor);</span><br><span class="line">}</span><br><span class="line">//如果需要回溯，在这里进行恢复</span><br><span class="line">//image[x][y] = unchange_val;</span><br></pre></td></tr></tbody></table></figure><h3 id="一个小坑"><a href="#一个小坑" class="headerlink" title="一个小坑"></a>一个小坑</h3><p>​      如果起始点的颜色本来就是目标颜色，那么就不需要进行遍历更改。因为所有从起始点可达且颜色相同的点，它们的颜色也都已经是目标颜色了，不必更改；而与起始点颜色不同的那些点，本来就不能更改，所以不需要进行遍历</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] floodFill(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) {</span><br><span class="line">dfs(image, sr, sc, image[sr][sc], newColor);</span><br><span class="line"><span class="keyword">return</span> image;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> val, <span class="keyword">int</span> newColor)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(sr &lt; <span class="number">0</span> || sr &gt; image.length - <span class="number">1</span> || sc &lt; <span class="number">0</span> || sc &gt; image[<span class="number">0</span>].length - <span class="number">1</span> || image[sr][sc] != val || val == newColor) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line">image[sr][sc] = newColor;</span><br><span class="line"></span><br><span class="line">dfs(image, sr + <span class="number">1</span>, sc, val, newColor);</span><br><span class="line">dfs(image, sr, sc + <span class="number">1</span>, val, newColor);</span><br><span class="line">dfs(image, sr - <span class="number">1</span>, sc, val, newColor);</span><br><span class="line">dfs(image, sr, sc - <span class="number">1</span>, val, newColor);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！"><a href="#最后，不经历风雨-怎能在计算机的大山之顶看见彩虹呢！-无论怎样，相信明天一定会更好！！！！！" class="headerlink" title="最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！"></a><strong>最后，不经历风雨,怎能在计算机的大山之顶看见彩虹呢！ 无论怎样，相信明天一定会更好！！！！！</strong></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;🌸题目&quot;&gt;&lt;a href=&quot;#🌸题目&quot; class=&quot;headerlink&quot; title=&quot;🌸题目&quot;&gt;&lt;/a&gt;🌸题目&lt;/h2&gt;&lt;p&gt;🍁编写函数，实现许多图片编辑软件都支持的「颜色填充」功能。&lt;/p&gt;
&lt;p&gt;待填充的图像用二维数组 image 表示，元素为初始颜色值。初始坐标点的横坐标为 sr 纵坐标为 sc。需要填充的新颜色为 newColor 。&lt;/p&gt;
&lt;p&gt;「周围区域」是指颜色相同且在上、下、左、右四个方向上存在相连情况的若干元素。&lt;/p&gt;
&lt;p&gt;请用新颜色填充初始坐标点的周围区域，并返回填充后的图像。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="DFS" scheme="https://liudufu.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>ACM基础数学</title>
    <link href="https://liudufu.github.io/ACM_basic_mathematics/"/>
    <id>https://liudufu.github.io/ACM_basic_mathematics/</id>
    <published>2020-10-07T13:22:46.000Z</published>
    <updated>2020-10-07T13:25:51.383Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.最大公约数，最小公倍数</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> z=y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x%y!=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        z=x%y;</span><br><span class="line"></span><br><span class="line">        x=y;</span><br><span class="line"></span><br><span class="line">        y=z；</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x*y/gcd(x,y);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>2.快速幂</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> mod)</span><span class="comment">//a^b</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            t=(t*a)%mod;</span><br><span class="line">            b--;</span><br><span class="line">        }</span><br><span class="line">        a=(a*a)%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> t;</span><br></pre></td></tr></tbody></table></figure><p><strong>&gt;&gt;矩阵快速幂 很久以前收集的模板，亲测可用</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">Mul</span><span class="params">(Matrix a,Matrix b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    Matrix c;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(c.m,<span class="number">0</span>,<span class="keyword">sizeof</span>(c.m));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line"></span><br><span class="line">                c.m[i][j] += ((a.m[i][k]*b.m[k][j])%SMod + SMod)%SMod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">fastm</span><span class="params">(Matrix a,<span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Matrix res;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(res.m,<span class="number">0</span>,<span class="keyword">sizeof</span>(res.m));</span><br><span class="line"></span><br><span class="line">    res.m[<span class="number">0</span>][<span class="number">0</span>] = res.m[<span class="number">1</span>][<span class="number">1</span>] = res.m[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">            res = Mul(res,a);</span><br><span class="line"></span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a = Mul(a,a);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">MPow</span><span class="params">(Matrix a,<span class="keyword">int</span> n)</span>  <span class="comment">//第二种写法,慎用,易RE</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">    Matrix res = fastm(a,n/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    res = Mul(res,res);</span><br><span class="line">   <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        res = Mul(res,a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> <strong>另外一种</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"></span><br><span class="line">    lll m[<span class="number">13</span>][<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line">    Matrix()</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(m,<span class="number">0</span>,<span class="keyword">sizeof</span>(m));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">2</span>;i++)</span><br><span class="line"></span><br><span class="line">            m[i][i] = <span class="number">1L</span>L;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">Mul</span><span class="params">(Matrix a,Matrix b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    Matrix res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n+<span class="number">2</span>;i++)</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n+<span class="number">2</span>;j++)</span><br><span class="line"></span><br><span class="line">        {</span><br><span class="line"></span><br><span class="line">            res.m[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n+<span class="number">2</span>;k++)</span><br><span class="line">                res.m[i][j] = (res.m[i][j]+(a.m[i][k]*b.m[k][j])%SMod + SMod)%SMod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">fastm</span><span class="params">(Matrix a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    Matrix res;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">            res = Mul(res,a);</span><br><span class="line">        a = Mul(a,a);</span><br><span class="line"></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> <strong>对元素0较多的矩阵取快速幂时可在Mul函数中加一个小优化：</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Matrix <span class="title">Mul</span><span class="params">(Matrix a,Matrix b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Matrix res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(res.m,<span class="number">0</span>,<span class="keyword">sizeof</span>(res.m));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n+<span class="number">2</span>;k++)</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n+<span class="number">2</span>;i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(a.m[i][k])</span><br><span class="line"></span><br><span class="line">            {</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n+<span class="number">2</span>;j++)</span><br><span class="line"></span><br><span class="line">                    res.m[i][j] = (res.m[i][j]+(a.m[i][k]*b.m[k][j])%SMod + SMod)%SMod;</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>3.排列组合</strong></p><p><strong><img src="https://images2018.cnblogs.com/blog/1458413/201808/1458413-20180806171419851-479703983.png" alt="img"></strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">A</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span><span class="comment">//n&gt;=m</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        ans*=n;</span><br><span class="line">  n--;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n&lt;m)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> A(n,m)/A(m,m);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 组合数性质：从这看到的：<a href="https://blog.csdn.net/litble/article/details/75913032" target="_blank" rel="noopener">https://blog.csdn.net/litble/article/details/75913032</a></p><p><img src="https://images2018.cnblogs.com/blog/1458413/201808/1458413-20180807092033984-886826912.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1458413/201808/1458413-20180807092042262-2121295377.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1458413/201808/1458413-20180807092055838-1849485820.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1458413/201808/1458413-20180807092106829-1242924198.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1458413/201808/1458413-20180807092115984-915400971.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1458413/201808/1458413-20180807092130715-1600490627.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1458413/201808/1458413-20180807092226548-1935049046.png" alt="img"></p><p><strong>4.错排</strong></p><p><strong>D(n) = (n-1) [D(n-2) + D(n-1)]（n物品全部错位的方案数）</strong></p><p><strong>D(n) = n! [(-1)^2/2! + … + (-1)^(n-1)/(n-1)! + (-1)^n/n!].</strong></p><p><strong>记住公式就知道代码了</strong></p><p><strong>5.费马小定理：</strong> 假如p是<a href="https://baike.baidu.com/item/质数" target="_blank" rel="noopener">质数</a>，且gcd(a,p)=1，那么 a^(p-1)≡1(mod p)。（如果a为整数，p为质数，a和p互质，则a的p-1次幂对p取模永远等于1）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1.最大公约数，最小公倍数&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; z=y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(x%y!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        z=x%y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x=y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        y=z；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; z;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lcm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x*y/gcd(x,y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/ACM/"/>
    
    
      <category term="ACM" scheme="https://liudufu.github.io/tags/ACM/"/>
    
      <category term="数学" scheme="https://liudufu.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>ACM传奇之路(紧握着自己颤抖的双手)</title>
    <link href="https://liudufu.github.io/acm_road/"/>
    <id>https://liudufu.github.io/acm_road/</id>
    <published>2020-10-07T13:19:55.000Z</published>
    <updated>2020-10-07T13:22:22.028Z</updated>
    
    <content type="html"><![CDATA[<p>从我接触程序竞赛到现在应该有十多年了，单说ACM竞赛，从第一次非正式参赛到现在也差不多有7年多的样子。有太多的故事，想说的话，却一直没能有机会写下来。一方面是自己忙，一方面也是自己懒。所以很感谢能有人“逼”我来写点什么。想到会有很多人来读我写的文字，自己也觉得很开心。其实每个人的生活都是一部电影，只是没有那么多幸运的人有机会去诉说。这里，且说三个小故事。 </p><a id="more"></a><p>一个关于仰望，崇拜和梦想的故事 </p><p>2000年，有一个天才的高中生，在IMO（国际数学奥林匹克竞赛）中以满分获得了金牌并提前一年进入北大读书。在他前往北大之前，他受邀到他毕业的小学给了一个演讲。而听众里面有一个三年级的小正太，演讲啥也没记住，倒是在心里埋下了一个小小的梦想：“我也想代表中国去拿金牌”。 </p><p>10年后这个天才高中生博士毕业，并受邀回到他毕业的高中又给了一个演讲，当年的小正太变成了少年，又恰好在听众席里。这个少年刚刚入选了信息学奥林匹克中国国家队，将代表中国去加拿大参加国际比赛。 </p><p>这个天才高中生叫恽之玮，拉马努金奖得主，目前在斯坦福大学任教；而那个小正太，也就是那个少年，后来非常丢人的拿到了国际比赛的银牌，又在ACM竞赛圈子里晃悠了一圈，现在也跑到美国读博士了。很不幸，世界没能狗血到再度产生一个莫扎特和贝多芬的故事。少年自然没法和天才相比拟，不过起码在需要写写文字的时候，少年的故事可以这样开头：“我有一个梦想”。 </p><p>小学的时候参加计算机兴趣小组，从那里接触了编程。不过，要说真正被带入了程序竞赛这条不归路，那还得归功于我的恩师，常州高级中学的曹文老师的顶级忽悠能力。 </p><p>我从初一开始跟着曹老师学习信息学竞赛，曹老师最喜欢有事没事的扯他过去的学生的故事，以及竞赛圈里的八卦。也正是那个时候，从曹老师的口中，我知道了世界上还有ACM这么个玩意。还记得某一天，曹老师又在胡侃：“ACM比赛一共有4所大学夺得过2次世界冠军：上海交通大学，圣彼得堡ITMO，华沙大学还有斯坦福大学。”说出来不怕笑话，这也是我第一次听到斯坦福大学这个名字。所以斯坦福大学给我的第一印象就是：两次世界冠军的学校！说句题外话：因为恽之玮的原因，我喜欢了北大很长时间，也因为曹老师的这句胡侃，让斯坦福成了我最向往的大学；不过造化弄人，我的本科在北大的隔壁度过，而博士，又跑到了斯坦福的隔壁。 </p><p>曹老师八卦的性格，也潜移默化的影响了我。平时没事的时候，就特别喜欢翻阅往年的OI比赛的成绩单，还有ACM世界总决赛的名单。直到现在，我都可以如数家珍的说出之前近10年的信息学竞赛中国国家队（甚至美国国家队）的队员名单，或者ACM世界总决赛清华，交大的队员名字，以及他们的名次。对于一个初中的孩子，翻着这些名字，听着这些故事，我无法用言语描述那是我心中的激动，好像这些故事，发生在一个无与伦比的，广阔的世界，而这些名字，就犹如夜空中的星星一样，闪耀，夺目。后来的很多年中，我很有幸几乎全部见过或者接触过了这些当年在我心中犹如浩瀚星辰般的神们。他们应该很难想象，当我第一次见到他们的激动的心情。那种感觉，和歌迷见到他们的偶像一样。那时候心中埋藏很多年的小小的执念，也不过就是见他们一次。甚至直到现在，对一些人，还是这样。 </p><p>初中的时候最喜欢参加省里的夏令营，冬令营，那时候年纪小，最喜欢跟在师兄的后面，听着师兄们讲着我听不懂的算法，打着我没玩过的游戏（我对仙剑的执念也是从那个时候开始的）；初三的暑假我有幸到了上海交通大学ACM队训练了一个月，作为一个初中生，我第一次见到了，国内顶尖的大学，顶尖的大学生是怎么样的，也遇到了我无比尊敬和感恩的，上海交通大学ACM班的俞勇老师；到了高中开始以非正式队伍的身份参加ACM区域赛，也就总算可以亲眼看一看，那些传说中的人，还可以冲上去和他们合一张影，然后激动的晚上睡不着觉；上了大学，大二暑假我到美国Facebook公司总部实习，在湾区见到了更老一辈的，那些如雷贯耳的名字。 </p><p>光阴荏苒，时光匆匆流逝，好些画面在心里依然是那么清晰。讲讲那些名字吧。初中每次参加省里组织的信息学冬令营夏令营都会嚷嚷，我要是能见一面朱泽园（IOI金牌，ACM总决赛亚军，MIT博士）就好了，后来高二时在ACM杭州赛区总算见到了，当时还见到了他的两位队友：楼天成（楼教主，圈内人士应该都很熟悉）和周源（IOI满分，ACM总决赛亚军，CMU博士），当时捧着那张合影，简直比拿了冠军还激动；初三暑假在交大，第一次在机房里见到了仰慕已久的戴文渊（ACM世界冠军，目前就职于华为诺亚方舟实验室），后来每次只要有机会都要蹦蹦跳跳的跑去找戴文渊合影；高一在ACM南京赛区，第一次见到了唐文斌（ACM总决赛世界第六，Face++ CEO），以及他的两个队友王栋（IOI金牌）和龙凡（IOI金牌，MIT博士），当然还见到了因为比砸了心情不好而拒绝我合影请求的郭华阳（IOI金牌，就职于Facebook）。当时我可能做梦也想不到，过了若干年，我会和唐文斌一起坐在火车的餐车地上打牌，会和郭华阳在纽约曼哈顿睡上下铺。后来进了大学，和贝小辉成了好朋友，楼天成成了我的助教，胡伟栋（IOI金牌，ACM世界亚军）会请我吃饭；我更不会想到，再后来，张一飞（IOI两枚金牌得主，就职于Facebook）会给我推荐简历，我会和符文杰（中国唯一IOI，IMO双国家队成员，就职于Facebook）一起吃饭，和侯启明（NOI历史上唯一的满分，IOI金牌，浙江大学副教授）一起扯淡。当然了，进入大学以后，我不会再端着相机四处合影了。 </p><p>现在看，这些名字也很普通，也很平常，很多过去的故事，可能在茶余饭后都不会被提起了。但是世界上毕竟有这么一个小故事曾发生过：在很多很多年前，曾经有一个小正太，每天念叨着这些名字，在心里埋下小小的梦想，然后一步一步的，他见到了这些他成天念叨的人，和他们成了朋友。多年以后，他的梦想本身，也许此时正化作一个淡然的微笑。 </p><p>一个关于固执，坚持和自信的故事 </p><p>从小学开始参加信息学比赛，高一开始参加ACM区域赛，一直到现在博士还在参赛。这么多年了，有时自己都会感慨。每年参加比赛这件事情，好像已经快成为我生活的一部分了。记得有一次在ACM区域赛的时候发言，我说ACM是我的初恋，现在看，可能ACM成了我的生活了吧。懵懂，热烈，坚持，淡然，其实爱情也不过如此，最后所有的一切，都化作了生活。 </p><p>很多人问我，这么多年了你怎么还在参赛呢，花费这么多精力，时间，到底是为什么呢？其实我也快说不清楚了。很小很小的时候，那时候教数学奥赛的老师嫌我贪玩训斥我鄙视我的智商。小孩子自尊心总是特别强，想着我换个地方证明我比那些你喜欢的人都厉害，最后差不多是做到了；到了初中，我想比那些师兄师姐们都厉害，要做全国一流的选手，后来差不多也做到了；到了高中发现好像在我身边的师兄，同学超不过了（提一下，有一个高中师兄叫金斌，TCO世界冠军，ACM总决赛冠军亚军各一次，还有一个高中师兄叫吴卓杰，ACM总决赛冠军，目前都就职于Google），我就想我可以到了大学参加ACM，在ACM赛场上超过他们；到了大学，做工程的不断实习做项目，做科研的一篇接一篇的发论文，刷GPA的几乎每门课都是满分。我看看自己似乎没有一样能做到最好的，于是就想，要不然就做一个科研界ACM比的最好的，而ACM界又科研做的最好的人吧；再到后来，我知道世界上还有Percy Liang（斯坦福大学助理教授，ACM总决赛亚军），Matei Zaharia（MIT助理教授，Spark的开发者，ACM总决赛第四）这些人，遂发现自己实在是差距太大了，实在连个理由都编不出了（也许可能是常州方言讲的最好的？）。可能这个时候，ACM对我而言，更像是对自己的敬礼。毕竟，自己已经坚持了很久很久，从江南，到帝都，再到美利坚加利福尼亚。就像唱一首歌，跳一支舞，写一段文字，哪怕根本没有观众，也总希望能够最后落下伴着微笑的句点。做一件事不一定非要有一个意义，因为坚持的本身，就有意义，也因为，坚持总能伴着一份感动，时不时的在心中翻涌。 </p><p>坚持是要有信念的，信念是什么？当然是“赢”。想想还挺不容易也挺可笑的，到现在还在乎着输赢，尤其输赢已经早就没有了意义。不过也不那么可笑，因为我并不执念。“赢”也许只是对生活的热情的简写吧。小时候想打败所有的人，做最好的选手，结果过了十年参加国际比赛拿了块丢人的银牌，在中国队里垫了底；高中参加ACM，每次都为击败一支清华的队伍感到振奋，而当自己到了清华，第一次参赛就在清华内部排在了最后；大学幻想着以自己作为队伍的核心战斗力，代表清华拿冠军，参加总决赛，结果连续拿到了4次区域赛的亚军（清华的规矩是，只有冠军才有资格代表学校参加总决赛），并且其中三次都是在最后时刻被反超，同题数输罚时；大三那年总算进了总决赛，幻想着能够屌丝逆袭一次进个前八，结果最后惊险拿到了领奖队伍的最后一名（总决赛一共12支队伍可以获得奖牌，金银铜各4支，我在2013年的总决赛获得第12名），并且还输给了CMU（后来在CMU遇到了他们的教练，被调侃：“Oh, we beat you, right?”）；大四练了很久的俄罗斯风格的题目，想着再去一次在俄罗斯举办的总决赛，证明一下自己，结果在最后一次区域赛输给了当时完美发挥的交大，最后甚至连亚军都没有拿到。今年8月我在加州大学伯克利分校开始了自己博士生涯。很有幸，我找到了两个老朋友作为自己的队友，然后我们轻松的拿到了西北太平洋赛区的冠军。于是，我可以代表加州大学伯克利分校，参加5月份的ACM世界总决赛了。这是我的第二次总决赛，也将是最后一次。不过我希望后面的故事不要再继续按照之前的走势了。 </p><p>这里着重说一下我大三那年（2012）参加ACM的经历。当年我们的队名叫Again And Again，理由很简单，队里面三个人，我，毛杰明（IOI金牌，目前在普林斯顿读博士），莫涛（NOI第一，目前在香港中文读博士），在过去的2年里（2010和2011）分别参加过8个不同的赛区，一共获得了其中的6个亚军，并且又在2012年的长春赛区，一起携手拿到了我们的第7个亚军。9次比赛7次亚军，我想这个记录也是挺难超越的了。 </p><p>我是一个固执的人，一旦认定的事情很难再被改变；我也是一个幸运的人，大部分我认定的事情都起码没有失败。也许，老天真的会偏爱一个愿意一直仅仅因为喜欢而坚持的人吧。中学的时候，大部分时间都是我一个人呆在机房里，或者一个人在家里抱着电脑想问题，那时候参加编程比赛是有理有据的，因为可以保送大学，可以给学校争光，家长和学校也都支持。到了清华，事情就不一样了。我知道，现在参加程序比赛越来越多的有了功利性，拿奖可以保研，可以找工作，或者给学校给领导争光。不过这些理由在清华，都是不成立的。我的大部分天才同学们，都在北美最好的学校读博士，至于给学校和领导争光，我想也许我们拿到了世界冠军，可能会有机会上一次清华首页吧，不过这也只是我的猜测——毕竟清华从来没有在ACM总决赛上夺冠过。清华没有什么ACM队，没有ACM训练或者选拔，也没有什么奖金或者评优加分。在清华，ACM不过是众多学生活动中普通的一项。我们这些老人有一个老笑话：“如何在开幕式迅速识别出清华的学生？在那里做作业的！”在很多学校，也许有很多ACM队的黑话，传统，故事；而清华也有他自己的故事，这些故事可能最特别也最普通。特别在于，清华也有与众不同的故事，不过这些故事几乎没有单纯关于ACM的：比如鬲融的故事（清华的一段传说，计算机系历史最高GPA，IOI金牌，ACM总决赛亚军，普林斯顿大学博士），周源的故事，或者楼天成的故事；普通在于，这些故事并没有一个明确的标签，ACM比赛只是这些故事里面，很小很小的一部分。大家是清华人，要做最好的学生，要发论文，要搞好课业，要跑3000米，只是大家都喜欢ACM，觉得她有趣。 </p><p>“有趣”二字，说来轻巧，可是，我似乎也找不出更好的词汇来评价ACM这项活动了。读博士了之后很多人劝我说：“你都读博士了还玩这些年轻人的活动。”我同意这个观点。不过因为我还是觉得参加ACM很有趣，所以我又固执的接着参加了。于是作为一个老博士，我又得继续忽悠着同为博士的队友们在周末抽出时间来训练，继续在闲着无聊的时候作着我自己关于“赢”的春秋大梦。 </p><p>一个关于青春，热情和友谊的故事 </p><p>参加ACM ICPC竞赛，给了我太多太多美好的回忆，让我收获了太多太多宝贵的友谊。每当回忆翻涌，总会感慨当时的纯粹，热情和真挚——自己也算，有一段奋斗过的青春。 </p><p>初三的暑假和两个师兄，吴沛凡（目前在纽约大学读经济博士）和金斌在上海交大ACM队训练了一个月。期间每天上午做一套真题，下午修订和讨论。还记得那时候金斌第一次洗冷水澡的时候爆发出的惊人惨叫；记得最后一部哈利波特问世，我晚上拽着沛凡给我恶补哈利波特；记得第一次知道交大的BBS叫未名，清华的BBS叫水木；记得第一次知道了当时还得审核大学生身份的人人网，当时吴卓杰还用人人网的bug玩上面买车位的网页游戏；记得第一次去问交大师姐一道题怎么做的时候红着脸踌躇了好半天；记得当时更老的师兄们骑车载着我们去吃盖浇饭；更记得第一次三人组队赢了交大一队时候的兴奋和激动；也记得第一次见到交大ACM班的俞勇老师时候的胆怯和害羞……那段时光是我整个中学生涯中最好的时光，每天都很快乐，每天都有进步。我不得不承认，从那时候开始，交大成了我高中时期最向往的地方：为了去交大而不去清华，我还在高三的时候和我的妈妈进行了接近三个月的激烈斗争。好多好多年过去了，当年的ACM队师兄师姐们，早就工作，或者快博士毕业了；三个坐在后座的小屁孩，现在两个在读博士，一个拿了世界冠军，去了谷歌；俞勇老师老了很多岁。据我很多交大的同学说，俞勇老师很严厉。也许正因为我没真正做过俞老师的学生，所以起码在我这里，俞老师给我的印象是一个温和负责的导师，每次我参加比赛见到俞老师，都会特别亲切的打招呼，交谈。也许我应该对我去了清华感到庆幸吧，因为，从此交大在我心里就只留下了她最美好的样子。 </p><p>大学在清华碰到了毛杰明和莫涛两个死党，一起吃外卖，一起互黑，一起旅游。那时候我自封后勤队长（其实我在每一个队伍里的角色都是这个），负责研究去什么赛区，每次协调大家什么时候训练，训练什么题，还负责代购火车票飞机票以及和教练沟通，并且乐此不疲。他俩也待我不薄，因为毛杰明，我在大学里少走了很多弯路，又因为莫涛，让我多了一个特别铁杆的基友。 </p><p>2011年福州赛区，只要另一支清华的队伍不能在30分钟内通过最后一题，我和毛杰明就能晋级总决赛。只是很可惜，20分钟后，那支队伍前，升起了对应颜色的气球。我还清楚的记得，在回程的飞机上，心情郁闷的我和厦门航空的空乘吵了起来。毛杰明不停的安慰我不用跟人一般见识。我后来又去过不少次福建，不过也再没做过厦门航空的飞机。 </p><p>2012年我和毛杰明还有莫涛组队。那年的长春赛区，比赛前我们三个吃牛排刮出了一张奖励2元钱的发票，要知道当时我们已经拿了6次亚军了。莫涛觉得2元钱太晦气，还刻意第二天早上给服务员送出1元的小费希望讨个吉利。结果赛场上，我们站在中山大学的身后，近距离目睹了他们在比赛结束后5分钟得到系统返回的一个YES，并以罚时优势将我们反超并夺冠的欣喜若狂。更狗血的是，在接下来的由中山大学负责命题的天津赛区，有一道题目和之前在长春赛区中山反超我们的那题一模一样。于是，在中大的好心保送下，我们总算拿到了冠军。 </p><p>2013年圣彼得堡的总决赛，从来不喝咖啡的我在赛前喝了咖啡，不过似乎咖啡对于紧张没有什么好的疗效。虽然这么多年来我每逢ACM比赛都会紧张，心跳加速，血压升高，不过那一天似乎大家都紧张的特别严重：场上三个人对着两道题看了1个多小时居然都不会做，而一出赛场就都会了。回忆到当时看结果公布时自己的焦虑和不安，我觉得以后估计也不会有机会能够让自己的心律比那个时候更快一点了。记得比赛入场的时候我和我的一个俄罗斯朋友，当时莫斯科大学的选手Sergey握了一个手，然后那一年莫斯科大学和我们都拿了铜牌。毛杰明和莫涛都说，估计是我吸来了莫斯科大学的仙气，把人家拉成了铜牌，把我们从胸牌，提到了奖牌。这事我后来一直没好意思和Sergey说，希望他不会在心里骂我。 </p><p>2013年下半年，毛杰明去了普林斯顿读博士，我和莫涛拉来了陈高远（Topcoder Target，USC硕士在读）。我们三个大四狗组了个队，唤作“老流氓”。作为流氓头子，我愣是自己联系，办理手续，然后忽悠另外两个老家伙们掏出了之前的比赛的奖金买了飞往日本的机票，使我们队成为了近10年来清华第一支参加海外ACM赛区的队伍（清华由于经费不够，加上一些历史原因，是不参加海外赛区的）。比赛比的很糟，不过三个老家伙在富士山下泡温泉，在东京米其林餐厅吃寿司，爬东京塔也是挺值得怀念的。还记得当时莫涛痴迷某日剧（具体原因我后来黑了他好久），我们被忽悠着整个一天东京的行程都按照剧里男主和女主的约会路线进行。傍晚，在东京的台场，莫涛望着远处的彩虹桥，掏出了他的iTouch和我说：“你看，剧里就是这个位置，这个角度，这个时间！”那荡漾的眼神，一定会成为未来很多很多年，一个关于莫涛的经典槽点。 </p><p>2014年，我来到了加州伯克利大学读博士。很幸运，我遇到了两个也再读博士的中国队友，姜碧野（NOI2009金牌，在清华ACM区域赛和莫涛一起拿过3次亚军，代表伯克利参加了2014年ACM总决赛）和赖陆航（数学博士，IOI2010金牌，代表北大参加了2011年ACM总决赛），组成了伯克利中国队。于是我又开始了我后勤部长兼队内主码的身份——反正我对这个角色早已驾轻就熟。我们很轻松的晋级了2015年5月份将在摩洛哥举行的ACM总决赛。这对我们三个人来说，都是第二次，也是最后一次总决赛，也将是竞赛生涯的最后一场比赛了。想想时间过得真快，从一个小孩到一个博士，关于青春的故事，也终要画上句号了。 </p><p>这段青春里，有太多有趣的事，有趣的人。很多很多年以后，这些说不完、道不尽，也都化为老友相聚时的调侃和相逢一笑。我觉得，这也许就是生活里，最美的喜剧。 </p><p>最后的一些话 </p><p>这是我的故事，感谢我有这个机会能把我的故事写下来，也感谢前来阅读的人。ACM不是生活的全部，甚至连一小部分都算不上——就像，写完这些文字，我还得抓紧时间继续准备我的论文，继续我的研究工作。也确实是这样，一个人的生活应该是丰富的，充实的和多彩的。生活应当像浩瀚的宇宙，壮阔却又静谧，ACM不过是那绚烂星辰中的一颗。宇宙不应因为少了一颗星而暗淡，但是却可能因为多了一颗星而多了一段璀璨的文明。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从我接触程序竞赛到现在应该有十多年了，单说ACM竞赛，从第一次非正式参赛到现在也差不多有7年多的样子。有太多的故事，想说的话，却一直没能有机会写下来。一方面是自己忙，一方面也是自己懒。所以很感谢能有人“逼”我来写点什么。想到会有很多人来读我写的文字，自己也觉得很开心。其实每个人的生活都是一部电影，只是没有那么多幸运的人有机会去诉说。这里，且说三个小故事。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="https://liudufu.github.io/categories/%E7%AE%97%E6%B3%95/ACM/"/>
    
    
      <category term="ACM" scheme="https://liudufu.github.io/tags/ACM/"/>
    
      <category term="经验" scheme="https://liudufu.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
